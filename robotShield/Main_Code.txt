/*-------------------------------------SRF Ultrasonic Sensor Code Structure--------------------------------------------------
1-Trigger and Echo Pin Configuration.
2-Serial Terminal baudrate Config = 115200.
3-Trigger Pin Assign to Low Value for 2 us.
4-Trigger Pin Assign to High Value for 10 us.
5-Trigger Pin Assign to Low Value .
6-Read the travel time and put that value into the variable "Response_Time".
7-Distance Calculate using (Distance * Response_Time) Equation.
8-Distance print on Serial terminal.
*/
/*-------------------------------------Defines pins numbers-----------------------------------------------------------------*/
const int SRF_Trigger_Pin = 7;
const int SRF_Echo_Pin = 8;
const int Object_detection_led = 6;
/*-------------------------------------Defines variables--------------------------------------------------------------------*/
//long Response_Time;
float Distance;
bool  Obj_Detection;
int timer;
int Filter_Cnt=0;
bool Filter_Enb;
float Dis_Average=0;
/*-------------------------------------Setup Section------------------------------------------------------------------------*/
void setup() {
  TCCR0A=(1<<WGM01);    //Set the CTC mode   
  OCR0A=0xF9;           //Value for ORC0A for 1ms 
  //TIMSK0|=(1<<OCIE0A);  //Set  the interrupt request
  //sei();
  TCCR0B|=(1<<CS01);    //Set the prescale 1/64 clock
  TCCR0B|=(1<<CS00);

  pinMode(SRF_Trigger_Pin, OUTPUT);                     // Sets the trigPin as an Output
  pinMode(SRF_Echo_Pin, INPUT);                         // Sets the echoPin as an Input
  Serial.begin(115200);                                 // Starts the serial communication
}
/*-------------------------------------Loop Section-------------------------------------------------------------------------*/
void loop() {
  Distance=Distance_Calculate_Filter("average","cm");
  //Distance=Distance_Calculate("cm");                  //Distance Function Declration. This Function
  Obj_Detection=Object_Detection(50);
  if(Obj_Detection==true) digitalWrite(Object_detection_led, HIGH);
  if(Obj_Detection==false) digitalWrite(Object_detection_led, LOW);
  //Serial.print("Distance: ");
  //Serial.println(Distance);                             // Prints the distance on the Serial Monitor
}
/*-------------------------------------Distance Calculate Function---------------------------------------------------------*/
float Distance_Calculate(char *unit)
{
  float Dis;
  long Response_Time;
  digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state for 2 Micro second
  delayMicroseconds(2);
  digitalWrite(SRF_Trigger_Pin, HIGH);                  // Sets the trigPin on HIGH state for 10 micro seconds
  delayMicroseconds(10);
  digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state 
  Response_Time = pulseIn(SRF_Echo_Pin, HIGH);          // Reads the echoPin, returns the sound wave travel time in microseconds
  if(unit=="cm")   Dis = Response_Time * 0.034 / 2;       // Calculating the distance (CM)
  if(unit=="inch") Dis = Response_Time * 0.034 * 0.393701 / 2;         // Calculating the distance (inch)
  if(unit=="")   Dis = Response_Time * 0.034 / 2;
  return Dis;
}
/*-------------------------------------Object Detection Function------------------------------------------------------------*/
bool Object_Detection(int Limit)
{
  if(Distance <= Limit) return true;
  else return false;
}
float Distance_Calculate_Filter(char *Name_Filter, char *unit)
{
  
  float Dis;
  long Response_Time;
  if(Name_Filter=="average")
  {
    if(unit=="cm")
    {   
        Filter_Cnt++;
        TIMSK0|=(1<<OCIE0A);  //Set  the interrupt request
        sei();                //Enable interrupt        
        digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state for 2 Micro second
        delayMicroseconds(2);
        digitalWrite(SRF_Trigger_Pin, HIGH);                  // Sets the trigPin on HIGH state for 10 micro seconds
        delayMicroseconds(10);
        digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state 
        Response_Time = pulseIn(SRF_Echo_Pin, HIGH);
        Dis = Response_Time * 0.034 / 2;
        Dis_Average= Dis + Dis_Average;
      if(timer==1000)
      { 
        //Serial.println(Dis_Average);
        //Serial.println(Filter_Cnt);
        Dis_Average=Dis_Average/Filter_Cnt;
        Serial.print("Distance: ");
        Serial.println(Dis_Average);
        Filter_Cnt=0;
        timer=0;
        return Dis_Average;
      } 
      
    }
    if(unit=="inch")
    {   
        Filter_Cnt++;
        TIMSK0|=(1<<OCIE0A);  //Set  the interrupt request
        sei();                //Enable interrupt        
        digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state for 2 Micro second
        delayMicroseconds(2);
        digitalWrite(SRF_Trigger_Pin, HIGH);                  // Sets the trigPin on HIGH state for 10 micro seconds
        delayMicroseconds(10);
        digitalWrite(SRF_Trigger_Pin, LOW);                   // Sets the trigger_Pin on Low state 
        Response_Time = pulseIn(SRF_Echo_Pin, HIGH);
        Dis = Response_Time * 0.034 * 0.393701/ 2;
        Dis_Average= Dis + Dis_Average;
      if(timer==1000)
      { 
        //Serial.println(Dis_Average);
        //Serial.println(Filter_Cnt);
        Dis_Average=Dis_Average/Filter_Cnt;
        Serial.print("Distance: ");
        Serial.println(Dis_Average);
        Filter_Cnt=0;
        timer=0;
        return Dis_Average;
      }

    }  
  }
}

ISR(TIMER0_COMPA_vect){    //This  is the interrupt request
    timer++;
    if(timer==1000)
    {
      TIMSK0=0; 
      cli();
    } 
}
