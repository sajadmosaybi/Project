
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a0  080066a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080066a0  080066a0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066a0  080066a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb4  2000007c  08006724  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  08006724  00021f30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012669  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df7  00000000  00000000  0003270e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019803  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013597  00000000  00000000  00050aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cca0  00000000  00000000  00064042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0ce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  000f0d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080057e8 	.word	0x080057e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080057e8 	.word	0x080057e8

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f002 f98d 	bl	8002478 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of Oled_Task */
  Oled_TaskHandle = osThreadNew(Oled_Func, NULL, &Oled_Task_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f002 f985 	bl	8002478 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	08006598 	.word	0x08006598
 800017c:	08000191 	.word	0x08000191
 8000180:	200000ac 	.word	0x200000ac
 8000184:	080065bc 	.word	0x080065bc
 8000188:	080001a1 	.word	0x080001a1
 800018c:	200000b0 	.word	0x200000b0

08000190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f002 fa17 	bl	80025cc <osDelay>
 800019e:	e7fb      	b.n	8000198 <StartDefaultTask+0x8>

080001a0 <Oled_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Oled_Func */
void Oled_Func(void *argument)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Oled_Func */
  /* Infinite loop */
  for(;;)
  {
	  sprintf(buff,"hello world");
 80001a8:	490a      	ldr	r1, [pc, #40]	; (80001d4 <Oled_Func+0x34>)
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <Oled_Func+0x38>)
 80001ac:	f004 ff56 	bl	800505c <siprintf>
	  		SSD1306_Fill (0);  // fill the display with black color
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 f9f5 	bl	80005a0 <SSD1306_Fill>
	  		SSD1306_GotoXY (0,0);  // goto 10, 10
 80001b6:	2100      	movs	r1, #0
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 fa67 	bl	800068c <SSD1306_GotoXY>
	  		SSD1306_Puts (buff, &Font_11x18, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <Oled_Func+0x3c>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <Oled_Func+0x38>)
 80001c4:	f000 faf8 	bl	80007b8 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80001c8:	f000 f9bc 	bl	8000544 <SSD1306_UpdateScreen>

    osDelay(1);
 80001cc:	2001      	movs	r0, #1
 80001ce:	f002 f9fd 	bl	80025cc <osDelay>
	  sprintf(buff,"hello world");
 80001d2:	e7e9      	b.n	80001a8 <Oled_Func+0x8>
 80001d4:	08005818 	.word	0x08005818
 80001d8:	20000098 	.word	0x20000098
 80001dc:	20000000 	.word	0x20000000

080001e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <MX_GPIO_Init+0x40>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <MX_GPIO_Init+0x40>)
 80001ec:	f043 0320 	orr.w	r3, r3, #32
 80001f0:	6193      	str	r3, [r2, #24]
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <MX_GPIO_Init+0x40>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	f003 0320 	and.w	r3, r3, #32
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <MX_GPIO_Init+0x40>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <MX_GPIO_Init+0x40>)
 8000204:	f043 0308 	orr.w	r3, r3, #8
 8000208:	6193      	str	r3, [r2, #24]
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <MX_GPIO_Init+0x40>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	f003 0308 	and.w	r3, r3, #8
 8000212:	603b      	str	r3, [r7, #0]
 8000214:	683b      	ldr	r3, [r7, #0]

}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40021000 	.word	0x40021000

08000224 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <MX_I2C1_Init+0x50>)
 800022a:	4a13      	ldr	r2, [pc, #76]	; (8000278 <MX_I2C1_Init+0x54>)
 800022c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_I2C1_Init+0x50>)
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <MX_I2C1_Init+0x58>)
 8000232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <MX_I2C1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_I2C1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_I2C1_Init+0x50>)
 8000242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <MX_I2C1_Init+0x50>)
 8000256:	2200      	movs	r2, #0
 8000258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_I2C1_Init+0x50>)
 800025c:	2200      	movs	r2, #0
 800025e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000260:	4804      	ldr	r0, [pc, #16]	; (8000274 <MX_I2C1_Init+0x50>)
 8000262:	f000 fedd 	bl	8001020 <HAL_I2C_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 f8a1 	bl	80003b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	200000b4 	.word	0x200000b4
 8000278:	40005400 	.word	0x40005400
 800027c:	00061a80 	.word	0x00061a80

08000280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000288:	f107 0310 	add.w	r3, r7, #16
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <HAL_I2C_MspInit+0x70>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d123      	bne.n	80002e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0308 	and.w	r3, r3, #8
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002b8:	23c0      	movs	r3, #192	; 0xc0
 80002ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002bc:	2312      	movs	r3, #18
 80002be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c0:	2303      	movs	r3, #3
 80002c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <HAL_I2C_MspInit+0x78>)
 80002cc:	f000 fd24 	bl	8000d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002da:	61d3      	str	r3, [r2, #28]
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <HAL_I2C_MspInit+0x74>)
 80002de:	69db      	ldr	r3, [r3, #28]
 80002e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002e8:	bf00      	nop
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40005400 	.word	0x40005400
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010c00 	.word	0x40010c00

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000302:	f000 fbc3 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000306:	f000 f80f 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030a:	f7ff ff69 	bl	80001e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800030e:	f7ff ff89 	bl	8000224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t check = SSD1306_Init ();
 8000312:	f000 f853 	bl	80003bc <SSD1306_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800031a:	f002 f847 	bl	80023ac <osKernelInitialize>
  MX_FREERTOS_Init();
 800031e:	f7ff ff17 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000322:	f002 f875 	bl	8002410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000326:	e7fe      	b.n	8000326 <main+0x2a>

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fd7a 	bl	8004e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fc1f 	bl	8001bb4 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800037c:	f000 f819 	bl	80003b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fe8c 	bl	80020b8 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003a6:	f000 f804 	bl	80003b2 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b6:	b672      	cpsid	i
}
 80003b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ba:	e7fe      	b.n	80003ba <Error_Handler+0x8>

080003bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80003c2:	f000 fa1f 	bl	8000804 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80003ca:	2201      	movs	r2, #1
 80003cc:	2178      	movs	r1, #120	; 0x78
 80003ce:	485b      	ldr	r0, [pc, #364]	; (800053c <SSD1306_Init+0x180>)
 80003d0:	f001 f868 	bl	80014a4 <HAL_I2C_IsDeviceReady>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	e0a9      	b.n	8000532 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80003de:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80003e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003e4:	e002      	b.n	80003ec <SSD1306_Init+0x30>
		p--;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f9      	bne.n	80003e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80003f2:	22ae      	movs	r2, #174	; 0xae
 80003f4:	2100      	movs	r1, #0
 80003f6:	2078      	movs	r0, #120	; 0x78
 80003f8:	f000 fa7e 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80003fc:	2220      	movs	r2, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	2078      	movs	r0, #120	; 0x78
 8000402:	f000 fa79 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000406:	2210      	movs	r2, #16
 8000408:	2100      	movs	r1, #0
 800040a:	2078      	movs	r0, #120	; 0x78
 800040c:	f000 fa74 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000410:	22b0      	movs	r2, #176	; 0xb0
 8000412:	2100      	movs	r1, #0
 8000414:	2078      	movs	r0, #120	; 0x78
 8000416:	f000 fa6f 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800041a:	22c8      	movs	r2, #200	; 0xc8
 800041c:	2100      	movs	r1, #0
 800041e:	2078      	movs	r0, #120	; 0x78
 8000420:	f000 fa6a 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000424:	2200      	movs	r2, #0
 8000426:	2100      	movs	r1, #0
 8000428:	2078      	movs	r0, #120	; 0x78
 800042a:	f000 fa65 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800042e:	2210      	movs	r2, #16
 8000430:	2100      	movs	r1, #0
 8000432:	2078      	movs	r0, #120	; 0x78
 8000434:	f000 fa60 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000438:	2240      	movs	r2, #64	; 0x40
 800043a:	2100      	movs	r1, #0
 800043c:	2078      	movs	r0, #120	; 0x78
 800043e:	f000 fa5b 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000442:	2281      	movs	r2, #129	; 0x81
 8000444:	2100      	movs	r1, #0
 8000446:	2078      	movs	r0, #120	; 0x78
 8000448:	f000 fa56 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800044c:	22ff      	movs	r2, #255	; 0xff
 800044e:	2100      	movs	r1, #0
 8000450:	2078      	movs	r0, #120	; 0x78
 8000452:	f000 fa51 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000456:	22a1      	movs	r2, #161	; 0xa1
 8000458:	2100      	movs	r1, #0
 800045a:	2078      	movs	r0, #120	; 0x78
 800045c:	f000 fa4c 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000460:	22a6      	movs	r2, #166	; 0xa6
 8000462:	2100      	movs	r1, #0
 8000464:	2078      	movs	r0, #120	; 0x78
 8000466:	f000 fa47 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800046a:	22a8      	movs	r2, #168	; 0xa8
 800046c:	2100      	movs	r1, #0
 800046e:	2078      	movs	r0, #120	; 0x78
 8000470:	f000 fa42 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000474:	223f      	movs	r2, #63	; 0x3f
 8000476:	2100      	movs	r1, #0
 8000478:	2078      	movs	r0, #120	; 0x78
 800047a:	f000 fa3d 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800047e:	22a4      	movs	r2, #164	; 0xa4
 8000480:	2100      	movs	r1, #0
 8000482:	2078      	movs	r0, #120	; 0x78
 8000484:	f000 fa38 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000488:	22d3      	movs	r2, #211	; 0xd3
 800048a:	2100      	movs	r1, #0
 800048c:	2078      	movs	r0, #120	; 0x78
 800048e:	f000 fa33 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	2078      	movs	r0, #120	; 0x78
 8000498:	f000 fa2e 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800049c:	22d5      	movs	r2, #213	; 0xd5
 800049e:	2100      	movs	r1, #0
 80004a0:	2078      	movs	r0, #120	; 0x78
 80004a2:	f000 fa29 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80004a6:	22f0      	movs	r2, #240	; 0xf0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2078      	movs	r0, #120	; 0x78
 80004ac:	f000 fa24 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80004b0:	22d9      	movs	r2, #217	; 0xd9
 80004b2:	2100      	movs	r1, #0
 80004b4:	2078      	movs	r0, #120	; 0x78
 80004b6:	f000 fa1f 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80004ba:	2222      	movs	r2, #34	; 0x22
 80004bc:	2100      	movs	r1, #0
 80004be:	2078      	movs	r0, #120	; 0x78
 80004c0:	f000 fa1a 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80004c4:	22da      	movs	r2, #218	; 0xda
 80004c6:	2100      	movs	r1, #0
 80004c8:	2078      	movs	r0, #120	; 0x78
 80004ca:	f000 fa15 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80004ce:	2212      	movs	r2, #18
 80004d0:	2100      	movs	r1, #0
 80004d2:	2078      	movs	r0, #120	; 0x78
 80004d4:	f000 fa10 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80004d8:	22db      	movs	r2, #219	; 0xdb
 80004da:	2100      	movs	r1, #0
 80004dc:	2078      	movs	r0, #120	; 0x78
 80004de:	f000 fa0b 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	2078      	movs	r0, #120	; 0x78
 80004e8:	f000 fa06 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80004ec:	228d      	movs	r2, #141	; 0x8d
 80004ee:	2100      	movs	r1, #0
 80004f0:	2078      	movs	r0, #120	; 0x78
 80004f2:	f000 fa01 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80004f6:	2214      	movs	r2, #20
 80004f8:	2100      	movs	r1, #0
 80004fa:	2078      	movs	r0, #120	; 0x78
 80004fc:	f000 f9fc 	bl	80008f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000500:	22af      	movs	r2, #175	; 0xaf
 8000502:	2100      	movs	r1, #0
 8000504:	2078      	movs	r0, #120	; 0x78
 8000506:	f000 f9f7 	bl	80008f8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800050a:	222e      	movs	r2, #46	; 0x2e
 800050c:	2100      	movs	r1, #0
 800050e:	2078      	movs	r0, #120	; 0x78
 8000510:	f000 f9f2 	bl	80008f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 f843 	bl	80005a0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800051a:	f000 f813 	bl	8000544 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SSD1306_Init+0x184>)
 8000520:	2200      	movs	r2, #0
 8000522:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <SSD1306_Init+0x184>)
 8000526:	2200      	movs	r2, #0
 8000528:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SSD1306_Init+0x184>)
 800052c:	2201      	movs	r2, #1
 800052e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000530:	2301      	movs	r3, #1
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000b4 	.word	0x200000b4
 8000540:	20000508 	.word	0x20000508

08000544 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	e01d      	b.n	800058c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	3b50      	subs	r3, #80	; 0x50
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	2078      	movs	r0, #120	; 0x78
 800055c:	f000 f9cc 	bl	80008f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	2078      	movs	r0, #120	; 0x78
 8000566:	f000 f9c7 	bl	80008f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800056a:	2210      	movs	r2, #16
 800056c:	2100      	movs	r1, #0
 800056e:	2078      	movs	r0, #120	; 0x78
 8000570:	f000 f9c2 	bl	80008f8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	01db      	lsls	r3, r3, #7
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <SSD1306_UpdateScreen+0x58>)
 800057a:	441a      	add	r2, r3
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	2078      	movs	r0, #120	; 0x78
 8000582:	f000 f953 	bl	800082c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	3301      	adds	r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b07      	cmp	r3, #7
 8000590:	d9de      	bls.n	8000550 <SSD1306_UpdateScreen+0xc>
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000108 	.word	0x20000108

080005a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d101      	bne.n	80005b4 <SSD1306_Fill+0x14>
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <SSD1306_Fill+0x16>
 80005b4:	23ff      	movs	r3, #255	; 0xff
 80005b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ba:	4619      	mov	r1, r3
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <SSD1306_Fill+0x2c>)
 80005be:	f004 fc37 	bl	8004e30 <memset>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000108 	.word	0x20000108

080005d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	460b      	mov	r3, r1
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	4613      	mov	r3, r2
 80005e0:	70fb      	strb	r3, [r7, #3]
	if (
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b7f      	cmp	r3, #127	; 0x7f
 80005e6:	d848      	bhi.n	800067a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	2b3f      	cmp	r3, #63	; 0x3f
 80005ec:	d845      	bhi.n	800067a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SSD1306_DrawPixel+0xb4>)
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d11a      	bne.n	8000640 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b298      	uxth	r0, r3
 8000612:	4603      	mov	r3, r0
 8000614:	01db      	lsls	r3, r3, #7
 8000616:	4413      	add	r3, r2
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <SSD1306_DrawPixel+0xb8>)
 800061a:	5cd3      	ldrb	r3, [r2, r3]
 800061c:	b25a      	sxtb	r2, r3
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	b25b      	sxtb	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b259      	sxtb	r1, r3
 8000630:	88fa      	ldrh	r2, [r7, #6]
 8000632:	4603      	mov	r3, r0
 8000634:	01db      	lsls	r3, r3, #7
 8000636:	4413      	add	r3, r2
 8000638:	b2c9      	uxtb	r1, r1
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <SSD1306_DrawPixel+0xb8>)
 800063c:	54d1      	strb	r1, [r2, r3]
 800063e:	e01d      	b.n	800067c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b298      	uxth	r0, r3
 8000648:	4603      	mov	r3, r0
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	4413      	add	r3, r2
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <SSD1306_DrawPixel+0xb8>)
 8000650:	5cd3      	ldrb	r3, [r2, r3]
 8000652:	b25a      	sxtb	r2, r3
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	2101      	movs	r1, #1
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	b25b      	sxtb	r3, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4013      	ands	r3, r2
 8000668:	b259      	sxtb	r1, r3
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	4603      	mov	r3, r0
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	4413      	add	r3, r2
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <SSD1306_DrawPixel+0xb8>)
 8000676:	54d1      	strb	r1, [r2, r3]
 8000678:	e000      	b.n	800067c <SSD1306_DrawPixel+0xac>
		return;
 800067a:	bf00      	nop
	}
}
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000508 	.word	0x20000508
 8000688:	20000108 	.word	0x20000108

0800068c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	80fb      	strh	r3, [r7, #6]
 8000698:	4613      	mov	r3, r2
 800069a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <SSD1306_GotoXY+0x28>)
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <SSD1306_GotoXY+0x28>)
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	8053      	strh	r3, [r2, #2]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000508 	.word	0x20000508

080006b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006c8:	4b3a      	ldr	r3, [pc, #232]	; (80007b4 <SSD1306_Putc+0xfc>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
	if (
 80006d4:	2b7f      	cmp	r3, #127	; 0x7f
 80006d6:	dc07      	bgt.n	80006e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <SSD1306_Putc+0xfc>)
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	461a      	mov	r2, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006e4:	2b3f      	cmp	r3, #63	; 0x3f
 80006e6:	dd01      	ble.n	80006ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e05e      	b.n	80007aa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e04b      	b.n	800078a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3b20      	subs	r3, #32
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	7849      	ldrb	r1, [r1, #1]
 80006fe:	fb01 f303 	mul.w	r3, r1, r3
 8000702:	4619      	mov	r1, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	440b      	add	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	e030      	b.n	8000778 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d010      	beq.n	8000748 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SSD1306_Putc+0xfc>)
 8000728:	881a      	ldrh	r2, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	4413      	add	r3, r2
 8000730:	b298      	uxth	r0, r3
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SSD1306_Putc+0xfc>)
 8000734:	885a      	ldrh	r2, [r3, #2]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	4619      	mov	r1, r3
 8000742:	f7ff ff45 	bl	80005d0 <SSD1306_DrawPixel>
 8000746:	e014      	b.n	8000772 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <SSD1306_Putc+0xfc>)
 800074a:	881a      	ldrh	r2, [r3, #0]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	b29b      	uxth	r3, r3
 8000750:	4413      	add	r3, r2
 8000752:	b298      	uxth	r0, r3
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <SSD1306_Putc+0xfc>)
 8000756:	885a      	ldrh	r2, [r3, #2]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	b29b      	uxth	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b299      	uxth	r1, r3
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf0c      	ite	eq
 8000766:	2301      	moveq	r3, #1
 8000768:	2300      	movne	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	f7ff ff2f 	bl	80005d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	3301      	adds	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	4293      	cmp	r3, r2
 8000782:	d3c8      	bcc.n	8000716 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	461a      	mov	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	4293      	cmp	r3, r2
 8000794:	d3ad      	bcc.n	80006f2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <SSD1306_Putc+0xfc>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	4413      	add	r3, r2
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <SSD1306_Putc+0xfc>)
 80007a6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000508 	.word	0x20000508

080007b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	4613      	mov	r3, r2
 80007c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80007c6:	e012      	b.n	80007ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	68b9      	ldr	r1, [r7, #8]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff71 	bl	80006b8 <SSD1306_Putc>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d002      	beq.n	80007e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	e008      	b.n	80007fa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1e8      	bne.n	80007c8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	781b      	ldrb	r3, [r3, #0]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <ssd1306_I2C_Init+0x24>)
 800080c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800080e:	e002      	b.n	8000816 <ssd1306_I2C_Init+0x12>
		p--;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f9      	bne.n	8000810 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	0003d090 	.word	0x0003d090

0800082c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b0c7      	sub	sp, #284	; 0x11c
 8000830:	af02      	add	r7, sp, #8
 8000832:	4604      	mov	r4, r0
 8000834:	4608      	mov	r0, r1
 8000836:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800083a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800083e:	600a      	str	r2, [r1, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000846:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800084a:	4622      	mov	r2, r4
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000852:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000856:	4602      	mov	r2, r0
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800085e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000862:	460a      	mov	r2, r1
 8000864:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800086e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000872:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800087a:	2300      	movs	r3, #0
 800087c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000880:	e015      	b.n	80008ae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000882:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000886:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800088a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	441a      	add	r2, r3
 8000892:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000896:	3301      	adds	r3, #1
 8000898:	7811      	ldrb	r1, [r2, #0]
 800089a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800089e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80008a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80008a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008a8:	3301      	adds	r3, #1
 80008aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008b8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008bc:	8812      	ldrh	r2, [r2, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d8df      	bhi.n	8000882 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80008c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008c6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b299      	uxth	r1, r3
 80008ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f107 020c 	add.w	r2, r7, #12
 80008e0:	200a      	movs	r0, #10
 80008e2:	9000      	str	r0, [sp, #0]
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <ssd1306_I2C_WriteMulti+0xc8>)
 80008e6:	f000 fcdf 	bl	80012a8 <HAL_I2C_Master_Transmit>
}
 80008ea:	bf00      	nop
 80008ec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	200000b4 	.word	0x200000b4

080008f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	460b      	mov	r3, r1
 8000904:	71bb      	strb	r3, [r7, #6]
 8000906:	4613      	mov	r3, r2
 8000908:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800090e:	797b      	ldrb	r3, [r7, #5]
 8000910:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	b299      	uxth	r1, r3
 8000916:	f107 020c 	add.w	r2, r7, #12
 800091a:	230a      	movs	r3, #10
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2302      	movs	r3, #2
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <ssd1306_I2C_Write+0x38>)
 8000922:	f000 fcc1 	bl	80012a8 <HAL_I2C_Master_Transmit>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000b4 	.word	0x200000b4

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_MspInit+0x4c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x4c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x4c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 f9a8 	bl	8000cc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b2:	f000 f8b1 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009b6:	f003 fa43 	bl	8003e40 <xTaskGetSchedulerState>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d001      	beq.n	80009c4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009c0:	f003 ffa2 	bl	8004908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f004 f9e0 	bl	8004dbc <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000510 	.word	0x20000510
 8000a30:	20001f30 	.word	0x20001f30

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff8 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 f9ad 	bl	8004dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fc45 	bl	80002fc <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a7c:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8000a80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a84:	20001f30 	.word	0x20001f30

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f907 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff ff44 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f911 	bl	8000cfe <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f8e7 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000010 	.word	0x20000010
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000010 	.word	0x20000010
 8000b38:	20000514 	.word	0x20000514

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000514 	.word	0x20000514

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff90 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff49 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e169      	b.n	8001000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8158 	bne.w	8000ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a9a      	ldr	r2, [pc, #616]	; (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d05e      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d54:	4a98      	ldr	r2, [pc, #608]	; (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d875      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d5a:	4a98      	ldr	r2, [pc, #608]	; (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d058      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d60:	4a96      	ldr	r2, [pc, #600]	; (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d86f      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d66:	4a96      	ldr	r2, [pc, #600]	; (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d052      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a94      	ldr	r2, [pc, #592]	; (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d869      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d72:	4a94      	ldr	r2, [pc, #592]	; (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d04c      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d78:	4a92      	ldr	r2, [pc, #584]	; (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d863      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d7e:	4a92      	ldr	r2, [pc, #584]	; (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d046      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d84:	4a90      	ldr	r2, [pc, #576]	; (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d85d      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d82a      	bhi.n	8000de4 <HAL_GPIO_Init+0xcc>
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d859      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <HAL_GPIO_Init+0x80>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000ded 	.word	0x08000ded
 8000da0:	08000dff 	.word	0x08000dff
 8000da4:	08000e41 	.word	0x08000e41
 8000da8:	08000e47 	.word	0x08000e47
 8000dac:	08000e47 	.word	0x08000e47
 8000db0:	08000e47 	.word	0x08000e47
 8000db4:	08000e47 	.word	0x08000e47
 8000db8:	08000e47 	.word	0x08000e47
 8000dbc:	08000e47 	.word	0x08000e47
 8000dc0:	08000e47 	.word	0x08000e47
 8000dc4:	08000e47 	.word	0x08000e47
 8000dc8:	08000e47 	.word	0x08000e47
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e47 	.word	0x08000e47
 8000dd4:	08000e47 	.word	0x08000e47
 8000dd8:	08000e47 	.word	0x08000e47
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	4a79      	ldr	r2, [pc, #484]	; (8000fcc <HAL_GPIO_Init+0x2b4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dea:	e02c      	b.n	8000e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e029      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e024      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	3308      	adds	r3, #8
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e01f      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e01a      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e013      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	611a      	str	r2, [r3, #16]
          break;
 8000e32:	e009      	b.n	8000e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	615a      	str	r2, [r3, #20]
          break;
 8000e3e:	e003      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          break;
 8000e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d801      	bhi.n	8000e52 <HAL_GPIO_Init+0x13a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e001      	b.n	8000e56 <HAL_GPIO_Init+0x13e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3304      	adds	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d802      	bhi.n	8000e64 <HAL_GPIO_Init+0x14c>
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x152>
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	3b08      	subs	r3, #8
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	210f      	movs	r1, #15
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	6a39      	ldr	r1, [r7, #32]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	431a      	orrs	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <HAL_GPIO_Init+0x2c0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <HAL_GPIO_Init+0x2c4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <HAL_GPIO_Init+0x2c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f16:	492f      	ldr	r1, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	492c      	ldr	r1, [pc, #176]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4928      	ldr	r1, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60cb      	str	r3, [r1, #12]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	491e      	ldr	r1, [pc, #120]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4914      	ldr	r1, [pc, #80]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d021      	beq.n	8000fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
 8000fb4:	e021      	b.n	8000ffa <HAL_GPIO_Init+0x2e2>
 8000fb6:	bf00      	nop
 8000fb8:	10320000 	.word	0x10320000
 8000fbc:	10310000 	.word	0x10310000
 8000fc0:	10220000 	.word	0x10220000
 8000fc4:	10210000 	.word	0x10210000
 8000fc8:	10120000 	.word	0x10120000
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <HAL_GPIO_Init+0x304>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae8e 	bne.w	8000d2c <HAL_GPIO_Init+0x14>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	372c      	adds	r7, #44	; 0x2c
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e12b      	b.n	800128a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff f91a 	bl	8000280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001084:	f001 f960 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8001088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a81      	ldr	r2, [pc, #516]	; (8001294 <HAL_I2C_Init+0x274>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d807      	bhi.n	80010a4 <HAL_I2C_Init+0x84>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4a80      	ldr	r2, [pc, #512]	; (8001298 <HAL_I2C_Init+0x278>)
 8001098:	4293      	cmp	r3, r2
 800109a:	bf94      	ite	ls
 800109c:	2301      	movls	r3, #1
 800109e:	2300      	movhi	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	e006      	b.n	80010b2 <HAL_I2C_Init+0x92>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a7d      	ldr	r2, [pc, #500]	; (800129c <HAL_I2C_Init+0x27c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	bf94      	ite	ls
 80010ac:	2301      	movls	r3, #1
 80010ae:	2300      	movhi	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0e7      	b.n	800128a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a78      	ldr	r2, [pc, #480]	; (80012a0 <HAL_I2C_Init+0x280>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0c9b      	lsrs	r3, r3, #18
 80010c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <HAL_I2C_Init+0x274>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d802      	bhi.n	80010f4 <HAL_I2C_Init+0xd4>
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	e009      	b.n	8001108 <HAL_I2C_Init+0xe8>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	4a69      	ldr	r2, [pc, #420]	; (80012a4 <HAL_I2C_Init+0x284>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	3301      	adds	r3, #1
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	430b      	orrs	r3, r1
 800110e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800111a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	495c      	ldr	r1, [pc, #368]	; (8001294 <HAL_I2C_Init+0x274>)
 8001124:	428b      	cmp	r3, r1
 8001126:	d819      	bhi.n	800115c <HAL_I2C_Init+0x13c>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e59      	subs	r1, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fbb1 f3f3 	udiv	r3, r1, r3
 8001136:	1c59      	adds	r1, r3, #1
 8001138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800113c:	400b      	ands	r3, r1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <HAL_I2C_Init+0x138>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1e59      	subs	r1, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001150:	3301      	adds	r3, #1
 8001152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001156:	e051      	b.n	80011fc <HAL_I2C_Init+0x1dc>
 8001158:	2304      	movs	r3, #4
 800115a:	e04f      	b.n	80011fc <HAL_I2C_Init+0x1dc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <HAL_I2C_Init+0x168>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1e58      	subs	r0, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	fbb0 f3f3 	udiv	r3, r0, r3
 8001176:	3301      	adds	r3, #1
 8001178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e012      	b.n	80011ae <HAL_I2C_Init+0x18e>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	0099      	lsls	r1, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	fbb0 f3f3 	udiv	r3, r0, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_Init+0x196>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e022      	b.n	80011fc <HAL_I2C_Init+0x1dc>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10e      	bne.n	80011dc <HAL_I2C_Init+0x1bc>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1e58      	subs	r0, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	440b      	add	r3, r1
 80011cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011da:	e00f      	b.n	80011fc <HAL_I2C_Init+0x1dc>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	0099      	lsls	r1, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	3301      	adds	r3, #1
 80011f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	6809      	ldr	r1, [r1, #0]
 8001200:	4313      	orrs	r3, r2
 8001202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69da      	ldr	r2, [r3, #28]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800122a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6911      	ldr	r1, [r2, #16]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68d2      	ldr	r2, [r2, #12]
 8001236:	4311      	orrs	r1, r2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	430b      	orrs	r3, r1
 800123e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	000186a0 	.word	0x000186a0
 8001298:	001e847f 	.word	0x001e847f
 800129c:	003d08ff 	.word	0x003d08ff
 80012a0:	431bde83 	.word	0x431bde83
 80012a4:	10624dd3 	.word	0x10624dd3

080012a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	461a      	mov	r2, r3
 80012b4:	460b      	mov	r3, r1
 80012b6:	817b      	strh	r3, [r7, #10]
 80012b8:	4613      	mov	r3, r2
 80012ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff fc3e 	bl	8000b3c <HAL_GetTick>
 80012c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	f040 80e0 	bne.w	8001490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2319      	movs	r3, #25
 80012d6:	2201      	movs	r2, #1
 80012d8:	4970      	ldr	r1, [pc, #448]	; (800149c <HAL_I2C_Master_Transmit+0x1f4>)
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fa92 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	e0d3      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_I2C_Master_Transmit+0x50>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e0cc      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d007      	beq.n	800131e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2221      	movs	r2, #33	; 0x21
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2210      	movs	r2, #16
 800133a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	893a      	ldrh	r2, [r7, #8]
 800134e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6a3a      	ldr	r2, [r7, #32]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f9ca 	bl	8001700 <I2C_MasterRequestWrite>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e08d      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800138c:	e066      	b.n	800145c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	6a39      	ldr	r1, [r7, #32]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 fb50 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00d      	beq.n	80013ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06b      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d11b      	bne.n	8001430 <HAL_I2C_Master_Transmit+0x188>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d017      	beq.n	8001430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	6a39      	ldr	r1, [r7, #32]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fb47 	bl	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e01a      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d194      	bne.n	800138e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	00100002 	.word	0x00100002
 80014a0:	ffff0000 	.word	0xffff0000

080014a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	460b      	mov	r3, r1
 80014b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff fb42 	bl	8000b3c <HAL_GetTick>
 80014b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	f040 8111 	bne.w	80016ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2319      	movs	r3, #25
 80014d2:	2201      	movs	r2, #1
 80014d4:	4988      	ldr	r1, [pc, #544]	; (80016f8 <HAL_I2C_IsDeviceReady+0x254>)
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f994 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e104      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_I2C_IsDeviceReady+0x50>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0fd      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d007      	beq.n	800151a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2224      	movs	r2, #36	; 0x24
 800152e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a70      	ldr	r2, [pc, #448]	; (80016fc <HAL_I2C_IsDeviceReady+0x258>)
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2200      	movs	r2, #0
 8001556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f952 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00d      	beq.n	8001582 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001574:	d103      	bne.n	800157e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b6      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001582:	897b      	ldrh	r3, [r7, #10]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001590:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fad3 	bl	8000b3c <HAL_GetTick>
 8001596:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80015c6:	e025      	b.n	8001614 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015c8:	f7ff fab8 	bl	8000b3c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d302      	bcc.n	80015de <HAL_I2C_IsDeviceReady+0x13a>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	22a0      	movs	r2, #160	; 0xa0
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2ba0      	cmp	r3, #160	; 0xa0
 800161e:	d005      	beq.n	800162c <HAL_I2C_IsDeviceReady+0x188>
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_I2C_IsDeviceReady+0x188>
 8001626:	7dbb      	ldrb	r3, [r7, #22]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0cd      	beq.n	80015c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d129      	bne.n	8001696 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001650:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_I2C_IsDeviceReady+0x254>)
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f8c6 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e036      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e02c      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2319      	movs	r3, #25
 80016b6:	2201      	movs	r2, #1
 80016b8:	490f      	ldr	r1, [pc, #60]	; (80016f8 <HAL_I2C_IsDeviceReady+0x254>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f8a2 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e012      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f4ff af32 	bcc.w	800153e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	00100002 	.word	0x00100002
 80016fc:	ffff0000 	.word	0xffff0000

08001700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	460b      	mov	r3, r1
 800170e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d006      	beq.n	800172a <I2C_MasterRequestWrite+0x2a>
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d003      	beq.n	800172a <I2C_MasterRequestWrite+0x2a>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001728:	d108      	bne.n	800173c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00b      	b.n	8001754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	2b12      	cmp	r3, #18
 8001742:	d107      	bne.n	8001754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f84f 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177a:	d103      	bne.n	8001784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e035      	b.n	80017f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001790:	d108      	bne.n	80017a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	e01b      	b.n	80017dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017a4:	897b      	ldrh	r3, [r7, #10]
 80017a6:	11db      	asrs	r3, r3, #7
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0306 	and.w	r3, r3, #6
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f063 030f 	orn	r3, r3, #15
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <I2C_MasterRequestWrite+0xfc>)
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f898 	bl	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e010      	b.n	80017f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017d2:	897b      	ldrh	r3, [r7, #10]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <I2C_MasterRequestWrite+0x100>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f888 	bl	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	00010008 	.word	0x00010008
 8001800:	00010002 	.word	0x00010002

08001804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001814:	e048      	b.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d044      	beq.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181e:	f7ff f98d 	bl	8000b3c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d302      	bcc.n	8001834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d139      	bne.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10d      	bne.n	800185a <I2C_WaitOnFlagUntilTimeout+0x56>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	43da      	mvns	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	4013      	ands	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	e00c      	b.n	8001874 <I2C_WaitOnFlagUntilTimeout+0x70>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	43da      	mvns	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4013      	ands	r3, r2
 8001866:	b29b      	uxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	429a      	cmp	r2, r3
 8001878:	d116      	bne.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e023      	b.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10d      	bne.n	80018ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	43da      	mvns	r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4013      	ands	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	e00c      	b.n	80018e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4013      	ands	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d093      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001906:	e071      	b.n	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001916:	d123      	bne.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001930:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f043 0204 	orr.w	r2, r3, #4
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e067      	b.n	8001a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001966:	d041      	beq.n	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff f8e8 	bl	8000b3c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d302      	bcc.n	800197e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d136      	bne.n	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10c      	bne.n	80019a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4013      	ands	r3, r2
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	e00b      	b.n	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4013      	ands	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e021      	b.n	8001a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10c      	bne.n	8001a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	43da      	mvns	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	4013      	ands	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e00b      	b.n	8001a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f af6d 	bne.w	8001908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a44:	e034      	b.n	8001ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f886 	bl	8001b58 <I2C_IsAcknowledgeFailed>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e034      	b.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d028      	beq.n	8001ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5e:	f7ff f86d 	bl	8000b3c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11d      	bne.n	8001ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	2b80      	cmp	r3, #128	; 0x80
 8001a80:	d016      	beq.n	8001ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b80      	cmp	r3, #128	; 0x80
 8001abc:	d1c3      	bne.n	8001a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ad4:	e034      	b.n	8001b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f83e 	bl	8001b58 <I2C_IsAcknowledgeFailed>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e034      	b.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d028      	beq.n	8001b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7ff f825 	bl	8000b3c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11d      	bne.n	8001b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d016      	beq.n	8001b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e007      	b.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d1c3      	bne.n	8001ad6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d11b      	bne.n	8001ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e272      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e24c      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe ff54 	bl	8000b3c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7fe ff50 	bl	8000b3c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff40 	bl	8000b3c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7fe ff3c 	bl	8000b3c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ec      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fef5 	bl	8000b3c <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7fe fef1 	bl	8000b3c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fed4 	bl	8000b3c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7fe fed0 	bl	8000b3c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e180      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7fe feb4 	bl	8000b3c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7fe feb0 	bl	8000b3c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e160      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 faba 	bl	8002370 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fe9a 	bl	8000b3c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fe96 	bl	8000b3c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e146      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fe57 	bl	8000b3c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7fe fe53 	bl	8000b3c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e103      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fe07 	bl	8000b3c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fe03 	bl	8000b3c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0b1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fdf1 	bl	8000b3c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe fded 	bl	8000b3c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fdc1 	bl	8000b3c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fdbd 	bl	8000b3c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4921      	ldr	r1, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe fd91 	bl	8000b3c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe fd8d 	bl	8000b3c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e035      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe fd7a 	bl	8000b3c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fd76 	bl	8000b3c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e019      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x500>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fcc8 	bl	8000b3c <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7fe fcc4 	bl	8000b3c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fc26 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	080065e0 	.word	0x080065e0
 8002284:	20000008 	.word	0x20000008
 8002288:	2000000c 	.word	0x2000000c

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x30>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ba:	e027      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	e027      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c5b      	lsrs	r3, r3, #17
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	693b      	ldr	r3, [r7, #16]
}
 8002314:	4618      	mov	r0, r3
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	080065f8 	.word	0x080065f8
 800232c:	08006608 	.word	0x08006608
 8002330:	003d0900 	.word	0x003d0900

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_RCC_GetHCLKFreq+0x10>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000008 	.word	0x20000008

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff2 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	080065f0 	.word	0x080065f0

08002370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <RCC_Delay+0x34>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <RCC_Delay+0x38>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800238c:	bf00      	nop
  }
  while (Delay --);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	60fa      	str	r2, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <RCC_Delay+0x1c>
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000008 	.word	0x20000008
 80023a8:	10624dd3 	.word	0x10624dd3

080023ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b2:	f3ef 8305 	mrs	r3, IPSR
 80023b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80023b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	607b      	str	r3, [r7, #4]
  return(result);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <osKernelInitialize+0x32>
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <osKernelInitialize+0x60>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d109      	bne.n	80023e6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023d2:	f3ef 8311 	mrs	r3, BASEPRI
 80023d6:	603b      	str	r3, [r7, #0]
  return(result);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023de:	f06f 0305 	mvn.w	r3, #5
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e00c      	b.n	8002400 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <osKernelInitialize+0x60>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <osKernelInitialize+0x60>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e002      	b.n	8002400 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002400:	68fb      	ldr	r3, [r7, #12]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000518 	.word	0x20000518

08002410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002416:	f3ef 8305 	mrs	r3, IPSR
 800241a:	60bb      	str	r3, [r7, #8]
  return(result);
 800241c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002422:	f3ef 8310 	mrs	r3, PRIMASK
 8002426:	607b      	str	r3, [r7, #4]
  return(result);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <osKernelStart+0x32>
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <osKernelStart+0x64>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d109      	bne.n	800244a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002436:	f3ef 8311 	mrs	r3, BASEPRI
 800243a:	603b      	str	r3, [r7, #0]
  return(result);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002442:	f06f 0305 	mvn.w	r3, #5
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e00e      	b.n	8002468 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <osKernelStart+0x64>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <osKernelStart+0x64>)
 8002454:	2202      	movs	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002458:	f001 f890 	bl	800357c <vTaskStartScheduler>
      stat = osOK;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e002      	b.n	8002468 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002468:	68fb      	ldr	r3, [r7, #12]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000518 	.word	0x20000518

08002478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b092      	sub	sp, #72	; 0x48
 800247c:	af04      	add	r7, sp, #16
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002488:	f3ef 8305 	mrs	r3, IPSR
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8094 	bne.w	80025be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002496:	f3ef 8310 	mrs	r3, PRIMASK
 800249a:	623b      	str	r3, [r7, #32]
  return(result);
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 808d 	bne.w	80025be <osThreadNew+0x146>
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <osThreadNew+0x150>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d106      	bne.n	80024ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ac:	f3ef 8311 	mrs	r3, BASEPRI
 80024b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8082 	bne.w	80025be <osThreadNew+0x146>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d07e      	beq.n	80025be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80024c4:	2318      	movs	r3, #24
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80024c8:	2300      	movs	r3, #0
 80024ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80024cc:	f107 031b 	add.w	r3, r7, #27
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d045      	beq.n	800256a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <osThreadNew+0x74>
        name = attr->name;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <osThreadNew+0x9a>
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b38      	cmp	r3, #56	; 0x38
 8002504:	d805      	bhi.n	8002512 <osThreadNew+0x9a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <osThreadNew+0x9e>
        return (NULL);
 8002512:	2300      	movs	r3, #0
 8002514:	e054      	b.n	80025c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00e      	beq.n	800254c <osThreadNew+0xd4>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2bbb      	cmp	r3, #187	; 0xbb
 8002534:	d90a      	bls.n	800254c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <osThreadNew+0xd4>
        mem = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	e010      	b.n	800256e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <osThreadNew+0xf6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <osThreadNew+0xf6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <osThreadNew+0xf6>
          mem = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
 8002568:	e001      	b.n	800256e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	2b01      	cmp	r3, #1
 8002572:	d110      	bne.n	8002596 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800257c:	9202      	str	r2, [sp, #8]
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fe12 	bl	80031b4 <xTaskCreateStatic>
 8002590:	4603      	mov	r3, r0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e013      	b.n	80025be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d110      	bne.n	80025be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fe5c 	bl	800326c <xTaskCreate>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <osThreadNew+0x146>
          hTask = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025be:	697b      	ldr	r3, [r7, #20]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	; 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000518 	.word	0x20000518

080025cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d4:	f3ef 8305 	mrs	r3, IPSR
 80025d8:	613b      	str	r3, [r7, #16]
  return(result);
 80025da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e0:	f3ef 8310 	mrs	r3, PRIMASK
 80025e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <osDelay+0x34>
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <osDelay+0x58>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d109      	bne.n	8002608 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025f4:	f3ef 8311 	mrs	r3, BASEPRI
 80025f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <osDelay+0x3c>
    stat = osErrorISR;
 8002600:	f06f 0305 	mvn.w	r3, #5
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e007      	b.n	8002618 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 ff7e 	bl	8003514 <vTaskDelay>
    }
  }

  return (stat);
 8002618:	697b      	ldr	r3, [r7, #20]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000518 	.word	0x20000518

08002628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a06      	ldr	r2, [pc, #24]	; (8002650 <vApplicationGetIdleTaskMemory+0x28>)
 8002638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <vApplicationGetIdleTaskMemory+0x2c>)
 800263e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000051c 	.word	0x2000051c
 8002654:	200005d8 	.word	0x200005d8

08002658 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <vApplicationGetTimerTaskMemory+0x2c>)
 8002668:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <vApplicationGetTimerTaskMemory+0x30>)
 800266e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200007d8 	.word	0x200007d8
 8002688:	20000894 	.word	0x20000894

0800268c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0208 	add.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f103 0208 	add.w	r2, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d103      	bne.n	8002748 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e00c      	b.n	8002762 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3308      	adds	r3, #8
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e002      	b.n	8002756 <vListInsert+0x2e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d2f6      	bcs.n	8002750 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6852      	ldr	r2, [r2, #4]
 80027b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d103      	bne.n	80027cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1e5a      	subs	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002816:	f001 fff9 	bl	800480c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	441a      	add	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	3b01      	subs	r3, #1
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	22ff      	movs	r2, #255	; 0xff
 800285a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d114      	bne.n	8002896 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01a      	beq.n	80028aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3310      	adds	r3, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f91b 	bl	8003ab4 <xTaskRemoveFromEventList>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <xQueueGenericReset+0xcc>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	e009      	b.n	80028aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3310      	adds	r3, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fef6 	bl	800268c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fef1 	bl	800268c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028aa:	f001 ffdf 	bl	800486c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <xQueueGenericCreateStatic+0x52>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <xQueueGenericCreateStatic+0x56>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <xQueueGenericCreateStatic+0x58>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	623b      	str	r3, [r7, #32]
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <xQueueGenericCreateStatic+0x7e>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <xQueueGenericCreateStatic+0x82>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericCreateStatic+0x84>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	61fb      	str	r3, [r7, #28]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800295a:	2350      	movs	r3, #80	; 0x50
 800295c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b50      	cmp	r3, #80	; 0x50
 8002962:	d00a      	beq.n	800297a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	61bb      	str	r3, [r7, #24]
}
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800298c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f805 	bl	80029aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3730      	adds	r7, #48	; 0x30
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e002      	b.n	80029cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029d8:	2101      	movs	r1, #1
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f7ff ff06 	bl	80027ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueGenericSend+0x32>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <xQueueGenericSend+0x40>
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <xQueueGenericSend+0x44>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <xQueueGenericSend+0x46>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <xQueueGenericSend+0x60>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d103      	bne.n	8002a5e <xQueueGenericSend+0x6e>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <xQueueGenericSend+0x72>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueGenericSend+0x74>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericSend+0x8e>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	623b      	str	r3, [r7, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7e:	f001 f9df 	bl	8003e40 <xTaskGetSchedulerState>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <xQueueGenericSend+0x9e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <xQueueGenericSend+0xa2>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueGenericSend+0xa4>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericSend+0xbe>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	61fb      	str	r3, [r7, #28]
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aae:	f001 fead 	bl	800480c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <xQueueGenericSend+0xd4>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d129      	bne.n	8002b18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aca:	f000 fa07 	bl	8002edc <prvCopyDataToQueue>
 8002ace:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3324      	adds	r3, #36	; 0x24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 ffe9 	bl	8003ab4 <xTaskRemoveFromEventList>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <xQueueGenericSend+0x1f8>)
 8002aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	e00a      	b.n	8002b10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <xQueueGenericSend+0x1f8>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b10:	f001 feac 	bl	800486c <vPortExitCritical>
				return pdPASS;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e063      	b.n	8002be0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b1e:	f001 fea5 	bl	800486c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e05c      	b.n	8002be0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 f823 	bl	8003b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b3a:	f001 fe97 	bl	800486c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b3e:	f000 fd8d 	bl	800365c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b42:	f001 fe63 	bl	800480c <vPortEnterCritical>
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d103      	bne.n	8002b5c <xQueueGenericSend+0x16c>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSend+0x182>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b72:	f001 fe7b 	bl	800486c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b76:	1d3a      	adds	r2, r7, #4
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f812 	bl	8003ba8 <xTaskCheckForTimeOut>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d124      	bne.n	8002bd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8c:	f000 fa9e 	bl	80030cc <prvIsQueueFull>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	3310      	adds	r3, #16
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff38 	bl	8003a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba6:	f000 fa29 	bl	8002ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002baa:	f000 fd65 	bl	8003678 <xTaskResumeAll>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af7c 	bne.w	8002aae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <xQueueGenericSend+0x1f8>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	e772      	b.n	8002aae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bca:	f000 fa17 	bl	8002ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bce:	f000 fd53 	bl	8003678 <xTaskResumeAll>
 8002bd2:	e76c      	b.n	8002aae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fa11 	bl	8002ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bda:	f000 fd4d 	bl	8003678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bde:	2300      	movs	r3, #0
		}
	}
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3738      	adds	r7, #56	; 0x38
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <xQueueGenericSendFromISR+0x3c>
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <xQueueGenericSendFromISR+0x40>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <xQueueGenericSendFromISR+0x42>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	623b      	str	r3, [r7, #32]
}
 8002c44:	bf00      	nop
 8002c46:	e7fe      	b.n	8002c46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSendFromISR+0x6a>
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <xQueueGenericSendFromISR+0x6e>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueGenericSendFromISR+0x70>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61fb      	str	r3, [r7, #28]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c76:	f001 fe8b 	bl	8004990 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	61ba      	str	r2, [r7, #24]
 8002c90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <xQueueGenericSendFromISR+0xbc>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d12c      	bne.n	8002d02 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb8:	f000 f910 	bl	8002edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d112      	bne.n	8002cec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	3324      	adds	r3, #36	; 0x24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 feee 	bl	8003ab4 <xTaskRemoveFromEventList>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e007      	b.n	8002cfc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d00:	e001      	b.n	8002d06 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3738      	adds	r7, #56	; 0x38
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <xQueueReceive+0x30>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	623b      	str	r3, [r7, #32]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <xQueueReceive+0x3e>
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <xQueueReceive+0x42>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueReceive+0x44>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueReceive+0x5e>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61fb      	str	r3, [r7, #28]
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7a:	f001 f861 	bl	8003e40 <xTaskGetSchedulerState>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <xQueueReceive+0x6e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueReceive+0x72>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueReceive+0x74>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueReceive+0x8e>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61bb      	str	r3, [r7, #24]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002daa:	f001 fd2f 	bl	800480c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01f      	beq.n	8002dfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dbe:	f000 f8f7 	bl	8002fb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	1e5a      	subs	r2, r3, #1
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00f      	beq.n	8002df2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fe6c 	bl	8003ab4 <xTaskRemoveFromEventList>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <xQueueReceive+0x1bc>)
 8002de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002df2:	f001 fd3b 	bl	800486c <vPortExitCritical>
				return pdPASS;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e069      	b.n	8002ece <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e00:	f001 fd34 	bl	800486c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e062      	b.n	8002ece <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e0e:	f107 0310 	add.w	r3, r7, #16
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 feb2 	bl	8003b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1c:	f001 fd26 	bl	800486c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e20:	f000 fc1c 	bl	800365c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e24:	f001 fcf2 	bl	800480c <vPortEnterCritical>
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d103      	bne.n	8002e3e <xQueueReceive+0x122>
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d103      	bne.n	8002e54 <xQueueReceive+0x138>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e54:	f001 fd0a 	bl	800486c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e58:	1d3a      	adds	r2, r7, #4
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fea1 	bl	8003ba8 <xTaskCheckForTimeOut>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d123      	bne.n	8002eb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e6e:	f000 f917 	bl	80030a0 <prvIsQueueEmpty>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fdc7 	bl	8003a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e88:	f000 f8b8 	bl	8002ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e8c:	f000 fbf4 	bl	8003678 <xTaskResumeAll>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d189      	bne.n	8002daa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <xQueueReceive+0x1bc>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	e780      	b.n	8002daa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eaa:	f000 f8a7 	bl	8002ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eae:	f000 fbe3 	bl	8003678 <xTaskResumeAll>
 8002eb2:	e77a      	b.n	8002daa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb6:	f000 f8a1 	bl	8002ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eba:	f000 fbdd 	bl	8003678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec0:	f000 f8ee 	bl	80030a0 <prvIsQueueEmpty>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f43f af6f 	beq.w	8002daa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3730      	adds	r7, #48	; 0x30
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d14d      	bne.n	8002f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ffb8 	bl	8003e7c <xTaskPriorityDisinherit>
 8002f0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	e043      	b.n	8002f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d119      	bne.n	8002f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6898      	ldr	r0, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	461a      	mov	r2, r3
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	f001 ff74 	bl	8004e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	441a      	add	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d32b      	bcc.n	8002f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	e026      	b.n	8002f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68d8      	ldr	r0, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	f001 ff5a 	bl	8004e14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	425b      	negs	r3, r3
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	425b      	negs	r3, r3
 8002f86:	441a      	add	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d105      	bne.n	8002f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fa6:	697b      	ldr	r3, [r7, #20]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d303      	bcc.n	8002fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	461a      	mov	r2, r3
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f001 ff10 	bl	8004e14 <memcpy>
	}
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003004:	f001 fc02 	bl	800480c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003010:	e011      	b.n	8003036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3324      	adds	r3, #36	; 0x24
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fd48 	bl	8003ab4 <xTaskRemoveFromEventList>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800302a:	f000 fe1f 	bl	8003c6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3b01      	subs	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	dce9      	bgt.n	8003012 <prvUnlockQueue+0x16>
 800303e:	e000      	b.n	8003042 <prvUnlockQueue+0x46>
					break;
 8003040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800304a:	f001 fc0f 	bl	800486c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800304e:	f001 fbdd 	bl	800480c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800305a:	e011      	b.n	8003080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3310      	adds	r3, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fd23 	bl	8003ab4 <xTaskRemoveFromEventList>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003074:	f000 fdfa 	bl	8003c6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003078:	7bbb      	ldrb	r3, [r7, #14]
 800307a:	3b01      	subs	r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dce9      	bgt.n	800305c <prvUnlockQueue+0x60>
 8003088:	e000      	b.n	800308c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800308a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003094:	f001 fbea 	bl	800486c <vPortExitCritical>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030a8:	f001 fbb0 	bl	800480c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e001      	b.n	80030be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030be:	f001 fbd5 	bl	800486c <vPortExitCritical>

	return xReturn;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d4:	f001 fb9a 	bl	800480c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d102      	bne.n	80030ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e001      	b.n	80030ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ee:	f001 fbbd 	bl	800486c <vPortExitCritical>

	return xReturn;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e014      	b.n	8003136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <vQueueAddToRegistry+0x4c>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003118:	490b      	ldr	r1, [pc, #44]	; (8003148 <vQueueAddToRegistry+0x4c>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <vQueueAddToRegistry+0x4c>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800312e:	e006      	b.n	800313e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b07      	cmp	r3, #7
 800313a:	d9e7      	bls.n	800310c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	20000c94 	.word	0x20000c94

0800314c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800315c:	f001 fb56 	bl	800480c <vPortEnterCritical>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003166:	b25b      	sxtb	r3, r3
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d103      	bne.n	8003176 <vQueueWaitForMessageRestricted+0x2a>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317c:	b25b      	sxtb	r3, r3
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d103      	bne.n	800318c <vQueueWaitForMessageRestricted+0x40>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800318c:	f001 fb6e 	bl	800486c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc5b 	bl	8003a5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff28 	bl	8002ffc <prvUnlockQueue>
	}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xTaskCreateStatic+0x2a>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	623b      	str	r3, [r7, #32]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xTaskCreateStatic+0x46>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61fb      	str	r3, [r7, #28]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031fa:	23bc      	movs	r3, #188	; 0xbc
 80031fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2bbc      	cmp	r3, #188	; 0xbc
 8003202:	d00a      	beq.n	800321a <xTaskCreateStatic+0x66>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61bb      	str	r3, [r7, #24]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01e      	beq.n	800325e <xTaskCreateStatic+0xaa>
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01b      	beq.n	800325e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2202      	movs	r2, #2
 8003234:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003238:	2300      	movs	r3, #0
 800323a:	9303      	str	r3, [sp, #12]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f851 	bl	80032f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003258:	f000 f8ec 	bl	8003434 <prvAddNewTaskToReadyList>
 800325c:	e001      	b.n	8003262 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003262:	697b      	ldr	r3, [r7, #20]
	}
 8003264:	4618      	mov	r0, r3
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af04      	add	r7, sp, #16
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fbc3 	bl	8004a0c <pvPortMalloc>
 8003286:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800328e:	20bc      	movs	r0, #188	; 0xbc
 8003290:	f001 fbbc 	bl	8004a0c <pvPortMalloc>
 8003294:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	e005      	b.n	80032b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f001 fc75 	bl	8004b94 <vPortFree>
 80032aa:	e001      	b.n	80032b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	9302      	str	r3, [sp, #8]
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f80f 	bl	80032f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032da:	69f8      	ldr	r0, [r7, #28]
 80032dc:	f000 f8aa 	bl	8003434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032e0:	2301      	movs	r3, #1
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e002      	b.n	80032ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032ec:	69bb      	ldr	r3, [r7, #24]
	}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	21a5      	movs	r1, #165	; 0xa5
 8003312:	f001 fd8d 	bl	8004e30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003320:	3b01      	subs	r3, #1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <prvInitialiseNewTask+0x58>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	617b      	str	r3, [r7, #20]
}
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e012      	b.n	800337c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	7819      	ldrb	r1, [r3, #0]
 800335e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	3334      	adds	r3, #52	; 0x34
 8003366:	460a      	mov	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d9e9      	bls.n	8003356 <prvInitialiseNewTask+0x5e>
 8003382:	e000      	b.n	8003386 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003384:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	2b37      	cmp	r3, #55	; 0x37
 8003392:	d901      	bls.n	8003398 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003394:	2337      	movs	r3, #55	; 0x37
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	2200      	movs	r2, #0
 80033a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f98b 	bl	80026ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	3318      	adds	r3, #24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff f986 	bl	80026ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	3354      	adds	r3, #84	; 0x54
 80033e8:	2260      	movs	r2, #96	; 0x60
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fd1f 	bl	8004e30 <memset>
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	4a0c      	ldr	r2, [pc, #48]	; (8003428 <prvInitialiseNewTask+0x130>)
 80033f6:	659a      	str	r2, [r3, #88]	; 0x58
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <prvInitialiseNewTask+0x134>)
 80033fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <prvInitialiseNewTask+0x138>)
 8003402:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	69b8      	ldr	r0, [r7, #24]
 800340a:	f001 f90b 	bl	8004624 <pxPortInitialiseStack>
 800340e:	4602      	mov	r2, r0
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003420:	bf00      	nop
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	0800662c 	.word	0x0800662c
 800342c:	0800664c 	.word	0x0800664c
 8003430:	0800660c 	.word	0x0800660c

08003434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800343c:	f001 f9e6 	bl	800480c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <prvAddNewTaskToReadyList+0xc4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <prvAddNewTaskToReadyList+0xc4>)
 8003448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <prvAddNewTaskToReadyList+0xc8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003452:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <prvAddNewTaskToReadyList+0xc8>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <prvAddNewTaskToReadyList+0xc4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d110      	bne.n	8003482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003460:	f000 fc28 	bl	8003cb4 <prvInitialiseTaskLists>
 8003464:	e00d      	b.n	8003482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <prvAddNewTaskToReadyList+0xcc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <prvAddNewTaskToReadyList+0xc8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	429a      	cmp	r2, r3
 800347a:	d802      	bhi.n	8003482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800347c:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <prvAddNewTaskToReadyList+0xc8>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <prvAddNewTaskToReadyList+0xd0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <prvAddNewTaskToReadyList+0xd0>)
 800348a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <prvAddNewTaskToReadyList+0xd0>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <prvAddNewTaskToReadyList+0xd4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d903      	bls.n	80034a8 <prvAddNewTaskToReadyList+0x74>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <prvAddNewTaskToReadyList+0xd4>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <prvAddNewTaskToReadyList+0xd8>)
 80034b6:	441a      	add	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f7ff f90f 	bl	80026e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034c4:	f001 f9d2 	bl	800486c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <prvAddNewTaskToReadyList+0xcc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <prvAddNewTaskToReadyList+0xc8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d207      	bcs.n	80034ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <prvAddNewTaskToReadyList+0xdc>)
 80034e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200011a8 	.word	0x200011a8
 80034fc:	20000cd4 	.word	0x20000cd4
 8003500:	200011b4 	.word	0x200011b4
 8003504:	200011c4 	.word	0x200011c4
 8003508:	200011b0 	.word	0x200011b0
 800350c:	20000cd8 	.word	0x20000cd8
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <vTaskDelay+0x60>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <vTaskDelay+0x30>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60bb      	str	r3, [r7, #8]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003544:	f000 f88a 	bl	800365c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003548:	2100      	movs	r1, #0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fd04 	bl	8003f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003550:	f000 f892 	bl	8003678 <xTaskResumeAll>
 8003554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <vTaskDelay+0x64>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200011d0 	.word	0x200011d0
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800358a:	463a      	mov	r2, r7
 800358c:	1d39      	adds	r1, r7, #4
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f848 	bl	8002628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	9202      	str	r2, [sp, #8]
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	460a      	mov	r2, r1
 80035aa:	4924      	ldr	r1, [pc, #144]	; (800363c <vTaskStartScheduler+0xc0>)
 80035ac:	4824      	ldr	r0, [pc, #144]	; (8003640 <vTaskStartScheduler+0xc4>)
 80035ae:	f7ff fe01 	bl	80031b4 <xTaskCreateStatic>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a23      	ldr	r2, [pc, #140]	; (8003644 <vTaskStartScheduler+0xc8>)
 80035b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <vTaskStartScheduler+0xc8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035c0:	2301      	movs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e001      	b.n	80035ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d102      	bne.n	80035d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035d0:	f000 fd16 	bl	8004000 <xTimerCreateTimerTask>
 80035d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d11b      	bne.n	8003614 <vTaskStartScheduler+0x98>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	613b      	str	r3, [r7, #16]
}
 80035ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <vTaskStartScheduler+0xcc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3354      	adds	r3, #84	; 0x54
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <vTaskStartScheduler+0xd0>)
 80035f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <vTaskStartScheduler+0xd4>)
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <vTaskStartScheduler+0xd8>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <vTaskStartScheduler+0xdc>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800360e:	f001 f88b 	bl	8004728 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003612:	e00e      	b.n	8003632 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d10a      	bne.n	8003632 <vTaskStartScheduler+0xb6>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	60fb      	str	r3, [r7, #12]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <vTaskStartScheduler+0xb4>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08005824 	.word	0x08005824
 8003640:	08003c85 	.word	0x08003c85
 8003644:	200011cc 	.word	0x200011cc
 8003648:	20000cd4 	.word	0x20000cd4
 800364c:	20000018 	.word	0x20000018
 8003650:	200011c8 	.word	0x200011c8
 8003654:	200011b4 	.word	0x200011b4
 8003658:	200011ac 	.word	0x200011ac

0800365c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <vTaskSuspendAll+0x18>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a03      	ldr	r2, [pc, #12]	; (8003674 <vTaskSuspendAll+0x18>)
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200011d0 	.word	0x200011d0

08003678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003686:	4b42      	ldr	r3, [pc, #264]	; (8003790 <xTaskResumeAll+0x118>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	603b      	str	r3, [r7, #0]
}
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036a4:	f001 f8b2 	bl	800480c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <xTaskResumeAll+0x118>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <xTaskResumeAll+0x118>)
 80036b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <xTaskResumeAll+0x118>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d162      	bne.n	8003780 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <xTaskResumeAll+0x11c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d05e      	beq.n	8003780 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c2:	e02f      	b.n	8003724 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <xTaskResumeAll+0x120>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3318      	adds	r3, #24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f861 	bl	8002798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f85c 	bl	8002798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <xTaskResumeAll+0x124>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d903      	bls.n	80036f4 <xTaskResumeAll+0x7c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a2a      	ldr	r2, [pc, #168]	; (800379c <xTaskResumeAll+0x124>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <xTaskResumeAll+0x128>)
 8003702:	441a      	add	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7fe ffe9 	bl	80026e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <xTaskResumeAll+0x12c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <xTaskResumeAll+0x130>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <xTaskResumeAll+0x120>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1cb      	bne.n	80036c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003732:	f000 fb61 	bl	8003df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <xTaskResumeAll+0x134>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003742:	f000 f845 	bl	80037d0 <xTaskIncrementTick>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <xTaskResumeAll+0x130>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3b01      	subs	r3, #1
 8003756:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f1      	bne.n	8003742 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <xTaskResumeAll+0x134>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <xTaskResumeAll+0x130>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800376c:	2301      	movs	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <xTaskResumeAll+0x138>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003780:	f001 f874 	bl	800486c <vPortExitCritical>

	return xAlreadyYielded;
 8003784:	68bb      	ldr	r3, [r7, #8]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200011d0 	.word	0x200011d0
 8003794:	200011a8 	.word	0x200011a8
 8003798:	20001168 	.word	0x20001168
 800379c:	200011b0 	.word	0x200011b0
 80037a0:	20000cd8 	.word	0x20000cd8
 80037a4:	20000cd4 	.word	0x20000cd4
 80037a8:	200011bc 	.word	0x200011bc
 80037ac:	200011b8 	.word	0x200011b8
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <xTaskGetTickCount+0x18>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037c0:	687b      	ldr	r3, [r7, #4]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	200011ac 	.word	0x200011ac

080037d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <xTaskIncrementTick+0x150>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 808e 	bne.w	8003900 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037e4:	4b4f      	ldr	r3, [pc, #316]	; (8003924 <xTaskIncrementTick+0x154>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037ec:	4a4d      	ldr	r2, [pc, #308]	; (8003924 <xTaskIncrementTick+0x154>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d120      	bne.n	800383a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <xTaskIncrementTick+0x158>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <xTaskIncrementTick+0x48>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	603b      	str	r3, [r7, #0]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <xTaskIncrementTick+0x46>
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <xTaskIncrementTick+0x158>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <xTaskIncrementTick+0x15c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a41      	ldr	r2, [pc, #260]	; (8003928 <xTaskIncrementTick+0x158>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4a41      	ldr	r2, [pc, #260]	; (800392c <xTaskIncrementTick+0x15c>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b40      	ldr	r3, [pc, #256]	; (8003930 <xTaskIncrementTick+0x160>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a3f      	ldr	r2, [pc, #252]	; (8003930 <xTaskIncrementTick+0x160>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	f000 fadf 	bl	8003df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <xTaskIncrementTick+0x164>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d34e      	bcc.n	80038e2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003844:	4b38      	ldr	r3, [pc, #224]	; (8003928 <xTaskIncrementTick+0x158>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <xTaskIncrementTick+0x82>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xTaskIncrementTick+0x84>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <xTaskIncrementTick+0x164>)
 800385a:	f04f 32ff 	mov.w	r2, #4294967295
 800385e:	601a      	str	r2, [r3, #0]
					break;
 8003860:	e03f      	b.n	80038e2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <xTaskIncrementTick+0x158>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d203      	bcs.n	8003882 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800387a:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <xTaskIncrementTick+0x164>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]
						break;
 8003880:	e02f      	b.n	80038e2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ff86 	bl	8002798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3318      	adds	r3, #24
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe ff7d 	bl	8002798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	4b25      	ldr	r3, [pc, #148]	; (8003938 <xTaskIncrementTick+0x168>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d903      	bls.n	80038b2 <xTaskIncrementTick+0xe2>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <xTaskIncrementTick+0x168>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <xTaskIncrementTick+0x16c>)
 80038c0:	441a      	add	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe ff0a 	bl	80026e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <xTaskIncrementTick+0x170>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d3b3      	bcc.n	8003844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e0:	e7b0      	b.n	8003844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <xTaskIncrementTick+0x170>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4914      	ldr	r1, [pc, #80]	; (800393c <xTaskIncrementTick+0x16c>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d907      	bls.n	800390a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e004      	b.n	800390a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <xTaskIncrementTick+0x174>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <xTaskIncrementTick+0x174>)
 8003908:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <xTaskIncrementTick+0x178>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003916:	697b      	ldr	r3, [r7, #20]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200011d0 	.word	0x200011d0
 8003924:	200011ac 	.word	0x200011ac
 8003928:	20001160 	.word	0x20001160
 800392c:	20001164 	.word	0x20001164
 8003930:	200011c0 	.word	0x200011c0
 8003934:	200011c8 	.word	0x200011c8
 8003938:	200011b0 	.word	0x200011b0
 800393c:	20000cd8 	.word	0x20000cd8
 8003940:	20000cd4 	.word	0x20000cd4
 8003944:	200011b8 	.word	0x200011b8
 8003948:	200011bc 	.word	0x200011bc

0800394c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <vTaskSwitchContext+0xb0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800395a:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <vTaskSwitchContext+0xb4>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003960:	e046      	b.n	80039f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003962:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <vTaskSwitchContext+0xb4>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <vTaskSwitchContext+0xb8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e010      	b.n	8003992 <vTaskSwitchContext+0x46>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <vTaskSwitchContext+0x40>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	607b      	str	r3, [r7, #4]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <vTaskSwitchContext+0x3e>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	491d      	ldr	r1, [pc, #116]	; (8003a08 <vTaskSwitchContext+0xbc>)
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0e4      	beq.n	8003970 <vTaskSwitchContext+0x24>
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <vTaskSwitchContext+0xbc>)
 80039b2:	4413      	add	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3308      	adds	r3, #8
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d104      	bne.n	80039d6 <vTaskSwitchContext+0x8a>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <vTaskSwitchContext+0xc0>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <vTaskSwitchContext+0xb8>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <vTaskSwitchContext+0xc0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3354      	adds	r3, #84	; 0x54
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <vTaskSwitchContext+0xc4>)
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200011d0 	.word	0x200011d0
 8003a00:	200011bc 	.word	0x200011bc
 8003a04:	200011b0 	.word	0x200011b0
 8003a08:	20000cd8 	.word	0x20000cd8
 8003a0c:	20000cd4 	.word	0x20000cd4
 8003a10:	20000018 	.word	0x20000018

08003a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60fb      	str	r3, [r7, #12]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <vTaskPlaceOnEventList+0x44>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fe fe70 	bl	8002728 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a48:	2101      	movs	r1, #1
 8003a4a:	6838      	ldr	r0, [r7, #0]
 8003a4c:	f000 fa84 	bl	8003f58 <prvAddCurrentTaskToDelayedList>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000cd4 	.word	0x20000cd4

08003a5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	617b      	str	r3, [r7, #20]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7fe fe28 	bl	80026e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68b8      	ldr	r0, [r7, #8]
 8003aa2:	f000 fa59 	bl	8003f58 <prvAddCurrentTaskToDelayedList>
	}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000cd4 	.word	0x20000cd4

08003ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60fb      	str	r3, [r7, #12]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	3318      	adds	r3, #24
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fe57 	bl	8002798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <xTaskRemoveFromEventList+0xb0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fe4e 	bl	8002798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <xTaskRemoveFromEventList+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d903      	bls.n	8003b10 <xTaskRemoveFromEventList+0x5c>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <xTaskRemoveFromEventList+0xb4>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <xTaskRemoveFromEventList+0xb8>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fddb 	bl	80026e2 <vListInsertEnd>
 8003b2c:	e005      	b.n	8003b3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3318      	adds	r3, #24
 8003b32:	4619      	mov	r1, r3
 8003b34:	480e      	ldr	r0, [pc, #56]	; (8003b70 <xTaskRemoveFromEventList+0xbc>)
 8003b36:	f7fe fdd4 	bl	80026e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <xTaskRemoveFromEventList+0xc0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d905      	bls.n	8003b54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <xTaskRemoveFromEventList+0xc4>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e001      	b.n	8003b58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b58:	697b      	ldr	r3, [r7, #20]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200011d0 	.word	0x200011d0
 8003b68:	200011b0 	.word	0x200011b0
 8003b6c:	20000cd8 	.word	0x20000cd8
 8003b70:	20001168 	.word	0x20001168
 8003b74:	20000cd4 	.word	0x20000cd4
 8003b78:	200011bc 	.word	0x200011bc

08003b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <vTaskInternalSetTimeOutState+0x24>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <vTaskInternalSetTimeOutState+0x28>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200011c0 	.word	0x200011c0
 8003ba4:	200011ac 	.word	0x200011ac

08003ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	613b      	str	r3, [r7, #16]
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60fb      	str	r3, [r7, #12]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bea:	f000 fe0f 	bl	800480c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <xTaskCheckForTimeOut+0xbc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d102      	bne.n	8003c0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e023      	b.n	8003c56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <xTaskCheckForTimeOut+0xc0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d007      	beq.n	8003c2a <xTaskCheckForTimeOut+0x82>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e015      	b.n	8003c56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d20b      	bcs.n	8003c4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad2      	subs	r2, r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff9b 	bl	8003b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e004      	b.n	8003c56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c56:	f000 fe09 	bl	800486c <vPortExitCritical>

	return xReturn;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200011ac 	.word	0x200011ac
 8003c68:	200011c0 	.word	0x200011c0

08003c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <vTaskMissedYield+0x14>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	200011bc 	.word	0x200011bc

08003c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c8c:	f000 f852 	bl	8003d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <prvIdleTask+0x28>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d9f9      	bls.n	8003c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <prvIdleTask+0x2c>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ca8:	e7f0      	b.n	8003c8c <prvIdleTask+0x8>
 8003caa:	bf00      	nop
 8003cac:	20000cd8 	.word	0x20000cd8
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	e00c      	b.n	8003cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <prvInitialiseTaskLists+0x60>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fcdc 	bl	800268c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b37      	cmp	r3, #55	; 0x37
 8003cde:	d9ef      	bls.n	8003cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ce0:	480d      	ldr	r0, [pc, #52]	; (8003d18 <prvInitialiseTaskLists+0x64>)
 8003ce2:	f7fe fcd3 	bl	800268c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ce6:	480d      	ldr	r0, [pc, #52]	; (8003d1c <prvInitialiseTaskLists+0x68>)
 8003ce8:	f7fe fcd0 	bl	800268c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cec:	480c      	ldr	r0, [pc, #48]	; (8003d20 <prvInitialiseTaskLists+0x6c>)
 8003cee:	f7fe fccd 	bl	800268c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cf2:	480c      	ldr	r0, [pc, #48]	; (8003d24 <prvInitialiseTaskLists+0x70>)
 8003cf4:	f7fe fcca 	bl	800268c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cf8:	480b      	ldr	r0, [pc, #44]	; (8003d28 <prvInitialiseTaskLists+0x74>)
 8003cfa:	f7fe fcc7 	bl	800268c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <prvInitialiseTaskLists+0x78>)
 8003d00:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <prvInitialiseTaskLists+0x64>)
 8003d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <prvInitialiseTaskLists+0x7c>)
 8003d06:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <prvInitialiseTaskLists+0x68>)
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000cd8 	.word	0x20000cd8
 8003d18:	20001138 	.word	0x20001138
 8003d1c:	2000114c 	.word	0x2000114c
 8003d20:	20001168 	.word	0x20001168
 8003d24:	2000117c 	.word	0x2000117c
 8003d28:	20001194 	.word	0x20001194
 8003d2c:	20001160 	.word	0x20001160
 8003d30:	20001164 	.word	0x20001164

08003d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d3a:	e019      	b.n	8003d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d3c:	f000 fd66 	bl	800480c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <prvCheckTasksWaitingTermination+0x50>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fd23 	bl	8002798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <prvCheckTasksWaitingTermination+0x54>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <prvCheckTasksWaitingTermination+0x54>)
 8003d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <prvCheckTasksWaitingTermination+0x58>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <prvCheckTasksWaitingTermination+0x58>)
 8003d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d66:	f000 fd81 	bl	800486c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f810 	bl	8003d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <prvCheckTasksWaitingTermination+0x58>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e1      	bne.n	8003d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000117c 	.word	0x2000117c
 8003d88:	200011a8 	.word	0x200011a8
 8003d8c:	20001190 	.word	0x20001190

08003d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3354      	adds	r3, #84	; 0x54
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f8f1 	bl	8004f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 feef 	bl	8004b94 <vPortFree>
				vPortFree( pxTCB );
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 feec 	bl	8004b94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dbc:	e018      	b.n	8003df0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d103      	bne.n	8003dd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fee3 	bl	8004b94 <vPortFree>
	}
 8003dce:	e00f      	b.n	8003df0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d00a      	beq.n	8003df0 <prvDeleteTCB+0x60>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60fb      	str	r3, [r7, #12]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <prvDeleteTCB+0x5e>
	}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <prvResetNextTaskUnblockTime+0x40>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <prvResetNextTaskUnblockTime+0x14>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <prvResetNextTaskUnblockTime+0x16>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <prvResetNextTaskUnblockTime+0x44>)
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e1a:	e008      	b.n	8003e2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prvResetNextTaskUnblockTime+0x40>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <prvResetNextTaskUnblockTime+0x44>)
 8003e2c:	6013      	str	r3, [r2, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	20001160 	.word	0x20001160
 8003e3c:	200011c8 	.word	0x200011c8

08003e40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <xTaskGetSchedulerState+0x34>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	e008      	b.n	8003e66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <xTaskGetSchedulerState+0x38>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e001      	b.n	8003e66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e66:	687b      	ldr	r3, [r7, #4]
	}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	200011b4 	.word	0x200011b4
 8003e78:	200011d0 	.word	0x200011d0

08003e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d056      	beq.n	8003f40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <xTaskPriorityDisinherit+0xd0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d00a      	beq.n	8003eb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60fb      	str	r3, [r7, #12]
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	60bb      	str	r3, [r7, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d02c      	beq.n	8003f40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d128      	bne.n	8003f40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fc50 	bl	8002798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <xTaskPriorityDisinherit+0xd4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d903      	bls.n	8003f20 <xTaskPriorityDisinherit+0xa4>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <xTaskPriorityDisinherit+0xd4>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <xTaskPriorityDisinherit+0xd8>)
 8003f2e:	441a      	add	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fe fbd3 	bl	80026e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f40:	697b      	ldr	r3, [r7, #20]
	}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000cd4 	.word	0x20000cd4
 8003f50:	200011b0 	.word	0x200011b0
 8003f54:	20000cd8 	.word	0x20000cd8

08003f58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f62:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <prvAddCurrentTaskToDelayedList+0x94>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fc12 	bl	8002798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d10a      	bne.n	8003f92 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <prvAddCurrentTaskToDelayedList+0x94>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4819      	ldr	r0, [pc, #100]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f8c:	f7fe fba9 	bl	80026e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f90:	e026      	b.n	8003fe0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <prvAddCurrentTaskToDelayedList+0x94>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d209      	bcs.n	8003fbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fe fbb6 	bl	8002728 <vListInsert>
}
 8003fbc:	e010      	b.n	8003fe0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7fe fbac 	bl	8002728 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d202      	bcs.n	8003fe0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200011ac 	.word	0x200011ac
 8003fec:	20000cd4 	.word	0x20000cd4
 8003ff0:	20001194 	.word	0x20001194
 8003ff4:	20001164 	.word	0x20001164
 8003ff8:	20001160 	.word	0x20001160
 8003ffc:	200011c8 	.word	0x200011c8

08004000 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800400a:	f000 facb 	bl	80045a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800400e:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <xTimerCreateTimerTask+0x80>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800401e:	1d3a      	adds	r2, r7, #4
 8004020:	f107 0108 	add.w	r1, r7, #8
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe fb15 	bl	8002658 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	9202      	str	r2, [sp, #8]
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	2302      	movs	r3, #2
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	460a      	mov	r2, r1
 8004040:	4910      	ldr	r1, [pc, #64]	; (8004084 <xTimerCreateTimerTask+0x84>)
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <xTimerCreateTimerTask+0x88>)
 8004044:	f7ff f8b6 	bl	80031b4 <xTaskCreateStatic>
 8004048:	4603      	mov	r3, r0
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <xTimerCreateTimerTask+0x8c>)
 800404c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <xTimerCreateTimerTask+0x8c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004056:	2301      	movs	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	613b      	str	r3, [r7, #16]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004076:	697b      	ldr	r3, [r7, #20]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20001204 	.word	0x20001204
 8004084:	0800582c 	.word	0x0800582c
 8004088:	080041ad 	.word	0x080041ad
 800408c:	20001208 	.word	0x20001208

08004090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xTimerGenericCommand+0x2e>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	623b      	str	r3, [r7, #32]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <xTimerGenericCommand+0x98>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d02a      	beq.n	800411c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	dc18      	bgt.n	800410a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040d8:	f7ff feb2 	bl	8003e40 <xTaskGetSchedulerState>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d109      	bne.n	80040f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <xTimerGenericCommand+0x98>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	f107 0110 	add.w	r1, r7, #16
 80040ea:	2300      	movs	r3, #0
 80040ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ee:	f7fe fc7f 	bl	80029f0 <xQueueGenericSend>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
 80040f4:	e012      	b.n	800411c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <xTimerGenericCommand+0x98>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f107 0110 	add.w	r1, r7, #16
 80040fe:	2300      	movs	r3, #0
 8004100:	2200      	movs	r2, #0
 8004102:	f7fe fc75 	bl	80029f0 <xQueueGenericSend>
 8004106:	6278      	str	r0, [r7, #36]	; 0x24
 8004108:	e008      	b.n	800411c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <xTimerGenericCommand+0x98>)
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f107 0110 	add.w	r1, r7, #16
 8004112:	2300      	movs	r3, #0
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	f7fe fd69 	bl	8002bec <xQueueGenericSendFromISR>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800411e:	4618      	mov	r0, r3
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20001204 	.word	0x20001204

0800412c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <prvProcessExpiredTimer+0x7c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fb27 	bl	8002798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d122      	bne.n	8004198 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	18d1      	adds	r1, r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f000 f8c8 	bl	80042f4 <prvInsertTimerInActiveList>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	2100      	movs	r1, #0
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7ff ff8b 	bl	8004090 <xTimerGenericCommand>
 800417a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	6978      	ldr	r0, [r7, #20]
 800419e:	4798      	blx	r3
}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200011fc 	.word	0x200011fc

080041ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f857 	bl	800426c <prvGetNextExpireTime>
 80041be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f803 	bl	80041d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041ca:	f000 f8d5 	bl	8004378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ce:	e7f1      	b.n	80041b4 <prvTimerTask+0x8>

080041d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041da:	f7ff fa3f 	bl	800365c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f866 	bl	80042b4 <prvSampleTimeNow>
 80041e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d130      	bne.n	8004252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <prvProcessTimerOrBlockTask+0x3c>
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d806      	bhi.n	800420c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041fe:	f7ff fa3b 	bl	8003678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff91 	bl	800412c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800420a:	e024      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <prvProcessTimerOrBlockTask+0x90>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <prvProcessTimerOrBlockTask+0x94>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	f7fe ff8b 	bl	800314c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004236:	f7ff fa1f 	bl	8003678 <xTaskResumeAll>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvProcessTimerOrBlockTask+0x98>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
}
 8004250:	e001      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004252:	f7ff fa11 	bl	8003678 <xTaskResumeAll>
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20001200 	.word	0x20001200
 8004264:	20001204 	.word	0x20001204
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e001      	b.n	80042a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200011fc 	.word	0x200011fc

080042b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042bc:	f7ff fa7a 	bl	80037b4 <xTaskGetTickCount>
 80042c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d205      	bcs.n	80042d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042cc:	f000 f908 	bl	80044e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e002      	b.n	80042de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000120c 	.word	0x2000120c

080042f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d812      	bhi.n	8004340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e01b      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <prvInsertTimerInActiveList+0x7c>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe f9f5 	bl	8002728 <vListInsert>
 800433e:	e012      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d206      	bcs.n	8004356 <prvInsertTimerInActiveList+0x62>
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e007      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <prvInsertTimerInActiveList+0x80>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe f9e1 	bl	8002728 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004366:	697b      	ldr	r3, [r7, #20]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20001200 	.word	0x20001200
 8004374:	200011fc 	.word	0x200011fc

08004378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800437e:	e09d      	b.n	80044bc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da18      	bge.n	80043b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	3304      	adds	r3, #4
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	61fb      	str	r3, [r7, #28]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ae:	6850      	ldr	r0, [r2, #4]
 80043b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b2:	6892      	ldr	r2, [r2, #8]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db7d      	blt.n	80044ba <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe f9e2 	bl	8002798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043d4:	463b      	mov	r3, r7
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ff6c 	bl	80042b4 <prvSampleTimeNow>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b09      	cmp	r3, #9
 80043e2:	d86b      	bhi.n	80044bc <prvProcessReceivedCommands+0x144>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <prvProcessReceivedCommands+0x74>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004415 	.word	0x08004415
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004415 	.word	0x08004415
 80043f8:	080044bd 	.word	0x080044bd
 80043fc:	08004471 	.word	0x08004471
 8004400:	080044a9 	.word	0x080044a9
 8004404:	08004415 	.word	0x08004415
 8004408:	08004415 	.word	0x08004415
 800440c:	080044bd 	.word	0x080044bd
 8004410:	08004471 	.word	0x08004471
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	18d1      	adds	r1, r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004422:	f7ff ff67 	bl	80042f4 <prvInsertTimerInActiveList>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d047      	beq.n	80044bc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004432:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d13f      	bne.n	80044bc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	441a      	add	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	2100      	movs	r1, #0
 800444c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444e:	f7ff fe1f 	bl	8004090 <xTimerGenericCommand>
 8004452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d130      	bne.n	80044bc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61bb      	str	r3, [r7, #24]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a2:	f7ff ff27 	bl	80042f4 <prvInsertTimerInActiveList>
					break;
 80044a6:	e009      	b.n	80044bc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80044b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b4:	f000 fb6e 	bl	8004b94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044b8:	e000      	b.n	80044bc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <prvProcessReceivedCommands+0x164>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1d39      	adds	r1, r7, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fc29 	bl	8002d1c <xQueueReceive>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f af57 	bne.w	8004380 <prvProcessReceivedCommands+0x8>
	}
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20001204 	.word	0x20001204

080044e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044e6:	e045      	b.n	8004574 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044e8:	4b2c      	ldr	r3, [pc, #176]	; (800459c <prvSwitchTimerLists+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044f2:	4b2a      	ldr	r3, [pc, #168]	; (800459c <prvSwitchTimerLists+0xbc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe f949 	bl	8002798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d12e      	bne.n	8004574 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	429a      	cmp	r2, r3
 8004526:	d90e      	bls.n	8004546 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <prvSwitchTimerLists+0xbc>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fe f8f2 	bl	8002728 <vListInsert>
 8004544:	e016      	b.n	8004574 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2300      	movs	r3, #0
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	2100      	movs	r1, #0
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fd9d 	bl	8004090 <xTimerGenericCommand>
 8004556:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <prvSwitchTimerLists+0x94>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	603b      	str	r3, [r7, #0]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <prvSwitchTimerLists+0xbc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1b4      	bne.n	80044e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvSwitchTimerLists+0xbc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <prvSwitchTimerLists+0xc0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <prvSwitchTimerLists+0xbc>)
 800458a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <prvSwitchTimerLists+0xc0>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6013      	str	r3, [r2, #0]
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200011fc 	.word	0x200011fc
 80045a0:	20001200 	.word	0x20001200

080045a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045aa:	f000 f92f 	bl	800480c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d120      	bne.n	80045f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045b6:	4814      	ldr	r0, [pc, #80]	; (8004608 <prvCheckForValidListAndQueue+0x64>)
 80045b8:	f7fe f868 	bl	800268c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045bc:	4813      	ldr	r0, [pc, #76]	; (800460c <prvCheckForValidListAndQueue+0x68>)
 80045be:	f7fe f865 	bl	800268c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <prvCheckForValidListAndQueue+0x6c>)
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <prvCheckForValidListAndQueue+0x64>)
 80045c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <prvCheckForValidListAndQueue+0x70>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <prvCheckForValidListAndQueue+0x68>)
 80045cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <prvCheckForValidListAndQueue+0x74>)
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <prvCheckForValidListAndQueue+0x78>)
 80045d6:	2110      	movs	r1, #16
 80045d8:	200a      	movs	r0, #10
 80045da:	f7fe f96f 	bl	80028bc <xQueueGenericCreateStatic>
 80045de:	4603      	mov	r3, r0
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	490b      	ldr	r1, [pc, #44]	; (8004620 <prvCheckForValidListAndQueue+0x7c>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fd82 	bl	80030fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f8:	f000 f938 	bl	800486c <vPortExitCritical>
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20001204 	.word	0x20001204
 8004608:	200011d4 	.word	0x200011d4
 800460c:	200011e8 	.word	0x200011e8
 8004610:	200011fc 	.word	0x200011fc
 8004614:	20001200 	.word	0x20001200
 8004618:	200012b0 	.word	0x200012b0
 800461c:	20001210 	.word	0x20001210
 8004620:	08005834 	.word	0x08005834

08004624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3b04      	subs	r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800463c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b04      	subs	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b04      	subs	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <pxPortInitialiseStack+0x54>)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b14      	subs	r3, #20
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b20      	subs	r3, #32
 800466a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	0800467d 	.word	0x0800467d

0800467c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <prvTaskExitError+0x54>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d00a      	beq.n	80046a6 <prvTaskExitError+0x2a>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60fb      	str	r3, [r7, #12]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <prvTaskExitError+0x28>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
}
 80046b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ba:	bf00      	nop
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0fc      	beq.n	80046bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000014 	.word	0x20000014
	...

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80046fe:	4770      	bx	lr

08004700 <pxCurrentTCBConst2>:
 8004700:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004708:	4806      	ldr	r0, [pc, #24]	; (8004724 <prvPortStartFirstTask+0x1c>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	b662      	cpsie	i
 8004714:	b661      	cpsie	f
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	df00      	svc	0
 8004720:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004722:	bf00      	nop
 8004724:	e000ed08 	.word	0xe000ed08

08004728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800472e:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <xPortStartScheduler+0xd0>)
 8004730:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <xPortStartScheduler+0xd4>)
 8004754:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <xPortStartScheduler+0xd8>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475c:	e009      	b.n	8004772 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800475e:	4b28      	ldr	r3, [pc, #160]	; (8004800 <xPortStartScheduler+0xd8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <xPortStartScheduler+0xd8>)
 8004766:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d0ef      	beq.n	800475e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <xPortStartScheduler+0xd8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00a      	beq.n	80047a0 <xPortStartScheduler+0x78>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047a0:	4b17      	ldr	r3, [pc, #92]	; (8004800 <xPortStartScheduler+0xd8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <xPortStartScheduler+0xd8>)
 80047a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <xPortStartScheduler+0xd8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <xPortStartScheduler+0xd8>)
 80047b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <xPortStartScheduler+0xdc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <xPortStartScheduler+0xdc>)
 80047c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <xPortStartScheduler+0xdc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <xPortStartScheduler+0xdc>)
 80047d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047d6:	f000 f8b9 	bl	800494c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <xPortStartScheduler+0xe0>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047e0:	f7ff ff92 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047e4:	f7ff f8b2 	bl	800394c <vTaskSwitchContext>
	prvTaskExitError();
 80047e8:	f7ff ff48 	bl	800467c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000e400 	.word	0xe000e400
 80047fc:	20001300 	.word	0x20001300
 8004800:	20001304 	.word	0x20001304
 8004804:	e000ed20 	.word	0xe000ed20
 8004808:	20000014 	.word	0x20000014

0800480c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
}
 8004824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <vPortEnterCritical+0x58>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <vPortEnterCritical+0x58>)
 800482e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <vPortEnterCritical+0x58>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10f      	bne.n	8004858 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <vPortEnterCritical+0x5c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <vPortEnterCritical+0x4c>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	603b      	str	r3, [r7, #0]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vPortEnterCritical+0x4a>
	}
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000014 	.word	0x20000014
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <vPortExitCritical+0x4c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <vPortExitCritical+0x24>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <vPortExitCritical+0x4c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <vPortExitCritical+0x4c>)
 8004898:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <vPortExitCritical+0x4c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <vPortExitCritical+0x42>
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f383 8811 	msr	BASEPRI, r3
}
 80048ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	20000014 	.word	0x20000014
 80048bc:	00000000 	.word	0x00000000

080048c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048c0:	f3ef 8009 	mrs	r0, PSP
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <pxCurrentTCBConst>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048d0:	6010      	str	r0, [r2, #0]
 80048d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048da:	f380 8811 	msr	BASEPRI, r0
 80048de:	f7ff f835 	bl	800394c <vTaskSwitchContext>
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048f6:	f380 8809 	msr	PSP, r0
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	4770      	bx	lr

08004900 <pxCurrentTCBConst>:
 8004900:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
}
 8004920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004922:	f7fe ff55 	bl	80037d0 <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <xPortSysTickHandler+0x40>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
}
 800493e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <vPortSetupTimerInterrupt+0x30>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a08      	ldr	r2, [pc, #32]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <vPortSetupTimerInterrupt+0x30>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	e000e010 	.word	0xe000e010
 8004980:	e000e018 	.word	0xe000e018
 8004984:	20000008 	.word	0x20000008
 8004988:	10624dd3 	.word	0x10624dd3
 800498c:	e000e014 	.word	0xe000e014

08004990 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004996:	f3ef 8305 	mrs	r3, IPSR
 800499a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	d914      	bls.n	80049cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049a2:	4a16      	ldr	r2, [pc, #88]	; (80049fc <vPortValidateInterruptPriority+0x6c>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <vPortValidateInterruptPriority+0x70>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	7afa      	ldrb	r2, [r7, #11]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d20a      	bcs.n	80049cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	607b      	str	r3, [r7, #4]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <vPortValidateInterruptPriority+0x74>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <vPortValidateInterruptPriority+0x78>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d90a      	bls.n	80049f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	603b      	str	r3, [r7, #0]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <vPortValidateInterruptPriority+0x60>
	}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	e000e3f0 	.word	0xe000e3f0
 8004a00:	20001300 	.word	0x20001300
 8004a04:	e000ed0c 	.word	0xe000ed0c
 8004a08:	20001304 	.word	0x20001304

08004a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a18:	f7fe fe20 	bl	800365c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a1c:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <pvPortMalloc+0x174>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a24:	f000 f910 	bl	8004c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a28:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <pvPortMalloc+0x178>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 808e 	bne.w	8004b52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01d      	beq.n	8004a78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <pvPortMalloc+0x6c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	617b      	str	r3, [r7, #20]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d069      	beq.n	8004b52 <pvPortMalloc+0x146>
 8004a7e:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <pvPortMalloc+0x17c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d864      	bhi.n	8004b52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <pvPortMalloc+0x180>)
 8004a8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a8c:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <pvPortMalloc+0x180>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a92:	e004      	b.n	8004a9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d903      	bls.n	8004ab0 <pvPortMalloc+0xa4>
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f1      	bne.n	8004a94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ab0:	4b33      	ldr	r3, [pc, #204]	; (8004b80 <pvPortMalloc+0x174>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d04b      	beq.n	8004b52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2208      	movs	r2, #8
 8004ac0:	4413      	add	r3, r2
 8004ac2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d91f      	bls.n	8004b1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <pvPortMalloc+0xf8>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	613b      	str	r3, [r7, #16]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b16:	69b8      	ldr	r0, [r7, #24]
 8004b18:	f000 f8f8 	bl	8004d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <pvPortMalloc+0x17c>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <pvPortMalloc+0x17c>)
 8004b28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <pvPortMalloc+0x17c>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <pvPortMalloc+0x184>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d203      	bcs.n	8004b3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <pvPortMalloc+0x17c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <pvPortMalloc+0x184>)
 8004b3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <pvPortMalloc+0x178>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b52:	f7fe fd91 	bl	8003678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <pvPortMalloc+0x16a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <pvPortMalloc+0x168>
	return pvReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20001f10 	.word	0x20001f10
 8004b84:	20001f1c 	.word	0x20001f1c
 8004b88:	20001f14 	.word	0x20001f14
 8004b8c:	20001f08 	.word	0x20001f08
 8004b90:	20001f18 	.word	0x20001f18

08004b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d048      	beq.n	8004c38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	425b      	negs	r3, r3
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <vPortFree+0xac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vPortFree+0x44>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60fb      	str	r3, [r7, #12]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <vPortFree+0x62>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60bb      	str	r3, [r7, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <vPortFree+0xac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d019      	beq.n	8004c38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d115      	bne.n	8004c38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortFree+0xac>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	401a      	ands	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c1c:	f7fe fd1e 	bl	800365c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <vPortFree+0xb0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	4a06      	ldr	r2, [pc, #24]	; (8004c44 <vPortFree+0xb0>)
 8004c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c2e:	6938      	ldr	r0, [r7, #16]
 8004c30:	f000 f86c 	bl	8004d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c34:	f7fe fd20 	bl	8003678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20001f1c 	.word	0x20001f1c
 8004c44:	20001f14 	.word	0x20001f14

08004c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <prvHeapInit+0xac>)
 8004c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3307      	adds	r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <prvHeapInit+0xac>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <prvHeapInit+0xb0>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <prvHeapInit+0xb0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c94:	2208      	movs	r2, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <prvHeapInit+0xb4>)
 8004ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <prvHeapInit+0xb4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <prvHeapInit+0xb4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <prvHeapInit+0xb4>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <prvHeapInit+0xb8>)
 8004cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <prvHeapInit+0xbc>)
 8004cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <prvHeapInit+0xc0>)
 8004ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ce6:	601a      	str	r2, [r3, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20001308 	.word	0x20001308
 8004cf8:	20001f08 	.word	0x20001f08
 8004cfc:	20001f10 	.word	0x20001f10
 8004d00:	20001f18 	.word	0x20001f18
 8004d04:	20001f14 	.word	0x20001f14
 8004d08:	20001f1c 	.word	0x20001f1c

08004d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <prvInsertBlockIntoFreeList+0xa8>)
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e002      	b.n	8004d20 <prvInsertBlockIntoFreeList+0x14>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d8f7      	bhi.n	8004d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d108      	bne.n	8004d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	441a      	add	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d118      	bne.n	8004d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <prvInsertBlockIntoFreeList+0xac>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d00d      	beq.n	8004d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e008      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvInsertBlockIntoFreeList+0xac>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e003      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d002      	beq.n	8004daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	20001f08 	.word	0x20001f08
 8004db8:	20001f10 	.word	0x20001f10

08004dbc <__errno>:
 8004dbc:	4b01      	ldr	r3, [pc, #4]	; (8004dc4 <__errno+0x8>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000018 	.word	0x20000018

08004dc8 <__libc_init_array>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	2600      	movs	r6, #0
 8004dcc:	4d0c      	ldr	r5, [pc, #48]	; (8004e00 <__libc_init_array+0x38>)
 8004dce:	4c0d      	ldr	r4, [pc, #52]	; (8004e04 <__libc_init_array+0x3c>)
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	42a6      	cmp	r6, r4
 8004dd6:	d109      	bne.n	8004dec <__libc_init_array+0x24>
 8004dd8:	f000 fd06 	bl	80057e8 <_init>
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4d0a      	ldr	r5, [pc, #40]	; (8004e08 <__libc_init_array+0x40>)
 8004de0:	4c0a      	ldr	r4, [pc, #40]	; (8004e0c <__libc_init_array+0x44>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d105      	bne.n	8004df6 <__libc_init_array+0x2e>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df0:	4798      	blx	r3
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7ee      	b.n	8004dd4 <__libc_init_array+0xc>
 8004df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfa:	4798      	blx	r3
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	e7f2      	b.n	8004de6 <__libc_init_array+0x1e>
 8004e00:	080066a0 	.word	0x080066a0
 8004e04:	080066a0 	.word	0x080066a0
 8004e08:	080066a0 	.word	0x080066a0
 8004e0c:	080066a4 	.word	0x080066a4

08004e10 <__retarget_lock_acquire_recursive>:
 8004e10:	4770      	bx	lr

08004e12 <__retarget_lock_release_recursive>:
 8004e12:	4770      	bx	lr

08004e14 <memcpy>:
 8004e14:	440a      	add	r2, r1
 8004e16:	4291      	cmp	r1, r2
 8004e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e1c:	d100      	bne.n	8004e20 <memcpy+0xc>
 8004e1e:	4770      	bx	lr
 8004e20:	b510      	push	{r4, lr}
 8004e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e26:	4291      	cmp	r1, r2
 8004e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e2c:	d1f9      	bne.n	8004e22 <memcpy+0xe>
 8004e2e:	bd10      	pop	{r4, pc}

08004e30 <memset>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	4402      	add	r2, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <sbrk_aligned>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4e0e      	ldr	r6, [pc, #56]	; (8004e7c <sbrk_aligned+0x3c>)
 8004e44:	460c      	mov	r4, r1
 8004e46:	6831      	ldr	r1, [r6, #0]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	b911      	cbnz	r1, 8004e52 <sbrk_aligned+0x12>
 8004e4c:	f000 f8f6 	bl	800503c <_sbrk_r>
 8004e50:	6030      	str	r0, [r6, #0]
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f8f1 	bl	800503c <_sbrk_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <sbrk_aligned+0x34>
 8004e5e:	1cc4      	adds	r4, r0, #3
 8004e60:	f024 0403 	bic.w	r4, r4, #3
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d007      	beq.n	8004e78 <sbrk_aligned+0x38>
 8004e68:	1a21      	subs	r1, r4, r0
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f8e6 	bl	800503c <_sbrk_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d101      	bne.n	8004e78 <sbrk_aligned+0x38>
 8004e74:	f04f 34ff 	mov.w	r4, #4294967295
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	20001f28 	.word	0x20001f28

08004e80 <_malloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	1ccd      	adds	r5, r1, #3
 8004e86:	f025 0503 	bic.w	r5, r5, #3
 8004e8a:	3508      	adds	r5, #8
 8004e8c:	2d0c      	cmp	r5, #12
 8004e8e:	bf38      	it	cc
 8004e90:	250c      	movcc	r5, #12
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	4607      	mov	r7, r0
 8004e96:	db01      	blt.n	8004e9c <_malloc_r+0x1c>
 8004e98:	42a9      	cmp	r1, r5
 8004e9a:	d905      	bls.n	8004ea8 <_malloc_r+0x28>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4e2e      	ldr	r6, [pc, #184]	; (8004f64 <_malloc_r+0xe4>)
 8004eaa:	f000 f8f7 	bl	800509c <__malloc_lock>
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	bb34      	cbnz	r4, 8004f02 <_malloc_r+0x82>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ffc2 	bl	8004e40 <sbrk_aligned>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	d14d      	bne.n	8004f5e <_malloc_r+0xde>
 8004ec2:	6834      	ldr	r4, [r6, #0]
 8004ec4:	4626      	mov	r6, r4
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	d140      	bne.n	8004f4c <_malloc_r+0xcc>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4638      	mov	r0, r7
 8004ed0:	eb04 0803 	add.w	r8, r4, r3
 8004ed4:	f000 f8b2 	bl	800503c <_sbrk_r>
 8004ed8:	4580      	cmp	r8, r0
 8004eda:	d13a      	bne.n	8004f52 <_malloc_r+0xd2>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	3503      	adds	r5, #3
 8004ee0:	1a6d      	subs	r5, r5, r1
 8004ee2:	f025 0503 	bic.w	r5, r5, #3
 8004ee6:	3508      	adds	r5, #8
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	bf38      	it	cc
 8004eec:	250c      	movcc	r5, #12
 8004eee:	4638      	mov	r0, r7
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7ff ffa5 	bl	8004e40 <sbrk_aligned>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d02b      	beq.n	8004f52 <_malloc_r+0xd2>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	442b      	add	r3, r5
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e00e      	b.n	8004f20 <_malloc_r+0xa0>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	1b52      	subs	r2, r2, r5
 8004f06:	d41e      	bmi.n	8004f46 <_malloc_r+0xc6>
 8004f08:	2a0b      	cmp	r2, #11
 8004f0a:	d916      	bls.n	8004f3a <_malloc_r+0xba>
 8004f0c:	1961      	adds	r1, r4, r5
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	bf18      	it	ne
 8004f14:	6059      	strne	r1, [r3, #4]
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	bf08      	it	eq
 8004f1a:	6031      	streq	r1, [r6, #0]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f104 060b 	add.w	r6, r4, #11
 8004f26:	f000 f8bf 	bl	80050a8 <__malloc_unlock>
 8004f2a:	f026 0607 	bic.w	r6, r6, #7
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	1af2      	subs	r2, r6, r3
 8004f32:	d0b6      	beq.n	8004ea2 <_malloc_r+0x22>
 8004f34:	1b9b      	subs	r3, r3, r6
 8004f36:	50a3      	str	r3, [r4, r2]
 8004f38:	e7b3      	b.n	8004ea2 <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	6032      	streq	r2, [r6, #0]
 8004f42:	605a      	strne	r2, [r3, #4]
 8004f44:	e7ec      	b.n	8004f20 <_malloc_r+0xa0>
 8004f46:	4623      	mov	r3, r4
 8004f48:	6864      	ldr	r4, [r4, #4]
 8004f4a:	e7b2      	b.n	8004eb2 <_malloc_r+0x32>
 8004f4c:	4634      	mov	r4, r6
 8004f4e:	6876      	ldr	r6, [r6, #4]
 8004f50:	e7b9      	b.n	8004ec6 <_malloc_r+0x46>
 8004f52:	230c      	movs	r3, #12
 8004f54:	4638      	mov	r0, r7
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	f000 f8a6 	bl	80050a8 <__malloc_unlock>
 8004f5c:	e7a1      	b.n	8004ea2 <_malloc_r+0x22>
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa0>
 8004f62:	bf00      	nop
 8004f64:	20001f24 	.word	0x20001f24

08004f68 <cleanup_glue>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	6809      	ldr	r1, [r1, #0]
 8004f6e:	4605      	mov	r5, r0
 8004f70:	b109      	cbz	r1, 8004f76 <cleanup_glue+0xe>
 8004f72:	f7ff fff9 	bl	8004f68 <cleanup_glue>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7e:	f000 b899 	b.w	80050b4 <_free_r>
	...

08004f84 <_reclaim_reent>:
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <_reclaim_reent+0xb4>)
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4283      	cmp	r3, r0
 8004f8e:	d051      	beq.n	8005034 <_reclaim_reent+0xb0>
 8004f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f92:	b143      	cbz	r3, 8004fa6 <_reclaim_reent+0x22>
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14a      	bne.n	8005030 <_reclaim_reent+0xac>
 8004f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	b111      	cbz	r1, 8004fa6 <_reclaim_reent+0x22>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 f887 	bl	80050b4 <_free_r>
 8004fa6:	6961      	ldr	r1, [r4, #20]
 8004fa8:	b111      	cbz	r1, 8004fb0 <_reclaim_reent+0x2c>
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f882 	bl	80050b4 <_free_r>
 8004fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fb2:	b111      	cbz	r1, 8004fba <_reclaim_reent+0x36>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 f87d 	bl	80050b4 <_free_r>
 8004fba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fbc:	b111      	cbz	r1, 8004fc4 <_reclaim_reent+0x40>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f878 	bl	80050b4 <_free_r>
 8004fc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004fc6:	b111      	cbz	r1, 8004fce <_reclaim_reent+0x4a>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 f873 	bl	80050b4 <_free_r>
 8004fce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fd0:	b111      	cbz	r1, 8004fd8 <_reclaim_reent+0x54>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f86e 	bl	80050b4 <_free_r>
 8004fd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004fda:	b111      	cbz	r1, 8004fe2 <_reclaim_reent+0x5e>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 f869 	bl	80050b4 <_free_r>
 8004fe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fe4:	b111      	cbz	r1, 8004fec <_reclaim_reent+0x68>
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f864 	bl	80050b4 <_free_r>
 8004fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fee:	b111      	cbz	r1, 8004ff6 <_reclaim_reent+0x72>
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 f85f 	bl	80050b4 <_free_r>
 8004ff6:	69a3      	ldr	r3, [r4, #24]
 8004ff8:	b1e3      	cbz	r3, 8005034 <_reclaim_reent+0xb0>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ffe:	4798      	blx	r3
 8005000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005002:	b1b9      	cbz	r1, 8005034 <_reclaim_reent+0xb0>
 8005004:	4620      	mov	r0, r4
 8005006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800500a:	f7ff bfad 	b.w	8004f68 <cleanup_glue>
 800500e:	5949      	ldr	r1, [r1, r5]
 8005010:	b941      	cbnz	r1, 8005024 <_reclaim_reent+0xa0>
 8005012:	3504      	adds	r5, #4
 8005014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005016:	2d80      	cmp	r5, #128	; 0x80
 8005018:	68d9      	ldr	r1, [r3, #12]
 800501a:	d1f8      	bne.n	800500e <_reclaim_reent+0x8a>
 800501c:	4620      	mov	r0, r4
 800501e:	f000 f849 	bl	80050b4 <_free_r>
 8005022:	e7ba      	b.n	8004f9a <_reclaim_reent+0x16>
 8005024:	680e      	ldr	r6, [r1, #0]
 8005026:	4620      	mov	r0, r4
 8005028:	f000 f844 	bl	80050b4 <_free_r>
 800502c:	4631      	mov	r1, r6
 800502e:	e7ef      	b.n	8005010 <_reclaim_reent+0x8c>
 8005030:	2500      	movs	r5, #0
 8005032:	e7ef      	b.n	8005014 <_reclaim_reent+0x90>
 8005034:	bd70      	pop	{r4, r5, r6, pc}
 8005036:	bf00      	nop
 8005038:	20000018 	.word	0x20000018

0800503c <_sbrk_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	2300      	movs	r3, #0
 8005040:	4d05      	ldr	r5, [pc, #20]	; (8005058 <_sbrk_r+0x1c>)
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	f7fb fcbe 	bl	80009c8 <_sbrk>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_sbrk_r+0x1a>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	b103      	cbz	r3, 8005056 <_sbrk_r+0x1a>
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	20001f2c 	.word	0x20001f2c

0800505c <siprintf>:
 800505c:	b40e      	push	{r1, r2, r3}
 800505e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005062:	b500      	push	{lr}
 8005064:	b09c      	sub	sp, #112	; 0x70
 8005066:	ab1d      	add	r3, sp, #116	; 0x74
 8005068:	9002      	str	r0, [sp, #8]
 800506a:	9006      	str	r0, [sp, #24]
 800506c:	9107      	str	r1, [sp, #28]
 800506e:	9104      	str	r1, [sp, #16]
 8005070:	4808      	ldr	r0, [pc, #32]	; (8005094 <siprintf+0x38>)
 8005072:	4909      	ldr	r1, [pc, #36]	; (8005098 <siprintf+0x3c>)
 8005074:	f853 2b04 	ldr.w	r2, [r3], #4
 8005078:	9105      	str	r1, [sp, #20]
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	a902      	add	r1, sp, #8
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	f000 f8bc 	bl	80051fc <_svfiprintf_r>
 8005084:	2200      	movs	r2, #0
 8005086:	9b02      	ldr	r3, [sp, #8]
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	b01c      	add	sp, #112	; 0x70
 800508c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005090:	b003      	add	sp, #12
 8005092:	4770      	bx	lr
 8005094:	20000018 	.word	0x20000018
 8005098:	ffff0208 	.word	0xffff0208

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__malloc_lock+0x8>)
 800509e:	f7ff beb7 	b.w	8004e10 <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	20001f20 	.word	0x20001f20

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f7ff beb2 	b.w	8004e12 <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	20001f20 	.word	0x20001f20

080050b4 <_free_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4605      	mov	r5, r0
 80050b8:	2900      	cmp	r1, #0
 80050ba:	d040      	beq.n	800513e <_free_r+0x8a>
 80050bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c0:	1f0c      	subs	r4, r1, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfb8      	it	lt
 80050c6:	18e4      	addlt	r4, r4, r3
 80050c8:	f7ff ffe8 	bl	800509c <__malloc_lock>
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <_free_r+0x8c>)
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	b933      	cbnz	r3, 80050e0 <_free_r+0x2c>
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	6014      	str	r4, [r2, #0]
 80050d6:	4628      	mov	r0, r5
 80050d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050dc:	f7ff bfe4 	b.w	80050a8 <__malloc_unlock>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d908      	bls.n	80050f6 <_free_r+0x42>
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	1821      	adds	r1, r4, r0
 80050e8:	428b      	cmp	r3, r1
 80050ea:	bf01      	itttt	eq
 80050ec:	6819      	ldreq	r1, [r3, #0]
 80050ee:	685b      	ldreq	r3, [r3, #4]
 80050f0:	1809      	addeq	r1, r1, r0
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	e7ed      	b.n	80050d2 <_free_r+0x1e>
 80050f6:	461a      	mov	r2, r3
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b10b      	cbz	r3, 8005100 <_free_r+0x4c>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d9fa      	bls.n	80050f6 <_free_r+0x42>
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	1850      	adds	r0, r2, r1
 8005104:	42a0      	cmp	r0, r4
 8005106:	d10b      	bne.n	8005120 <_free_r+0x6c>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	4401      	add	r1, r0
 800510c:	1850      	adds	r0, r2, r1
 800510e:	4283      	cmp	r3, r0
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	d1e0      	bne.n	80050d6 <_free_r+0x22>
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4401      	add	r1, r0
 800511a:	6011      	str	r1, [r2, #0]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	e7da      	b.n	80050d6 <_free_r+0x22>
 8005120:	d902      	bls.n	8005128 <_free_r+0x74>
 8005122:	230c      	movs	r3, #12
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	e7d6      	b.n	80050d6 <_free_r+0x22>
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	1821      	adds	r1, r4, r0
 800512c:	428b      	cmp	r3, r1
 800512e:	bf01      	itttt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	1809      	addeq	r1, r1, r0
 8005136:	6021      	streq	r1, [r4, #0]
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	6054      	str	r4, [r2, #4]
 800513c:	e7cb      	b.n	80050d6 <_free_r+0x22>
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	20001f24 	.word	0x20001f24

08005144 <__ssputs_r>:
 8005144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	688e      	ldr	r6, [r1, #8]
 800514a:	4682      	mov	sl, r0
 800514c:	429e      	cmp	r6, r3
 800514e:	460c      	mov	r4, r1
 8005150:	4690      	mov	r8, r2
 8005152:	461f      	mov	r7, r3
 8005154:	d838      	bhi.n	80051c8 <__ssputs_r+0x84>
 8005156:	898a      	ldrh	r2, [r1, #12]
 8005158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800515c:	d032      	beq.n	80051c4 <__ssputs_r+0x80>
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	6909      	ldr	r1, [r1, #16]
 8005162:	3301      	adds	r3, #1
 8005164:	eba5 0901 	sub.w	r9, r5, r1
 8005168:	6965      	ldr	r5, [r4, #20]
 800516a:	444b      	add	r3, r9
 800516c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005170:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005174:	106d      	asrs	r5, r5, #1
 8005176:	429d      	cmp	r5, r3
 8005178:	bf38      	it	cc
 800517a:	461d      	movcc	r5, r3
 800517c:	0553      	lsls	r3, r2, #21
 800517e:	d531      	bpl.n	80051e4 <__ssputs_r+0xa0>
 8005180:	4629      	mov	r1, r5
 8005182:	f7ff fe7d 	bl	8004e80 <_malloc_r>
 8005186:	4606      	mov	r6, r0
 8005188:	b950      	cbnz	r0, 80051a0 <__ssputs_r+0x5c>
 800518a:	230c      	movs	r3, #12
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	f8ca 3000 	str.w	r3, [sl]
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	464a      	mov	r2, r9
 80051a2:	6921      	ldr	r1, [r4, #16]
 80051a4:	f7ff fe36 	bl	8004e14 <memcpy>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	6126      	str	r6, [r4, #16]
 80051b6:	444e      	add	r6, r9
 80051b8:	6026      	str	r6, [r4, #0]
 80051ba:	463e      	mov	r6, r7
 80051bc:	6165      	str	r5, [r4, #20]
 80051be:	eba5 0509 	sub.w	r5, r5, r9
 80051c2:	60a5      	str	r5, [r4, #8]
 80051c4:	42be      	cmp	r6, r7
 80051c6:	d900      	bls.n	80051ca <__ssputs_r+0x86>
 80051c8:	463e      	mov	r6, r7
 80051ca:	4632      	mov	r2, r6
 80051cc:	4641      	mov	r1, r8
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	f000 fab8 	bl	8005744 <memmove>
 80051d4:	68a3      	ldr	r3, [r4, #8]
 80051d6:	2000      	movs	r0, #0
 80051d8:	1b9b      	subs	r3, r3, r6
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	4433      	add	r3, r6
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	e7db      	b.n	800519c <__ssputs_r+0x58>
 80051e4:	462a      	mov	r2, r5
 80051e6:	f000 fac7 	bl	8005778 <_realloc_r>
 80051ea:	4606      	mov	r6, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1e1      	bne.n	80051b4 <__ssputs_r+0x70>
 80051f0:	4650      	mov	r0, sl
 80051f2:	6921      	ldr	r1, [r4, #16]
 80051f4:	f7ff ff5e 	bl	80050b4 <_free_r>
 80051f8:	e7c7      	b.n	800518a <__ssputs_r+0x46>
	...

080051fc <_svfiprintf_r>:
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	4698      	mov	r8, r3
 8005202:	898b      	ldrh	r3, [r1, #12]
 8005204:	4607      	mov	r7, r0
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	460d      	mov	r5, r1
 800520a:	4614      	mov	r4, r2
 800520c:	b09d      	sub	sp, #116	; 0x74
 800520e:	d50e      	bpl.n	800522e <_svfiprintf_r+0x32>
 8005210:	690b      	ldr	r3, [r1, #16]
 8005212:	b963      	cbnz	r3, 800522e <_svfiprintf_r+0x32>
 8005214:	2140      	movs	r1, #64	; 0x40
 8005216:	f7ff fe33 	bl	8004e80 <_malloc_r>
 800521a:	6028      	str	r0, [r5, #0]
 800521c:	6128      	str	r0, [r5, #16]
 800521e:	b920      	cbnz	r0, 800522a <_svfiprintf_r+0x2e>
 8005220:	230c      	movs	r3, #12
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e0d1      	b.n	80053ce <_svfiprintf_r+0x1d2>
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	616b      	str	r3, [r5, #20]
 800522e:	2300      	movs	r3, #0
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	2320      	movs	r3, #32
 8005234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005238:	2330      	movs	r3, #48	; 0x30
 800523a:	f04f 0901 	mov.w	r9, #1
 800523e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053e8 <_svfiprintf_r+0x1ec>
 8005246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524a:	4623      	mov	r3, r4
 800524c:	469a      	mov	sl, r3
 800524e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005252:	b10a      	cbz	r2, 8005258 <_svfiprintf_r+0x5c>
 8005254:	2a25      	cmp	r2, #37	; 0x25
 8005256:	d1f9      	bne.n	800524c <_svfiprintf_r+0x50>
 8005258:	ebba 0b04 	subs.w	fp, sl, r4
 800525c:	d00b      	beq.n	8005276 <_svfiprintf_r+0x7a>
 800525e:	465b      	mov	r3, fp
 8005260:	4622      	mov	r2, r4
 8005262:	4629      	mov	r1, r5
 8005264:	4638      	mov	r0, r7
 8005266:	f7ff ff6d 	bl	8005144 <__ssputs_r>
 800526a:	3001      	adds	r0, #1
 800526c:	f000 80aa 	beq.w	80053c4 <_svfiprintf_r+0x1c8>
 8005270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005272:	445a      	add	r2, fp
 8005274:	9209      	str	r2, [sp, #36]	; 0x24
 8005276:	f89a 3000 	ldrb.w	r3, [sl]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80a2 	beq.w	80053c4 <_svfiprintf_r+0x1c8>
 8005280:	2300      	movs	r3, #0
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800528a:	f10a 0a01 	add.w	sl, sl, #1
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	9307      	str	r3, [sp, #28]
 8005292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005296:	931a      	str	r3, [sp, #104]	; 0x68
 8005298:	4654      	mov	r4, sl
 800529a:	2205      	movs	r2, #5
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	4851      	ldr	r0, [pc, #324]	; (80053e8 <_svfiprintf_r+0x1ec>)
 80052a2:	f000 fa41 	bl	8005728 <memchr>
 80052a6:	9a04      	ldr	r2, [sp, #16]
 80052a8:	b9d8      	cbnz	r0, 80052e2 <_svfiprintf_r+0xe6>
 80052aa:	06d0      	lsls	r0, r2, #27
 80052ac:	bf44      	itt	mi
 80052ae:	2320      	movmi	r3, #32
 80052b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b4:	0711      	lsls	r1, r2, #28
 80052b6:	bf44      	itt	mi
 80052b8:	232b      	movmi	r3, #43	; 0x2b
 80052ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052be:	f89a 3000 	ldrb.w	r3, [sl]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d015      	beq.n	80052f2 <_svfiprintf_r+0xf6>
 80052c6:	4654      	mov	r4, sl
 80052c8:	2000      	movs	r0, #0
 80052ca:	f04f 0c0a 	mov.w	ip, #10
 80052ce:	9a07      	ldr	r2, [sp, #28]
 80052d0:	4621      	mov	r1, r4
 80052d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d6:	3b30      	subs	r3, #48	; 0x30
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d94e      	bls.n	800537a <_svfiprintf_r+0x17e>
 80052dc:	b1b0      	cbz	r0, 800530c <_svfiprintf_r+0x110>
 80052de:	9207      	str	r2, [sp, #28]
 80052e0:	e014      	b.n	800530c <_svfiprintf_r+0x110>
 80052e2:	eba0 0308 	sub.w	r3, r0, r8
 80052e6:	fa09 f303 	lsl.w	r3, r9, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	46a2      	mov	sl, r4
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	e7d2      	b.n	8005298 <_svfiprintf_r+0x9c>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	1d19      	adds	r1, r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	9103      	str	r1, [sp, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfbb      	ittet	lt
 80052fe:	425b      	neglt	r3, r3
 8005300:	f042 0202 	orrlt.w	r2, r2, #2
 8005304:	9307      	strge	r3, [sp, #28]
 8005306:	9307      	strlt	r3, [sp, #28]
 8005308:	bfb8      	it	lt
 800530a:	9204      	strlt	r2, [sp, #16]
 800530c:	7823      	ldrb	r3, [r4, #0]
 800530e:	2b2e      	cmp	r3, #46	; 0x2e
 8005310:	d10c      	bne.n	800532c <_svfiprintf_r+0x130>
 8005312:	7863      	ldrb	r3, [r4, #1]
 8005314:	2b2a      	cmp	r3, #42	; 0x2a
 8005316:	d135      	bne.n	8005384 <_svfiprintf_r+0x188>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	3402      	adds	r4, #2
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	9203      	str	r2, [sp, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfb8      	it	lt
 8005326:	f04f 33ff 	movlt.w	r3, #4294967295
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80053ec <_svfiprintf_r+0x1f0>
 8005330:	2203      	movs	r2, #3
 8005332:	4650      	mov	r0, sl
 8005334:	7821      	ldrb	r1, [r4, #0]
 8005336:	f000 f9f7 	bl	8005728 <memchr>
 800533a:	b140      	cbz	r0, 800534e <_svfiprintf_r+0x152>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	eba0 000a 	sub.w	r0, r0, sl
 8005342:	fa03 f000 	lsl.w	r0, r3, r0
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	3401      	adds	r4, #1
 800534a:	4303      	orrs	r3, r0
 800534c:	9304      	str	r3, [sp, #16]
 800534e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005352:	2206      	movs	r2, #6
 8005354:	4826      	ldr	r0, [pc, #152]	; (80053f0 <_svfiprintf_r+0x1f4>)
 8005356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535a:	f000 f9e5 	bl	8005728 <memchr>
 800535e:	2800      	cmp	r0, #0
 8005360:	d038      	beq.n	80053d4 <_svfiprintf_r+0x1d8>
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <_svfiprintf_r+0x1f8>)
 8005364:	bb1b      	cbnz	r3, 80053ae <_svfiprintf_r+0x1b2>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	3307      	adds	r3, #7
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	3308      	adds	r3, #8
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005374:	4433      	add	r3, r6
 8005376:	9309      	str	r3, [sp, #36]	; 0x24
 8005378:	e767      	b.n	800524a <_svfiprintf_r+0x4e>
 800537a:	460c      	mov	r4, r1
 800537c:	2001      	movs	r0, #1
 800537e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005382:	e7a5      	b.n	80052d0 <_svfiprintf_r+0xd4>
 8005384:	2300      	movs	r3, #0
 8005386:	f04f 0c0a 	mov.w	ip, #10
 800538a:	4619      	mov	r1, r3
 800538c:	3401      	adds	r4, #1
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	4620      	mov	r0, r4
 8005392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005396:	3a30      	subs	r2, #48	; 0x30
 8005398:	2a09      	cmp	r2, #9
 800539a:	d903      	bls.n	80053a4 <_svfiprintf_r+0x1a8>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0c5      	beq.n	800532c <_svfiprintf_r+0x130>
 80053a0:	9105      	str	r1, [sp, #20]
 80053a2:	e7c3      	b.n	800532c <_svfiprintf_r+0x130>
 80053a4:	4604      	mov	r4, r0
 80053a6:	2301      	movs	r3, #1
 80053a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ac:	e7f0      	b.n	8005390 <_svfiprintf_r+0x194>
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4638      	mov	r0, r7
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <_svfiprintf_r+0x1fc>)
 80053b8:	a904      	add	r1, sp, #16
 80053ba:	f3af 8000 	nop.w
 80053be:	1c42      	adds	r2, r0, #1
 80053c0:	4606      	mov	r6, r0
 80053c2:	d1d6      	bne.n	8005372 <_svfiprintf_r+0x176>
 80053c4:	89ab      	ldrh	r3, [r5, #12]
 80053c6:	065b      	lsls	r3, r3, #25
 80053c8:	f53f af2c 	bmi.w	8005224 <_svfiprintf_r+0x28>
 80053cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ce:	b01d      	add	sp, #116	; 0x74
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d4:	ab03      	add	r3, sp, #12
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	462a      	mov	r2, r5
 80053da:	4638      	mov	r0, r7
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <_svfiprintf_r+0x1fc>)
 80053de:	a904      	add	r1, sp, #16
 80053e0:	f000 f87c 	bl	80054dc <_printf_i>
 80053e4:	e7eb      	b.n	80053be <_svfiprintf_r+0x1c2>
 80053e6:	bf00      	nop
 80053e8:	0800666c 	.word	0x0800666c
 80053ec:	08006672 	.word	0x08006672
 80053f0:	08006676 	.word	0x08006676
 80053f4:	00000000 	.word	0x00000000
 80053f8:	08005145 	.word	0x08005145

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	4607      	mov	r7, r0
 800540a:	4293      	cmp	r3, r2
 800540c:	bfb8      	it	lt
 800540e:	4613      	movlt	r3, r2
 8005410:	6033      	str	r3, [r6, #0]
 8005412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005416:	460c      	mov	r4, r1
 8005418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc28      	bgt.n	8005496 <_printf_common+0x9a>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42d      	bmi.n	80054b0 <_printf_common+0xb4>
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d020      	beq.n	80054a4 <_printf_common+0xa8>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	68e5      	ldr	r5, [r4, #12]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf18      	it	ne
 800546e:	2500      	movne	r5, #0
 8005470:	6832      	ldr	r2, [r6, #0]
 8005472:	f04f 0600 	mov.w	r6, #0
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	bf08      	it	eq
 800547a:	1aad      	subeq	r5, r5, r2
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	bf08      	it	eq
 8005480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005484:	4293      	cmp	r3, r2
 8005486:	bfc4      	itt	gt
 8005488:	1a9b      	subgt	r3, r3, r2
 800548a:	18ed      	addgt	r5, r5, r3
 800548c:	341a      	adds	r4, #26
 800548e:	42b5      	cmp	r5, r6
 8005490:	d11a      	bne.n	80054c8 <_printf_common+0xcc>
 8005492:	2000      	movs	r0, #0
 8005494:	e008      	b.n	80054a8 <_printf_common+0xac>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4649      	mov	r1, r9
 800549c:	4638      	mov	r0, r7
 800549e:	47c0      	blx	r8
 80054a0:	3001      	adds	r0, #1
 80054a2:	d103      	bne.n	80054ac <_printf_common+0xb0>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7c4      	b.n	800543a <_printf_common+0x3e>
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	18e1      	adds	r1, r4, r3
 80054b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054be:	4422      	add	r2, r4
 80054c0:	3302      	adds	r3, #2
 80054c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c6:	e7c5      	b.n	8005454 <_printf_common+0x58>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4622      	mov	r2, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0e6      	beq.n	80054a4 <_printf_common+0xa8>
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7d9      	b.n	800548e <_printf_common+0x92>
	...

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	4691      	mov	r9, r2
 80054e4:	2f78      	cmp	r7, #120	; 0x78
 80054e6:	4680      	mov	r8, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	469a      	mov	sl, r3
 80054ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	; 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d9 	beq.w	80056b0 <_printf_i+0x1d4>
 80054fe:	2f58      	cmp	r7, #88	; 0x58
 8005500:	f000 80a4 	beq.w	800564c <_printf_i+0x170>
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	; (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	08005697 	.word	0x08005697
 800554c:	080055b9 	.word	0x080055b9
 8005550:	08005679 	.word	0x08005679
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056b9 	.word	0x080056b9
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	08005681 	.word	0x08005681
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e0a4      	b.n	80056d2 <_printf_i+0x1f6>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	f101 0304 	add.w	r3, r1, #4
 8005592:	d50a      	bpl.n	80055aa <_printf_i+0xce>
 8005594:	680e      	ldr	r6, [r1, #0]
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	2e00      	cmp	r6, #0
 800559a:	da03      	bge.n	80055a4 <_printf_i+0xc8>
 800559c:	232d      	movs	r3, #45	; 0x2d
 800559e:	4276      	negs	r6, r6
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	230a      	movs	r3, #10
 80055a6:	485e      	ldr	r0, [pc, #376]	; (8005720 <_printf_i+0x244>)
 80055a8:	e019      	b.n	80055de <_printf_i+0x102>
 80055aa:	680e      	ldr	r6, [r1, #0]
 80055ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	bf18      	it	ne
 80055b4:	b236      	sxthne	r6, r6
 80055b6:	e7ef      	b.n	8005598 <_printf_i+0xbc>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	6029      	str	r1, [r5, #0]
 80055c0:	0601      	lsls	r1, r0, #24
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0xec>
 80055c4:	681e      	ldr	r6, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0xf2>
 80055c8:	0646      	lsls	r6, r0, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0xe8>
 80055cc:	881e      	ldrh	r6, [r3, #0]
 80055ce:	2f6f      	cmp	r7, #111	; 0x6f
 80055d0:	bf0c      	ite	eq
 80055d2:	2308      	moveq	r3, #8
 80055d4:	230a      	movne	r3, #10
 80055d6:	4852      	ldr	r0, [pc, #328]	; (8005720 <_printf_i+0x244>)
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055de:	6865      	ldr	r5, [r4, #4]
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	bfa8      	it	ge
 80055e4:	6821      	ldrge	r1, [r4, #0]
 80055e6:	60a5      	str	r5, [r4, #8]
 80055e8:	bfa4      	itt	ge
 80055ea:	f021 0104 	bicge.w	r1, r1, #4
 80055ee:	6021      	strge	r1, [r4, #0]
 80055f0:	b90e      	cbnz	r6, 80055f6 <_printf_i+0x11a>
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	d04d      	beq.n	8005692 <_printf_i+0x1b6>
 80055f6:	4615      	mov	r5, r2
 80055f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fc:	fb03 6711 	mls	r7, r3, r1, r6
 8005600:	5dc7      	ldrb	r7, [r0, r7]
 8005602:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005606:	4637      	mov	r7, r6
 8005608:	42bb      	cmp	r3, r7
 800560a:	460e      	mov	r6, r1
 800560c:	d9f4      	bls.n	80055f8 <_printf_i+0x11c>
 800560e:	2b08      	cmp	r3, #8
 8005610:	d10b      	bne.n	800562a <_printf_i+0x14e>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	07de      	lsls	r6, r3, #31
 8005616:	d508      	bpl.n	800562a <_printf_i+0x14e>
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	6861      	ldr	r1, [r4, #4]
 800561c:	4299      	cmp	r1, r3
 800561e:	bfde      	ittt	le
 8005620:	2330      	movle	r3, #48	; 0x30
 8005622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800562a:	1b52      	subs	r2, r2, r5
 800562c:	6122      	str	r2, [r4, #16]
 800562e:	464b      	mov	r3, r9
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f8cd a000 	str.w	sl, [sp]
 8005638:	aa03      	add	r2, sp, #12
 800563a:	f7ff fedf 	bl	80053fc <_printf_common>
 800563e:	3001      	adds	r0, #1
 8005640:	d14c      	bne.n	80056dc <_printf_i+0x200>
 8005642:	f04f 30ff 	mov.w	r0, #4294967295
 8005646:	b004      	add	sp, #16
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	4834      	ldr	r0, [pc, #208]	; (8005720 <_printf_i+0x244>)
 800564e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005652:	6829      	ldr	r1, [r5, #0]
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	f851 6b04 	ldr.w	r6, [r1], #4
 800565a:	6029      	str	r1, [r5, #0]
 800565c:	061d      	lsls	r5, r3, #24
 800565e:	d514      	bpl.n	800568a <_printf_i+0x1ae>
 8005660:	07df      	lsls	r7, r3, #31
 8005662:	bf44      	itt	mi
 8005664:	f043 0320 	orrmi.w	r3, r3, #32
 8005668:	6023      	strmi	r3, [r4, #0]
 800566a:	b91e      	cbnz	r6, 8005674 <_printf_i+0x198>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	f023 0320 	bic.w	r3, r3, #32
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	2310      	movs	r3, #16
 8005676:	e7af      	b.n	80055d8 <_printf_i+0xfc>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	f043 0320 	orr.w	r3, r3, #32
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	2378      	movs	r3, #120	; 0x78
 8005682:	4828      	ldr	r0, [pc, #160]	; (8005724 <_printf_i+0x248>)
 8005684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005688:	e7e3      	b.n	8005652 <_printf_i+0x176>
 800568a:	0659      	lsls	r1, r3, #25
 800568c:	bf48      	it	mi
 800568e:	b2b6      	uxthmi	r6, r6
 8005690:	e7e6      	b.n	8005660 <_printf_i+0x184>
 8005692:	4615      	mov	r5, r2
 8005694:	e7bb      	b.n	800560e <_printf_i+0x132>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	6826      	ldr	r6, [r4, #0]
 800569a:	1d18      	adds	r0, r3, #4
 800569c:	6961      	ldr	r1, [r4, #20]
 800569e:	6028      	str	r0, [r5, #0]
 80056a0:	0635      	lsls	r5, r6, #24
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	d501      	bpl.n	80056aa <_printf_i+0x1ce>
 80056a6:	6019      	str	r1, [r3, #0]
 80056a8:	e002      	b.n	80056b0 <_printf_i+0x1d4>
 80056aa:	0670      	lsls	r0, r6, #25
 80056ac:	d5fb      	bpl.n	80056a6 <_printf_i+0x1ca>
 80056ae:	8019      	strh	r1, [r3, #0]
 80056b0:	2300      	movs	r3, #0
 80056b2:	4615      	mov	r5, r2
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	e7ba      	b.n	800562e <_printf_i+0x152>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	2100      	movs	r1, #0
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	602a      	str	r2, [r5, #0]
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f82f 	bl	8005728 <memchr>
 80056ca:	b108      	cbz	r0, 80056d0 <_printf_i+0x1f4>
 80056cc:	1b40      	subs	r0, r0, r5
 80056ce:	6060      	str	r0, [r4, #4]
 80056d0:	6863      	ldr	r3, [r4, #4]
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	2300      	movs	r3, #0
 80056d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056da:	e7a8      	b.n	800562e <_printf_i+0x152>
 80056dc:	462a      	mov	r2, r5
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	47d0      	blx	sl
 80056e6:	3001      	adds	r0, #1
 80056e8:	d0ab      	beq.n	8005642 <_printf_i+0x166>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	079b      	lsls	r3, r3, #30
 80056ee:	d413      	bmi.n	8005718 <_printf_i+0x23c>
 80056f0:	68e0      	ldr	r0, [r4, #12]
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	4298      	cmp	r0, r3
 80056f6:	bfb8      	it	lt
 80056f8:	4618      	movlt	r0, r3
 80056fa:	e7a4      	b.n	8005646 <_printf_i+0x16a>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4632      	mov	r2, r6
 8005700:	4649      	mov	r1, r9
 8005702:	4640      	mov	r0, r8
 8005704:	47d0      	blx	sl
 8005706:	3001      	adds	r0, #1
 8005708:	d09b      	beq.n	8005642 <_printf_i+0x166>
 800570a:	3501      	adds	r5, #1
 800570c:	68e3      	ldr	r3, [r4, #12]
 800570e:	9903      	ldr	r1, [sp, #12]
 8005710:	1a5b      	subs	r3, r3, r1
 8005712:	42ab      	cmp	r3, r5
 8005714:	dcf2      	bgt.n	80056fc <_printf_i+0x220>
 8005716:	e7eb      	b.n	80056f0 <_printf_i+0x214>
 8005718:	2500      	movs	r5, #0
 800571a:	f104 0619 	add.w	r6, r4, #25
 800571e:	e7f5      	b.n	800570c <_printf_i+0x230>
 8005720:	0800667d 	.word	0x0800667d
 8005724:	0800668e 	.word	0x0800668e

08005728 <memchr>:
 8005728:	4603      	mov	r3, r0
 800572a:	b510      	push	{r4, lr}
 800572c:	b2c9      	uxtb	r1, r1
 800572e:	4402      	add	r2, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	4618      	mov	r0, r3
 8005734:	d101      	bne.n	800573a <memchr+0x12>
 8005736:	2000      	movs	r0, #0
 8005738:	e003      	b.n	8005742 <memchr+0x1a>
 800573a:	7804      	ldrb	r4, [r0, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	428c      	cmp	r4, r1
 8005740:	d1f6      	bne.n	8005730 <memchr+0x8>
 8005742:	bd10      	pop	{r4, pc}

08005744 <memmove>:
 8005744:	4288      	cmp	r0, r1
 8005746:	b510      	push	{r4, lr}
 8005748:	eb01 0402 	add.w	r4, r1, r2
 800574c:	d902      	bls.n	8005754 <memmove+0x10>
 800574e:	4284      	cmp	r4, r0
 8005750:	4623      	mov	r3, r4
 8005752:	d807      	bhi.n	8005764 <memmove+0x20>
 8005754:	1e43      	subs	r3, r0, #1
 8005756:	42a1      	cmp	r1, r4
 8005758:	d008      	beq.n	800576c <memmove+0x28>
 800575a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800575e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005762:	e7f8      	b.n	8005756 <memmove+0x12>
 8005764:	4601      	mov	r1, r0
 8005766:	4402      	add	r2, r0
 8005768:	428a      	cmp	r2, r1
 800576a:	d100      	bne.n	800576e <memmove+0x2a>
 800576c:	bd10      	pop	{r4, pc}
 800576e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005776:	e7f7      	b.n	8005768 <memmove+0x24>

08005778 <_realloc_r>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	4680      	mov	r8, r0
 800577e:	4614      	mov	r4, r2
 8005780:	460e      	mov	r6, r1
 8005782:	b921      	cbnz	r1, 800578e <_realloc_r+0x16>
 8005784:	4611      	mov	r1, r2
 8005786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800578a:	f7ff bb79 	b.w	8004e80 <_malloc_r>
 800578e:	b92a      	cbnz	r2, 800579c <_realloc_r+0x24>
 8005790:	f7ff fc90 	bl	80050b4 <_free_r>
 8005794:	4625      	mov	r5, r4
 8005796:	4628      	mov	r0, r5
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	f000 f81b 	bl	80057d6 <_malloc_usable_size_r>
 80057a0:	4284      	cmp	r4, r0
 80057a2:	4607      	mov	r7, r0
 80057a4:	d802      	bhi.n	80057ac <_realloc_r+0x34>
 80057a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057aa:	d812      	bhi.n	80057d2 <_realloc_r+0x5a>
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7ff fb66 	bl	8004e80 <_malloc_r>
 80057b4:	4605      	mov	r5, r0
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0ed      	beq.n	8005796 <_realloc_r+0x1e>
 80057ba:	42bc      	cmp	r4, r7
 80057bc:	4622      	mov	r2, r4
 80057be:	4631      	mov	r1, r6
 80057c0:	bf28      	it	cs
 80057c2:	463a      	movcs	r2, r7
 80057c4:	f7ff fb26 	bl	8004e14 <memcpy>
 80057c8:	4631      	mov	r1, r6
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fc72 	bl	80050b4 <_free_r>
 80057d0:	e7e1      	b.n	8005796 <_realloc_r+0x1e>
 80057d2:	4635      	mov	r5, r6
 80057d4:	e7df      	b.n	8005796 <_realloc_r+0x1e>

080057d6 <_malloc_usable_size_r>:
 80057d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057da:	1f18      	subs	r0, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfbc      	itt	lt
 80057e0:	580b      	ldrlt	r3, [r1, r0]
 80057e2:	18c0      	addlt	r0, r0, r3
 80057e4:	4770      	bx	lr
	...

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
