
ETH_PRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc8  08012aac  08012aac  00022aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015874  08015874  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08015874  08015874  00025874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801587c  0801587c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801587c  0801587c  0002587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015880  08015880  00025880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08015884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b478  20000080  08015904  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000b4f8  08015904  0003b4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae7a  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007132  00000000  00000000  0006af2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00072060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  000739a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4e4  00000000  00000000  000751c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a257  00000000  00000000  000846a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107563  00000000  00000000  000ae8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5e5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e10  00000000  00000000  001b5eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012a94 	.word	0x08012a94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08012a94 	.word	0x08012a94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d013      	beq.n	80006bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800069c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00b      	beq.n	80006bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a4:	e000      	b.n	80006a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file,char *ptr, int len)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
	int i=0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) ITM_SendChar((*ptr++));
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x2a>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffc7 	bl	800067c <ITM_SendChar>
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x16>
	return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800070c:	f7ff ff4c 	bl	80005a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000710:	f7ff ff70 	bl	80005f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fa3c 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f816 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f880 	bl	8000820 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000720:	f003 f972 	bl	8003a08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <main+0x34>)
 8000726:	2100      	movs	r1, #0
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <main+0x38>)
 800072a:	f003 f9ff 	bl	8003b2c <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <main+0x3c>)
 8000732:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000734:	f003 f99c 	bl	8003a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x30>
 800073a:	bf00      	nop
 800073c:	080155d0 	.word	0x080155d0
 8000740:	080008e5 	.word	0x080008e5
 8000744:	20004c08 	.word	0x20004c08

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f011 fa07 	bl	8011b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a24      	ldr	r2, [pc, #144]	; (800081c <SystemClock_Config+0xd4>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007b4:	23d8      	movs	r3, #216	; 0xd8
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ff19 	bl	80025fc <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f898 	bl	8000904 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d4:	f001 fec2 	bl	800255c <HAL_PWREx_EnableOverDrive>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007de:	f000 f891 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2107      	movs	r1, #7
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f99f 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800080c:	f000 f87a 	bl	8000904 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <MX_GPIO_Init+0xbc>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a22      	ldr	r2, [pc, #136]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0xbc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_GPIO_Init+0xbc>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_GPIO_Init+0xbc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_GPIO_Init+0xbc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <MX_GPIO_Init+0xbc>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_GPIO_Init+0xbc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ping_led_GPIO_Port, Ping_led_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0xc0>)
 80008b4:	f001 fe38 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ping_led_Pin */
  GPIO_InitStruct.Pin = Ping_led_Pin;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ping_led_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xc0>)
 80008d0:	f001 fc7e 	bl	80021d0 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008ec:	f002 fb04 	bl	8002ef8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  printf("LWIP Initialize...\r");
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <StartDefaultTask+0x1c>)
 80008f2:	f011 f99d 	bl	8011c30 <iprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f003 f9be 	bl	8003c78 <osDelay>
 80008fc:	e7fb      	b.n	80008f6 <StartDefaultTask+0x12>
 80008fe:	bf00      	nop
 8000900:	08012ab8 	.word	0x08012ab8

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fa84 	bl	8000e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f944 	bl	8000c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000994:	f005 fe2e 	bl	80065f4 <xTaskGetSchedulerState>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d001      	beq.n	80009a2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800099e:	f006 fd0b 	bl	80073b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <ETH_IRQHandler+0x10>)
 80009ae:	f000 fe6d 	bl	800168c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20006558 	.word	0x20006558

080009bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_kill>:

int _kill(int pid, int sig)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <_kill+0x20>)
 80009d8:	2216      	movs	r2, #22
 80009da:	601a      	str	r2, [r3, #0]
	return -1;
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	2000b4e4 	.word	0x2000b4e4

080009f0 <_exit>:

void _exit (int status)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffe5 	bl	80009cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a02:	e7fe      	b.n	8000a02 <_exit+0x12>

08000a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
	}

return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d205      	bcs.n	8000ae4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <_sbrk+0x6c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20050000 	.word	0x20050000
 8000b08:	00004000 	.word	0x00004000
 8000b0c:	2000009c 	.word	0x2000009c
 8000b10:	2000b4f8 	.word	0x2000b4f8
 8000b14:	2000b4e4 	.word	0x2000b4e4

08000b18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd7 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f010 ffbb 	bl	8011ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fdcb 	bl	8000708 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b80:	08015884 	.word	0x08015884
  ldr r2, =_sbss
 8000b84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b88:	2000b4f8 	.word	0x2000b4f8

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f94f 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff feb0 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f967 	bl	8000eae <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f92f 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000004 	.word	0x20000004

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20004c0c 	.word	0x20004c0c

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20004c0c 	.word	0x20004c0c

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	05fa0000 	.word	0x05fa0000

08000cec <__NVIC_GetPriorityGrouping>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000ed8:	4ba9      	ldr	r3, [pc, #676]	; (8001180 <HAL_ETH_Init+0x2b8>)
 8000eda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e181      	b.n	80011f2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f002 f95a 	bl	80031bc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b9e      	ldr	r3, [pc, #632]	; (8001184 <HAL_ETH_Init+0x2bc>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	4a9d      	ldr	r2, [pc, #628]	; (8001184 <HAL_ETH_Init+0x2bc>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6453      	str	r3, [r2, #68]	; 0x44
 8000f14:	4b9b      	ldr	r3, [pc, #620]	; (8001184 <HAL_ETH_Init+0x2bc>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f20:	4b99      	ldr	r3, [pc, #612]	; (8001188 <HAL_ETH_Init+0x2c0>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	4a98      	ldr	r2, [pc, #608]	; (8001188 <HAL_ETH_Init+0x2c0>)
 8000f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f2a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f2c:	4b96      	ldr	r3, [pc, #600]	; (8001188 <HAL_ETH_Init+0x2c0>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4994      	ldr	r1, [pc, #592]	; (8001188 <HAL_ETH_Init+0x2c0>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f50:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f52:	f7ff fe77 	bl	8000c44 <HAL_GetTick>
 8000f56:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f58:	e011      	b.n	8000f7e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f5a:	f7ff fe73 	bl	8000c44 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f68:	d909      	bls.n	8000f7e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e139      	b.n	80011f2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e4      	bne.n	8000f5a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f023 031c 	bic.w	r3, r3, #28
 8000f9e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fa0:	f001 ff9e 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8000fa4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4a78      	ldr	r2, [pc, #480]	; (800118c <HAL_ETH_Init+0x2c4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d908      	bls.n	8000fc0 <HAL_ETH_Init+0xf8>
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4a77      	ldr	r2, [pc, #476]	; (8001190 <HAL_ETH_Init+0x2c8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d804      	bhi.n	8000fc0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e027      	b.n	8001010 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	4a73      	ldr	r2, [pc, #460]	; (8001190 <HAL_ETH_Init+0x2c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d908      	bls.n	8000fda <HAL_ETH_Init+0x112>
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <HAL_ETH_Init+0x2b8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d204      	bcs.n	8000fda <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f043 030c 	orr.w	r3, r3, #12
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	e01a      	b.n	8001010 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4a68      	ldr	r2, [pc, #416]	; (8001180 <HAL_ETH_Init+0x2b8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d303      	bcc.n	8000fea <HAL_ETH_Init+0x122>
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4a6b      	ldr	r2, [pc, #428]	; (8001194 <HAL_ETH_Init+0x2cc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d911      	bls.n	800100e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4a69      	ldr	r2, [pc, #420]	; (8001194 <HAL_ETH_Init+0x2cc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d908      	bls.n	8001004 <HAL_ETH_Init+0x13c>
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4a68      	ldr	r2, [pc, #416]	; (8001198 <HAL_ETH_Init+0x2d0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d804      	bhi.n	8001004 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e005      	b.n	8001010 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	e000      	b.n	8001010 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800100e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001018:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800101c:	2100      	movs	r1, #0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fc17 	bl	8001852 <HAL_ETH_WritePHYRegister>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fdcd 	bl	8001bd0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e0d7      	b.n	80011f2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001042:	20ff      	movs	r0, #255	; 0xff
 8001044:	f7ff fe0a 	bl	8000c5c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a5 	beq.w	800119c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001052:	f7ff fdf7 	bl	8000c44 <HAL_GetTick>
 8001056:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	461a      	mov	r2, r3
 800105e:	2101      	movs	r1, #1
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fb8e 	bl	8001782 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001066:	f7ff fded 	bl	8000c44 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d90f      	bls.n	8001098 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fda6 	bl	8001bd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0ac      	b.n	80011f2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0da      	beq.n	8001058 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80010a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fbd2 	bl	8001852 <HAL_ETH_WritePHYRegister>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fd88 	bl	8001bd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010c8:	2301      	movs	r3, #1
 80010ca:	e092      	b.n	80011f2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80010cc:	f7ff fdba 	bl	8000c44 <HAL_GetTick>
 80010d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	461a      	mov	r2, r3
 80010d8:	2101      	movs	r1, #1
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fb51 	bl	8001782 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010e0:	f7ff fdb0 	bl	8000c44 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d90f      	bls.n	8001112 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010f6:	6939      	ldr	r1, [r7, #16]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fd69 	bl	8001bd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e06f      	b.n	80011f2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0da      	beq.n	80010d2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	461a      	mov	r2, r3
 8001122:	2110      	movs	r1, #16
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fb2c 	bl	8001782 <HAL_ETH_ReadPHYRegister>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fd4a 	bl	8001bd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001144:	2301      	movs	r3, #1
 8001146:	e054      	b.n	80011f2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e002      	b.n	8001162 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	e035      	b.n	80011e0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e030      	b.n	80011e0 <HAL_ETH_Init+0x318>
 800117e:	bf00      	nop
 8001180:	03938700 	.word	0x03938700
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	01312cff 	.word	0x01312cff
 8001190:	02160ebf 	.word	0x02160ebf
 8001194:	05f5e0ff 	.word	0x05f5e0ff
 8001198:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fb4c 	bl	8001852 <HAL_ETH_WritePHYRegister>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fd02 	bl	8001bd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00c      	b.n	80011f2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011d8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011dc:	f7ff fd3e 	bl	8000c5c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fcf4 	bl	8001bd0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop

080011fc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ETH_DMATxDescListInit+0x20>
 8001218:	2302      	movs	r3, #2
 800121a:	e052      	b.n	80012c2 <HAL_ETH_DMATxDescListInit+0xc6>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e030      	b.n	800129a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	015b      	lsls	r3, r3, #5
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001248:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	461a      	mov	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	d208      	bcs.n	800128e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	461a      	mov	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	e002      	b.n	8001294 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3ca      	bcc.n	8001238 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f241 0310 	movw	r3, #4112	; 0x1010
 80012ac:	440b      	add	r3, r1
 80012ae:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b087      	sub	sp, #28
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ETH_DMARxDescListInit+0x20>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e056      	b.n	800139c <HAL_ETH_DMARxDescListInit+0xce>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e034      	b.n	8001374 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800131a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001322:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	461a      	mov	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d105      	bne.n	800134c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	429a      	cmp	r2, r3
 8001354:	d208      	bcs.n	8001368 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	461a      	mov	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e002      	b.n	800136e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d3c6      	bcc.n	800130a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	f241 030c 	movw	r3, #4108	; 0x100c
 8001386:	440b      	add	r3, r1
 8001388:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ETH_TransmitFrame+0x24>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e0cd      	b.n	8001568 <HAL_ETH_TransmitFrame+0x1c0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0b8      	b.n	8001568 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da09      	bge.n	8001414 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2212      	movs	r2, #18
 8001404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0a9      	b.n	8001568 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800141a:	4293      	cmp	r3, r2
 800141c:	d915      	bls.n	800144a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_ETH_TransmitFrame+0x1cc>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0a9b      	lsrs	r3, r3, #10
 8001428:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_ETH_TransmitFrame+0x1cc>)
 800142e:	fba3 1302 	umull	r1, r3, r3, r2
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e001      	b.n	800144e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d11c      	bne.n	800148e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001462:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800146e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800147e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
 800148c:	e04b      	b.n	8001526 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	e044      	b.n	800151e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014c2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d116      	bne.n	80014fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <HAL_ETH_TransmitFrame+0x1d0>)
 80014e2:	fb02 f203 	mul.w	r2, r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80014ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014fa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	429a      	cmp	r2, r3
 8001524:	d3b6      	bcc.n	8001494 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f241 0314 	movw	r3, #4116	; 0x1014
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00d      	beq.n	8001556 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001542:	4413      	add	r3, r2
 8001544:	2204      	movs	r2, #4
 8001546:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001550:	4413      	add	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	ac02b00b 	.word	0xac02b00b
 8001578:	fffffa0c 	.word	0xfffffa0c

0800157c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001592:	2302      	movs	r3, #2
 8001594:	e074      	b.n	8001680 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015a6:	e05a      	b.n	800165e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015bc:	d10d      	bne.n	80015da <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
 80015d8:	e041      	b.n	800165e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10b      	bne.n	8001600 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
 80015fe:	e02e      	b.n	800165e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	2b01      	cmp	r3, #1
 8001618:	d103      	bne.n	8001622 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800162e:	1f1a      	subs	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e010      	b.n	8001680 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db02      	blt.n	800166e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d99c      	bls.n	80015a8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f241 0314 	movw	r3, #4116	; 0x1014
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	d112      	bne.n	80016ce <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 fe47 	bl	800333c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f241 0314 	movw	r3, #4116	; 0x1014
 80016b6:	4413      	add	r3, r2
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016cc:	e01b      	b.n	8001706 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f241 0314 	movw	r3, #4116	; 0x1014
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d111      	bne.n	8001706 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f839 	bl	800175a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80016f0:	4413      	add	r3, r2
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f241 0314 	movw	r3, #4116	; 0x1014
 800170e:	4413      	add	r3, r2
 8001710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001714:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f241 0314 	movw	r3, #4116	; 0x1014
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800172a:	d112      	bne.n	8001752 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f81e 	bl	800176e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f241 0314 	movw	r3, #4116	; 0x1014
 800173a:	4413      	add	r3, r2
 800173c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001740:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	460b      	mov	r3, r1
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b82      	cmp	r3, #130	; 0x82
 80017a2:	d101      	bne.n	80017a8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017a4:	2302      	movs	r3, #2
 80017a6:	e050      	b.n	800184a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2282      	movs	r2, #130	; 0x82
 80017ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 031c 	and.w	r3, r3, #28
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8a1b      	ldrh	r3, [r3, #16]
 80017c4:	02db      	lsls	r3, r3, #11
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017ce:	897b      	ldrh	r3, [r7, #10]
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f023 0302 	bic.w	r3, r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017f4:	f7ff fa26 	bl	8000c44 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017fa:	e015      	b.n	8001828 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017fc:	f7ff fa22 	bl	8000c44 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d309      	bcc.n	8001820 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e014      	b.n	800184a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e4      	bne.n	80017fc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	460b      	mov	r3, r1
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b42      	cmp	r3, #66	; 0x42
 8001872:	d101      	bne.n	8001878 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
 8001876:	e04e      	b.n	8001916 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2242      	movs	r2, #66	; 0x42
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 031c 	and.w	r3, r3, #28
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8a1b      	ldrh	r3, [r3, #16]
 8001894:	02db      	lsls	r3, r3, #11
 8001896:	b29b      	uxth	r3, r3
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018ce:	f7ff f9b9 	bl	8000c44 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d4:	e015      	b.n	8001902 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018d6:	f7ff f9b5 	bl	8000c44 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d309      	bcc.n	80018fa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e00d      	b.n	8001916 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e4      	bne.n	80018d6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ETH_Start+0x16>
 8001930:	2302      	movs	r3, #2
 8001932:	e01f      	b.n	8001974 <HAL_ETH_Start+0x56>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fb45 	bl	8001fd4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fb7c 	bl	8002048 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fc13 	bl	800217c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fbb0 	bl	80020bc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fbdd 	bl	800211c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ETH_Stop+0x16>
 800198e:	2302      	movs	r3, #2
 8001990:	e01f      	b.n	80019d2 <HAL_ETH_Stop+0x56>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fba2 	bl	80020ec <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fbcf 	bl	800214c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fb67 	bl	8002082 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fbe1 	bl	800217c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fb27 	bl	800200e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ETH_ConfigMAC+0x1c>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e0e4      	b.n	8001bc2 <HAL_ETH_ConfigMAC+0x1e6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80b1 	beq.w	8001b72 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_ETH_ConfigMAC+0x1f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a28:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a2e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a34:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a3a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a40:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a46:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a4c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a52:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001a58:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001a5e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001a64:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001a6a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff f8ea 	bl	8000c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a98:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001a9e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001aa4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001aaa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ab0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ab6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001ac2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ac4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff f8c4 	bl	8000c5c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ae4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aee:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b0c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b12:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b18:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b1e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b24:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff f88d 	bl	8000c5c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff f87a 	bl	8000c5c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	61da      	str	r2, [r3, #28]
 8001b70:	e01e      	b.n	8001bb0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b80:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff f85a 	bl	8000c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	ff20810f 	.word	0xff20810f

08001bd0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0b0      	sub	sp, #192	; 0xc0
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c1c:	e001      	b.n	8001c22 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c26:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca8:	4bab      	ldr	r3, [pc, #684]	; (8001f58 <ETH_MACDMAConfig+0x388>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cb4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001cb8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001cbc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001cc2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001cc6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001cca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001cd0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001cd4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001cd8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001cdc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ce0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001ce4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ce6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7fe ffa9 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d12:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d18:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d1c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d22:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d28:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d2e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d34:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d40:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d42:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7fe ff84 	bl	8000c5c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d66:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d70:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d80:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d84:	4013      	ands	r3, r2
 8001d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d8e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d94:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001d9a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001da0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001da6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001dac:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7fe ff45 	bl	8000c5c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dda:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ddc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001de0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe ff30 	bl	8000c5c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e04:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e18:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001e62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <ETH_MACDMAConfig+0x38c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e6e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e70:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e72:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e74:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e76:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001e78:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001e7a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001e7c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001e7e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001e80:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001e82:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001e84:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001e86:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e8a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001e8e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7fe fece 	bl	8000c5c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ec8:	4413      	add	r3, r2
 8001eca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ece:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ed4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001ed8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001edc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001ee0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001ee6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001eea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7fe fea7 	bl	8000c5c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d10d      	bne.n	8001f40 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f2c:	4413      	add	r3, r2
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6811      	ldr	r1, [r2, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <ETH_MACDMAConfig+0x390>)
 8001f36:	431a      	orrs	r2, r3
 8001f38:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f3c:	440b      	add	r3, r1
 8001f3e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f80b 	bl	8001f64 <ETH_MACAddressConfig>
}
 8001f4e:	bf00      	nop
 8001f50:	37c0      	adds	r7, #192	; 0xc0
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	ff20810f 	.word	0xff20810f
 8001f5c:	f8de3f23 	.word	0xf8de3f23
 8001f60:	00010040 	.word	0x00010040

08001f64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3305      	adds	r3, #5
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	3204      	adds	r2, #4
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <ETH_MACAddressConfig+0x68>)
 8001f86:	4413      	add	r3, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3303      	adds	r3, #3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <ETH_MACAddressConfig+0x6c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40028040 	.word	0x40028040
 8001fd0:	40028044 	.word	0x40028044

08001fd4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7fe fe2f 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0208 	bic.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7fe fe12 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0204 	orr.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800206c:	2001      	movs	r0, #1
 800206e:	f7fe fdf5 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0204 	bic.w	r2, r2, #4
 800209c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe fdd8 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6811      	ldr	r1, [r2, #0]
 80020d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020dc:	440b      	add	r3, r1
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020fc:	4413      	add	r3, r2
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6811      	ldr	r1, [r2, #0]
 8002104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002108:	f241 0318 	movw	r3, #4120	; 0x1018
 800210c:	440b      	add	r3, r1
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f241 0318 	movw	r3, #4120	; 0x1018
 800212c:	4413      	add	r3, r2
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6811      	ldr	r1, [r2, #0]
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	f241 0318 	movw	r3, #4120	; 0x1018
 800213c:	440b      	add	r3, r1
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f241 0318 	movw	r3, #4120	; 0x1018
 800215c:	4413      	add	r3, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6811      	ldr	r1, [r2, #0]
 8002164:	f023 0202 	bic.w	r2, r3, #2
 8002168:	f241 0318 	movw	r3, #4120	; 0x1018
 800216c:	440b      	add	r3, r1
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002190:	4413      	add	r3, r2
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6811      	ldr	r1, [r2, #0]
 8002198:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800219c:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a0:	440b      	add	r3, r1
 80021a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021ac:	4413      	add	r3, r2
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe fd52 	bl	8000c5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c2:	440b      	add	r3, r1
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e175      	b.n	80024dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8164 	bne.w	80024d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x56>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80be 	beq.w	80024d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_GPIO_Init+0x324>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002372:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d037      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_GPIO_Init+0x334>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a54      	ldr	r2, [pc, #336]	; (800250c <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a53      	ldr	r2, [pc, #332]	; (8002510 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a51      	ldr	r2, [pc, #324]	; (8002518 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x350>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x21a>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e012      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e010      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_GPIO_Init+0x354>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_GPIO_Init+0x354>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae86 	bls.w	80021f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40022000 	.word	0x40022000
 8002520:	40022400 	.word	0x40022400
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800258a:	f7fe fb5b 	bl	8000c44 <HAL_GetTick>
 800258e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002590:	e009      	b.n	80025a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002592:	f7fe fb57 	bl	8000c44 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a0:	d901      	bls.n	80025a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e022      	b.n	80025ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d1ee      	bne.n	8002592 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c0:	f7fe fb40 	bl	8000c44 <HAL_GetTick>
 80025c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025c6:	e009      	b.n	80025dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025c8:	f7fe fb3c 	bl	8000c44 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d6:	d901      	bls.n	80025dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e007      	b.n	80025ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e8:	d1ee      	bne.n	80025c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e291      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8087 	beq.w	800272e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002620:	4b96      	ldr	r3, [pc, #600]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b04      	cmp	r3, #4
 800262a:	d00c      	beq.n	8002646 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262c:	4b93      	ldr	r3, [pc, #588]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d112      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
 8002638:	4b90      	ldr	r3, [pc, #576]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002644:	d10b      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002646:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d06c      	beq.n	800272c <HAL_RCC_OscConfig+0x130>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d168      	bne.n	800272c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e26b      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x7a>
 8002668:	4b84      	ldr	r3, [pc, #528]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a83      	ldr	r2, [pc, #524]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e02e      	b.n	80026d4 <HAL_RCC_OscConfig+0xd8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x9c>
 800267e:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7e      	ldr	r2, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b7c      	ldr	r3, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7b      	ldr	r2, [pc, #492]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xd8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026a2:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xd8>
 80026bc:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b6c      	ldr	r3, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6b      	ldr	r2, [pc, #428]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fab2 	bl	8000c44 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe faae 	bl	8000c44 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e21f      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xe8>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fa9e 	bl	8000c44 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fa9a 	bl	8000c44 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e20b      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x110>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d069      	beq.n	800280e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273a:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11c      	bne.n	800278c <HAL_RCC_OscConfig+0x190>
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x17a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1df      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	493d      	ldr	r1, [pc, #244]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e040      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fa50 	bl	8000c44 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fa4c 	bl	8000c44 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1bd      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4929      	ldr	r1, [pc, #164]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
 80027da:	e018      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fa2c 	bl	8000c44 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe fa28 	bl	8000c44 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e199      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d038      	beq.n	800288c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fa09 	bl	8000c44 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fa05 	bl	8000c44 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e176      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x23a>
 8002854:	e01a      	b.n	800288c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe f9ef 	bl	8000c44 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7fe f9eb 	bl	8000c44 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d903      	bls.n	8002880 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e15c      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
 800287c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a4 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe f9b3 	bl	8000c44 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe f9af 	bl	8000c44 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e120      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x31a>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x376>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x33c>
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x376>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x35e>
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a5d      	ldr	r2, [pc, #372]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x376>
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe f963 	bl	8000c44 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f95f 	bl	8000c44 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0ce      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x386>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7fe f94d 	bl	8000c44 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe f949 	bl	8000c44 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a4 	beq.w	8002b34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d06b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d149      	bne.n	8002a94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a30      	ldr	r2, [pc, #192]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe f91a 	bl	8000c44 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe f916 	bl	8000c44 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e087      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	4313      	orrs	r3, r2
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f8ea 	bl	8000c44 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe f8e6 	bl	8000c44 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e057      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x478>
 8002a92:	e04f      	b.n	8002b34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe f8d0 	bl	8000c44 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe f8cc 	bl	8000c44 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e03d      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4ac>
 8002ac6:	e035      	b.n	8002b34 <HAL_RCC_OscConfig+0x538>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x544>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d028      	beq.n	8002b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d121      	bne.n	8002b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d11a      	bne.n	8002b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d111      	bne.n	8002b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe f804 	bl	8000c44 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe f800 	bl	8000c44 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 020f 	bic.w	r2, r3, #15
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1d4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ff60 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	080155f4 	.word	0x080155f4
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d34:	4b67      	ldr	r3, [pc, #412]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f200 80bd 	bhi.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4e:	e0b7      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d52:	60bb      	str	r3, [r7, #8]
      break;
 8002d54:	e0b7      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d56:	4b61      	ldr	r3, [pc, #388]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d58:	60bb      	str	r3, [r7, #8]
      break;
 8002d5a:	e0b4      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d66:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04d      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	ea02 0800 	and.w	r8, r2, r0
 8002d8a:	ea03 0901 	and.w	r9, r3, r1
 8002d8e:	4640      	mov	r0, r8
 8002d90:	4649      	mov	r1, r9
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	014b      	lsls	r3, r1, #5
 8002d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002da0:	0142      	lsls	r2, r0, #5
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	ebb0 0008 	subs.w	r0, r0, r8
 8002daa:	eb61 0109 	sbc.w	r1, r1, r9
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	018b      	lsls	r3, r1, #6
 8002db8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dbc:	0182      	lsls	r2, r0, #6
 8002dbe:	1a12      	subs	r2, r2, r0
 8002dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	00d9      	lsls	r1, r3, #3
 8002dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dd2:	00d0      	lsls	r0, r2, #3
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	eb12 0208 	adds.w	r2, r2, r8
 8002ddc:	eb43 0309 	adc.w	r3, r3, r9
 8002de0:	f04f 0000 	mov.w	r0, #0
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	0259      	lsls	r1, r3, #9
 8002dea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002dee:	0250      	lsls	r0, r2, #9
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	f7fd fa56 	bl	80002b0 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e04a      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	461a      	mov	r2, r3
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	ea02 0400 	and.w	r4, r2, r0
 8002e26:	ea03 0501 	and.w	r5, r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	014b      	lsls	r3, r1, #5
 8002e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e3c:	0142      	lsls	r2, r0, #5
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	1b00      	subs	r0, r0, r4
 8002e44:	eb61 0105 	sbc.w	r1, r1, r5
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	018b      	lsls	r3, r1, #6
 8002e52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e56:	0182      	lsls	r2, r0, #6
 8002e58:	1a12      	subs	r2, r2, r0
 8002e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5e:	f04f 0000 	mov.w	r0, #0
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	00d9      	lsls	r1, r3, #3
 8002e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e6c:	00d0      	lsls	r0, r2, #3
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	1912      	adds	r2, r2, r4
 8002e74:	eb45 0303 	adc.w	r3, r5, r3
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	0299      	lsls	r1, r3, #10
 8002e82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e86:	0290      	lsls	r0, r2, #10
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	f7fd fa0a 	bl	80002b0 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	60bb      	str	r3, [r7, #8]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ec2:	60bb      	str	r3, [r7, #8]
      break;
 8002ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002efe:	4ba0      	ldr	r3, [pc, #640]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f00:	22c0      	movs	r2, #192	; 0xc0
 8002f02:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002f04:	4b9e      	ldr	r3, [pc, #632]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f06:	22a8      	movs	r2, #168	; 0xa8
 8002f08:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002f0a:	4b9d      	ldr	r3, [pc, #628]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8002f10:	4b9b      	ldr	r3, [pc, #620]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f16:	4b9b      	ldr	r3, [pc, #620]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f1c:	4b99      	ldr	r3, [pc, #612]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002f22:	4b98      	ldr	r3, [pc, #608]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f28:	4b96      	ldr	r3, [pc, #600]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002f2e:	4b96      	ldr	r3, [pc, #600]	; (8003188 <MX_LWIP_Init+0x290>)
 8002f30:	22c0      	movs	r2, #192	; 0xc0
 8002f32:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002f34:	4b94      	ldr	r3, [pc, #592]	; (8003188 <MX_LWIP_Init+0x290>)
 8002f36:	22a8      	movs	r2, #168	; 0xa8
 8002f38:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002f3a:	4b93      	ldr	r3, [pc, #588]	; (8003188 <MX_LWIP_Init+0x290>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002f40:	4b91      	ldr	r3, [pc, #580]	; (8003188 <MX_LWIP_Init+0x290>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8002f46:	2100      	movs	r1, #0
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f004 fe07 	bl	8007b5c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002f4e:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	061a      	lsls	r2, r3, #24
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f56:	785b      	ldrb	r3, [r3, #1]
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f5e:	789b      	ldrb	r3, [r3, #2]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	4313      	orrs	r3, r2
 8002f64:	4a86      	ldr	r2, [pc, #536]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f66:	78d2      	ldrb	r2, [r2, #3]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	061a      	lsls	r2, r3, #24
 8002f6c:	4b84      	ldr	r3, [pc, #528]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0619      	lsls	r1, r3, #24
 8002f72:	4b83      	ldr	r3, [pc, #524]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	4319      	orrs	r1, r3
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f7c:	789b      	ldrb	r3, [r3, #2]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	430b      	orrs	r3, r1
 8002f82:	497f      	ldr	r1, [pc, #508]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f84:	78c9      	ldrb	r1, [r1, #3]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	0619      	lsls	r1, r3, #24
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <MX_LWIP_Init+0x288>)
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	4319      	orrs	r1, r3
 8002f9e:	4b78      	ldr	r3, [pc, #480]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fa0:	789b      	ldrb	r3, [r3, #2]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	4976      	ldr	r1, [pc, #472]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fa8:	78c9      	ldrb	r1, [r1, #3]
 8002faa:	430b      	orrs	r3, r1
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	4b72      	ldr	r3, [pc, #456]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	0619      	lsls	r1, r3, #24
 8002fba:	4b71      	ldr	r3, [pc, #452]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	4319      	orrs	r1, r3
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	496d      	ldr	r1, [pc, #436]	; (8003180 <MX_LWIP_Init+0x288>)
 8002fcc:	78c9      	ldrb	r1, [r1, #3]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	0e1b      	lsrs	r3, r3, #24
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	4a6d      	ldr	r2, [pc, #436]	; (800318c <MX_LWIP_Init+0x294>)
 8002fd6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	061a      	lsls	r2, r3, #24
 8002fde:	4b69      	ldr	r3, [pc, #420]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002fe8:	789b      	ldrb	r3, [r3, #2]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	4a65      	ldr	r2, [pc, #404]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002ff0:	78d2      	ldrb	r2, [r2, #3]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	061a      	lsls	r2, r3, #24
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	0619      	lsls	r1, r3, #24
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <MX_LWIP_Init+0x28c>)
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	4319      	orrs	r1, r3
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003006:	789b      	ldrb	r3, [r3, #2]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	430b      	orrs	r3, r1
 800300c:	495d      	ldr	r1, [pc, #372]	; (8003184 <MX_LWIP_Init+0x28c>)
 800300e:	78c9      	ldrb	r1, [r1, #3]
 8003010:	430b      	orrs	r3, r1
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003018:	431a      	orrs	r2, r3
 800301a:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <MX_LWIP_Init+0x28c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	0619      	lsls	r1, r3, #24
 8003020:	4b58      	ldr	r3, [pc, #352]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	4319      	orrs	r1, r3
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <MX_LWIP_Init+0x28c>)
 800302a:	789b      	ldrb	r3, [r3, #2]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	430b      	orrs	r3, r1
 8003030:	4954      	ldr	r1, [pc, #336]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003032:	78c9      	ldrb	r1, [r1, #3]
 8003034:	430b      	orrs	r3, r1
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800303c:	431a      	orrs	r2, r3
 800303e:	4b51      	ldr	r3, [pc, #324]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	0619      	lsls	r1, r3, #24
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4319      	orrs	r1, r3
 800304c:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <MX_LWIP_Init+0x28c>)
 800304e:	789b      	ldrb	r3, [r3, #2]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	430b      	orrs	r3, r1
 8003054:	494b      	ldr	r1, [pc, #300]	; (8003184 <MX_LWIP_Init+0x28c>)
 8003056:	78c9      	ldrb	r1, [r1, #3]
 8003058:	430b      	orrs	r3, r1
 800305a:	0e1b      	lsrs	r3, r3, #24
 800305c:	4313      	orrs	r3, r2
 800305e:	4a4c      	ldr	r2, [pc, #304]	; (8003190 <MX_LWIP_Init+0x298>)
 8003060:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <MX_LWIP_Init+0x290>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	061a      	lsls	r2, r3, #24
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <MX_LWIP_Init+0x290>)
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	4b45      	ldr	r3, [pc, #276]	; (8003188 <MX_LWIP_Init+0x290>)
 8003072:	789b      	ldrb	r3, [r3, #2]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	4313      	orrs	r3, r2
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <MX_LWIP_Init+0x290>)
 800307a:	78d2      	ldrb	r2, [r2, #3]
 800307c:	4313      	orrs	r3, r2
 800307e:	061a      	lsls	r2, r3, #24
 8003080:	4b41      	ldr	r3, [pc, #260]	; (8003188 <MX_LWIP_Init+0x290>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	0619      	lsls	r1, r3, #24
 8003086:	4b40      	ldr	r3, [pc, #256]	; (8003188 <MX_LWIP_Init+0x290>)
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	4319      	orrs	r1, r3
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <MX_LWIP_Init+0x290>)
 8003090:	789b      	ldrb	r3, [r3, #2]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	430b      	orrs	r3, r1
 8003096:	493c      	ldr	r1, [pc, #240]	; (8003188 <MX_LWIP_Init+0x290>)
 8003098:	78c9      	ldrb	r1, [r1, #3]
 800309a:	430b      	orrs	r3, r1
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030a2:	431a      	orrs	r2, r3
 80030a4:	4b38      	ldr	r3, [pc, #224]	; (8003188 <MX_LWIP_Init+0x290>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	0619      	lsls	r1, r3, #24
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <MX_LWIP_Init+0x290>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	4319      	orrs	r1, r3
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <MX_LWIP_Init+0x290>)
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	430b      	orrs	r3, r1
 80030ba:	4933      	ldr	r1, [pc, #204]	; (8003188 <MX_LWIP_Init+0x290>)
 80030bc:	78c9      	ldrb	r1, [r1, #3]
 80030be:	430b      	orrs	r3, r1
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030c6:	431a      	orrs	r2, r3
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <MX_LWIP_Init+0x290>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	0619      	lsls	r1, r3, #24
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <MX_LWIP_Init+0x290>)
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	4319      	orrs	r1, r3
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <MX_LWIP_Init+0x290>)
 80030d8:	789b      	ldrb	r3, [r3, #2]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	430b      	orrs	r3, r1
 80030de:	492a      	ldr	r1, [pc, #168]	; (8003188 <MX_LWIP_Init+0x290>)
 80030e0:	78c9      	ldrb	r1, [r1, #3]
 80030e2:	430b      	orrs	r3, r1
 80030e4:	0e1b      	lsrs	r3, r3, #24
 80030e6:	4313      	orrs	r3, r2
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <MX_LWIP_Init+0x29c>)
 80030ea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MX_LWIP_Init+0x2a0>)
 80030ee:	9302      	str	r3, [sp, #8]
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <MX_LWIP_Init+0x2a4>)
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	2300      	movs	r3, #0
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <MX_LWIP_Init+0x29c>)
 80030fa:	4a25      	ldr	r2, [pc, #148]	; (8003190 <MX_LWIP_Init+0x298>)
 80030fc:	4923      	ldr	r1, [pc, #140]	; (800318c <MX_LWIP_Init+0x294>)
 80030fe:	4828      	ldr	r0, [pc, #160]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 8003100:	f005 fab0 	bl	8008664 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003104:	4826      	ldr	r0, [pc, #152]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 8003106:	f005 fc5f 	bl	80089c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 800310c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800311c:	4820      	ldr	r0, [pc, #128]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 800311e:	f005 fc63 	bl	80089e8 <netif_set_up>
 8003122:	e002      	b.n	800312a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003124:	481e      	ldr	r0, [pc, #120]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 8003126:	f005 fccb 	bl	8008ac0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800312a:	491e      	ldr	r1, [pc, #120]	; (80031a4 <MX_LWIP_Init+0x2ac>)
 800312c:	481c      	ldr	r0, [pc, #112]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 800312e:	f005 fd5d 	bl	8008bec <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003132:	2200      	movs	r2, #0
 8003134:	2101      	movs	r1, #1
 8003136:	2001      	movs	r0, #1
 8003138:	f000 ff14 	bl	8003f64 <osSemaphoreNew>
 800313c:	4603      	mov	r3, r0
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <MX_LWIP_Init+0x2b0>)
 8003140:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <MX_LWIP_Init+0x2b4>)
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <MX_LWIP_Init+0x2a8>)
 8003146:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <MX_LWIP_Init+0x2b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <MX_LWIP_Init+0x2b4>)
 800314e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	2100      	movs	r1, #0
 8003154:	4816      	ldr	r0, [pc, #88]	; (80031b0 <MX_LWIP_Init+0x2b8>)
 8003156:	f00e fd08 	bl	8011b6a <memset>
  attributes.name = "LinkThr";
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <MX_LWIP_Init+0x2b8>)
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <MX_LWIP_Init+0x2bc>)
 800315e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <MX_LWIP_Init+0x2b8>)
 8003162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003166:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_LWIP_Init+0x2b8>)
 800316a:	2210      	movs	r2, #16
 800316c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <MX_LWIP_Init+0x2b8>)
 8003170:	490e      	ldr	r1, [pc, #56]	; (80031ac <MX_LWIP_Init+0x2b4>)
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <MX_LWIP_Init+0x2c0>)
 8003174:	f000 fcda 	bl	8003b2c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20004c7c 	.word	0x20004c7c
 8003184:	20004c78 	.word	0x20004c78
 8003188:	20004c18 	.word	0x20004c18
 800318c:	20004c74 	.word	0x20004c74
 8003190:	20004c80 	.word	0x20004c80
 8003194:	20004c84 	.word	0x20004c84
 8003198:	08007a99 	.word	0x08007a99
 800319c:	08003809 	.word	0x08003809
 80031a0:	20004c40 	.word	0x20004c40
 80031a4:	080038ed 	.word	0x080038ed
 80031a8:	200000a0 	.word	0x200000a0
 80031ac:	20004c10 	.word	0x20004c10
 80031b0:	20004c1c 	.word	0x20004c1c
 80031b4:	08012acc 	.word	0x08012acc
 80031b8:	08003875 	.word	0x08003875

080031bc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_ETH_MspInit+0x168>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	f040 809e 	bne.w	800331c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031e0:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a50      	ldr	r2, [pc, #320]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 80031e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
 80031ec:	4b4e      	ldr	r3, [pc, #312]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	4a4a      	ldr	r2, [pc, #296]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 80031fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003202:	6313      	str	r3, [r2, #48]	; 0x30
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4b45      	ldr	r3, [pc, #276]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a44      	ldr	r2, [pc, #272]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321a:	6313      	str	r3, [r2, #48]	; 0x30
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6313      	str	r3, [r2, #48]	; 0x30
 8003234:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4a38      	ldr	r2, [pc, #224]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6313      	str	r3, [r2, #48]	; 0x30
 800324c:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	4a32      	ldr	r2, [pc, #200]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	6313      	str	r3, [r2, #48]	; 0x30
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003270:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 8003276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_ETH_MspInit+0x16c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003288:	2332      	movs	r3, #50	; 0x32
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003298:	230b      	movs	r3, #11
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a0:	4619      	mov	r1, r3
 80032a2:	4822      	ldr	r0, [pc, #136]	; (800332c <HAL_ETH_MspInit+0x170>)
 80032a4:	f7fe ff94 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80032a8:	2386      	movs	r3, #134	; 0x86
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032b8:	230b      	movs	r3, #11
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	481b      	ldr	r0, [pc, #108]	; (8003330 <HAL_ETH_MspInit+0x174>)
 80032c4:	f7fe ff84 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032da:	230b      	movs	r3, #11
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	4813      	ldr	r0, [pc, #76]	; (8003334 <HAL_ETH_MspInit+0x178>)
 80032e6:	f7fe ff73 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80032ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032fc:	230b      	movs	r3, #11
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	4619      	mov	r1, r3
 8003306:	480c      	ldr	r0, [pc, #48]	; (8003338 <HAL_ETH_MspInit+0x17c>)
 8003308:	f7fe ff62 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800330c:	2200      	movs	r2, #0
 800330e:	2105      	movs	r1, #5
 8003310:	203d      	movs	r0, #61	; 0x3d
 8003312:	f7fd fda2 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003316:	203d      	movs	r0, #61	; 0x3d
 8003318:	f7fd fdbb 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800331c:	bf00      	nop
 800331e:	3738      	adds	r7, #56	; 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40028000 	.word	0x40028000
 8003328:	40023800 	.word	0x40023800
 800332c:	40020800 	.word	0x40020800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40021800 	.word	0x40021800

0800333c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_ETH_RxCpltCallback+0x1c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 ff0d 	bl	8004168 <osSemaphoreRelease>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200000a4 	.word	0x200000a4

0800335c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003368:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <low_level_init+0x184>)
 800336a:	4a5e      	ldr	r2, [pc, #376]	; (80034e4 <low_level_init+0x188>)
 800336c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800336e:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <low_level_init+0x184>)
 8003370:	2201      	movs	r2, #1
 8003372:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003374:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <low_level_init+0x184>)
 8003376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800337a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800337c:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <low_level_init+0x184>)
 800337e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003382:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003384:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <low_level_init+0x184>)
 8003386:	2200      	movs	r2, #0
 8003388:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8003392:	23e1      	movs	r3, #225	; 0xe1
 8003394:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80033a2:	4a4f      	ldr	r2, [pc, #316]	; (80034e0 <low_level_init+0x184>)
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80033aa:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <low_level_init+0x184>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <low_level_init+0x184>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <low_level_init+0x184>)
 80033b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033bc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033be:	4848      	ldr	r0, [pc, #288]	; (80034e0 <low_level_init+0x184>)
 80033c0:	f7fd fd82 	bl	8000ec8 <HAL_ETH_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80033ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80033e4:	2304      	movs	r3, #4
 80033e6:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <low_level_init+0x18c>)
 80033e8:	4940      	ldr	r1, [pc, #256]	; (80034ec <low_level_init+0x190>)
 80033ea:	483d      	ldr	r0, [pc, #244]	; (80034e0 <low_level_init+0x184>)
 80033ec:	f7fd ff06 	bl	80011fc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80033f0:	2304      	movs	r3, #4
 80033f2:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <low_level_init+0x194>)
 80033f4:	493f      	ldr	r1, [pc, #252]	; (80034f4 <low_level_init+0x198>)
 80033f6:	483a      	ldr	r0, [pc, #232]	; (80034e0 <low_level_init+0x184>)
 80033f8:	f7fd ff69 	bl	80012ce <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2206      	movs	r2, #6
 8003400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <low_level_init+0x184>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <low_level_init+0x184>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	785a      	ldrb	r2, [r3, #1]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <low_level_init+0x184>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	789a      	ldrb	r2, [r3, #2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <low_level_init+0x184>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	78da      	ldrb	r2, [r3, #3]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <low_level_init+0x184>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	791a      	ldrb	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <low_level_init+0x184>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	795a      	ldrb	r2, [r3, #5]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003452:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800345a:	f043 030a 	orr.w	r3, r3, #10
 800345e:	b2da      	uxtb	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003466:	2200      	movs	r2, #0
 8003468:	2101      	movs	r1, #1
 800346a:	2001      	movs	r0, #1
 800346c:	f000 fd7a 	bl	8003f64 <osSemaphoreNew>
 8003470:	4603      	mov	r3, r0
 8003472:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <low_level_init+0x19c>)
 8003474:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	2224      	movs	r2, #36	; 0x24
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f00e fb73 	bl	8011b6a <memset>
  attributes.name = "EthIf";
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <low_level_init+0x1a0>)
 8003486:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003488:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800348e:	2330      	movs	r3, #48	; 0x30
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	461a      	mov	r2, r3
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4819      	ldr	r0, [pc, #100]	; (8003500 <low_level_init+0x1a4>)
 800349c:	f000 fb46 	bl	8003b2c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80034a0:	480f      	ldr	r0, [pc, #60]	; (80034e0 <low_level_init+0x184>)
 80034a2:	f7fe fa3c 	bl	800191e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80034a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034aa:	461a      	mov	r2, r3
 80034ac:	211d      	movs	r1, #29
 80034ae:	480c      	ldr	r0, [pc, #48]	; (80034e0 <low_level_init+0x184>)
 80034b0:	f7fe f967 	bl	8001782 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	f043 030b 	orr.w	r3, r3, #11
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	461a      	mov	r2, r3
 80034c0:	211d      	movs	r1, #29
 80034c2:	4807      	ldr	r0, [pc, #28]	; (80034e0 <low_level_init+0x184>)
 80034c4:	f7fe f9c5 	bl	8001852 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80034c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034cc:	461a      	mov	r2, r3
 80034ce:	211d      	movs	r1, #29
 80034d0:	4803      	ldr	r0, [pc, #12]	; (80034e0 <low_level_init+0x184>)
 80034d2:	f7fe f956 	bl	8001782 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80034d6:	bf00      	nop
 80034d8:	3740      	adds	r7, #64	; 0x40
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20006558 	.word	0x20006558
 80034e4:	40028000 	.word	0x40028000
 80034e8:	200065a0 	.word	0x200065a0
 80034ec:	20004c88 	.word	0x20004c88
 80034f0:	20004d08 	.word	0x20004d08
 80034f4:	200064d8 	.word	0x200064d8
 80034f8:	200000a4 	.word	0x200000a4
 80034fc:	08012ad4 	.word	0x08012ad4
 8003500:	080037a9 	.word	0x080037a9

08003504 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <low_level_output+0x138>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003526:	4b45      	ldr	r3, [pc, #276]	; (800363c <low_level_output+0x138>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	e05a      	b.n	80035ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da03      	bge.n	8003546 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800353e:	23f8      	movs	r3, #248	; 0xf8
 8003540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003544:	e05c      	b.n	8003600 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	895b      	ldrh	r3, [r3, #10]
 800354a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003550:	e02f      	b.n	80035b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	18d0      	adds	r0, r2, r3
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	18d1      	adds	r1, r2, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	461a      	mov	r2, r3
 800356a:	f00e faf0 	bl	8011b4e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	da03      	bge.n	8003584 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800357c:	23f8      	movs	r3, #248	; 0xf8
 800357e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003582:	e03d      	b.n	8003600 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003594:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035bc:	4293      	cmp	r3, r2
 80035be:	d8c8      	bhi.n	8003552 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	18d0      	adds	r0, r2, r3
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f00e fabc 	bl	8011b4e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	623b      	str	r3, [r7, #32]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1a1      	bne.n	8003536 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	4811      	ldr	r0, [pc, #68]	; (800363c <low_level_output+0x138>)
 80035f6:	f7fd fed7 	bl	80013a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <low_level_output+0x138>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f241 0314 	movw	r3, #4116	; 0x1014
 8003608:	4413      	add	r3, r2
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <low_level_output+0x138>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	f241 0314 	movw	r3, #4116	; 0x1014
 800361c:	4413      	add	r3, r2
 800361e:	2220      	movs	r2, #32
 8003620:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <low_level_output+0x138>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f241 0304 	movw	r3, #4100	; 0x1004
 800362a:	4413      	add	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003634:	4618      	mov	r0, r3
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20006558 	.word	0x20006558

08003640 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003664:	484f      	ldr	r0, [pc, #316]	; (80037a4 <low_level_input+0x164>)
 8003666:	f7fd ff89 	bl	800157c <HAL_ETH_GetReceivedFrame_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <low_level_input+0x34>

    return NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	e092      	b.n	800379a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <low_level_input+0x164>)
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <low_level_input+0x164>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800368c:	4619      	mov	r1, r3
 800368e:	2000      	movs	r0, #0
 8003690:	f005 fb76 	bl	8008d80 <pbuf_alloc>
 8003694:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d04b      	beq.n	8003734 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <low_level_input+0x164>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	e040      	b.n	800372e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	895b      	ldrh	r3, [r3, #10]
 80036b0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80036b6:	e021      	b.n	80036fc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	18d0      	adds	r0, r2, r3
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	18d1      	adds	r1, r2, r3
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	f00e fa3d 	bl	8011b4e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4413      	add	r3, r2
 80036e6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80036ea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036f6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003706:	4293      	cmp	r3, r2
 8003708:	d8d6      	bhi.n	80036b8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	18d0      	adds	r0, r2, r3
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4619      	mov	r1, r3
 800371c:	f00e fa17 	bl	8011b4e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1bb      	bne.n	80036ac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <low_level_input+0x164>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e00b      	b.n	8003758 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <low_level_input+0x164>)
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3ee      	bcc.n	8003740 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <low_level_input+0x164>)
 8003764:	2200      	movs	r2, #0
 8003766:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <low_level_input+0x164>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003770:	4413      	add	r3, r2
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <low_level_input+0x164>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	f241 0314 	movw	r3, #4116	; 0x1014
 8003784:	4413      	add	r3, r2
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <low_level_input+0x164>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f241 0308 	movw	r3, #4104	; 0x1008
 8003792:	4413      	add	r3, r2
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800379a:	4618      	mov	r0, r3
 800379c:	3730      	adds	r7, #48	; 0x30
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20006558 	.word	0x20006558

080037a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <ethernetif_input+0x58>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fc6d 	bl	800409c <osSemaphoreAcquire>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f5      	bne.n	80037b4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80037c8:	480e      	ldr	r0, [pc, #56]	; (8003804 <ethernetif_input+0x5c>)
 80037ca:	f00e f83b 	bl	8011844 <sys_mutex_lock>
        p = low_level_input( netif );
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff36 	bl	8003640 <low_level_input>
 80037d4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	4798      	blx	r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80037ec:	68b8      	ldr	r0, [r7, #8]
 80037ee:	f005 fdab 	bl	8009348 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80037f2:	4804      	ldr	r0, [pc, #16]	; (8003804 <ethernetif_input+0x5c>)
 80037f4:	f00e f835 	bl	8011862 <sys_mutex_unlock>
      } while(p!=NULL);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e4      	bne.n	80037c8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80037fe:	e7d9      	b.n	80037b4 <ethernetif_input+0xc>
 8003800:	200000a4 	.word	0x200000a4
 8003804:	20007db0 	.word	0x20007db0

08003808 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <ethernetif_init+0x1c>
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <ethernetif_init+0x48>)
 8003818:	f240 223a 	movw	r2, #570	; 0x23a
 800381c:	490d      	ldr	r1, [pc, #52]	; (8003854 <ethernetif_init+0x4c>)
 800381e:	480e      	ldr	r0, [pc, #56]	; (8003858 <ethernetif_init+0x50>)
 8003820:	f00e fa06 	bl	8011c30 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2273      	movs	r2, #115	; 0x73
 8003828:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2274      	movs	r2, #116	; 0x74
 8003830:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <ethernetif_init+0x54>)
 8003838:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a08      	ldr	r2, [pc, #32]	; (8003860 <ethernetif_init+0x58>)
 800383e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fd8b 	bl	800335c <low_level_init>

  return ERR_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08012adc 	.word	0x08012adc
 8003854:	08012af8 	.word	0x08012af8
 8003858:	08012b08 	.word	0x08012b08
 800385c:	0800fa2d 	.word	0x0800fa2d
 8003860:	08003505 	.word	0x08003505

08003864 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003868:	f7fd f9ec 	bl	8000c44 <HAL_GetTick>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	461a      	mov	r2, r3
 800388a:	2101      	movs	r1, #1
 800388c:	4816      	ldr	r0, [pc, #88]	; (80038e8 <ethernetif_set_link+0x74>)
 800388e:	f7fd ff78 	bl	8001782 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <ethernetif_set_link+0x48>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 f935 	bl	8008b24 <netif_set_link_up>
 80038ba:	e011      	b.n	80038e0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <ethernetif_set_link+0x6c>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 f956 	bl	8008b8c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80038e0:	20c8      	movs	r0, #200	; 0xc8
 80038e2:	f000 f9c9 	bl	8003c78 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80038e6:	e7cd      	b.n	8003884 <ethernetif_set_link+0x10>
 80038e8:	20006558 	.word	0x20006558

080038ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d05d      	beq.n	80039ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <ethernetif_update_config+0xf4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03f      	beq.n	8003996 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800391a:	2100      	movs	r1, #0
 800391c:	4830      	ldr	r0, [pc, #192]	; (80039e0 <ethernetif_update_config+0xf4>)
 800391e:	f7fd ff98 	bl	8001852 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003922:	f7fd f98f 	bl	8000c44 <HAL_GetTick>
 8003926:	4603      	mov	r3, r0
 8003928:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	461a      	mov	r2, r3
 8003930:	2101      	movs	r1, #1
 8003932:	482b      	ldr	r0, [pc, #172]	; (80039e0 <ethernetif_update_config+0xf4>)
 8003934:	f7fd ff25 	bl	8001782 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003938:	f7fd f984 	bl	8000c44 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003946:	d828      	bhi.n	800399a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0eb      	beq.n	800392a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	461a      	mov	r2, r3
 8003958:	2110      	movs	r1, #16
 800395a:	4821      	ldr	r0, [pc, #132]	; (80039e0 <ethernetif_update_config+0xf4>)
 800395c:	f7fd ff11 	bl	8001782 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <ethernetif_update_config+0xf4>)
 800396c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	e002      	b.n	800397a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <ethernetif_update_config+0xf4>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <ethernetif_update_config+0xf4>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	e016      	b.n	80039ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <ethernetif_update_config+0xf4>)
 800398e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e011      	b.n	80039ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <ethernetif_update_config+0xb0>
          goto error;
 800399a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <ethernetif_update_config+0xf4>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <ethernetif_update_config+0xf4>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	2100      	movs	r1, #0
 80039b4:	480a      	ldr	r0, [pc, #40]	; (80039e0 <ethernetif_update_config+0xf4>)
 80039b6:	f7fd ff4c 	bl	8001852 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80039ba:	2100      	movs	r1, #0
 80039bc:	4808      	ldr	r0, [pc, #32]	; (80039e0 <ethernetif_update_config+0xf4>)
 80039be:	f7fe f80d 	bl	80019dc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <ethernetif_update_config+0xf4>)
 80039c4:	f7fd ffab 	bl	800191e <HAL_ETH_Start>
 80039c8:	e002      	b.n	80039d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <ethernetif_update_config+0xf4>)
 80039cc:	f7fd ffd6 	bl	800197c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f807 	bl	80039e4 <ethernetif_notify_conn_changed>
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20006558 	.word	0x20006558

080039e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a26:	f3ef 8311 	mrs	r3, BASEPRI
 8003a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <osKernelInitialize+0x3a>
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <osKernelInitialize+0x64>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d103      	bne.n	8003a42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a3a:	f06f 0305 	mvn.w	r3, #5
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e00c      	b.n	8003a5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <osKernelInitialize+0x64>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <osKernelInitialize+0x64>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e002      	b.n	8003a5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200000a8 	.word	0x200000a8

08003a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a76:	f3ef 8305 	mrs	r3, IPSR
 8003a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	607b      	str	r3, [r7, #4]
  return(result);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a92:	603b      	str	r3, [r7, #0]
  return(result);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <osKernelStart+0x3a>
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <osKernelStart+0x68>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <osKernelStart+0x3a>
    stat = osErrorISR;
 8003aa2:	f06f 0305 	mvn.w	r3, #5
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e010      	b.n	8003acc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <osKernelStart+0x68>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d109      	bne.n	8003ac6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ab2:	f7ff ffa1 	bl	80039f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <osKernelStart+0x68>)
 8003ab8:	2202      	movs	r2, #2
 8003aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003abc:	f002 f906 	bl	8005ccc <vTaskStartScheduler>
      stat = osOK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e002      	b.n	8003acc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003acc:	68fb      	ldr	r3, [r7, #12]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200000a8 	.word	0x200000a8

08003adc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
 8003ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	607b      	str	r3, [r7, #4]
  return(result);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afa:	f3ef 8311 	mrs	r3, BASEPRI
 8003afe:	603b      	str	r3, [r7, #0]
  return(result);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <osKernelGetTickCount+0x3a>
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <osKernelGetTickCount+0x4c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003b0e:	f002 fa0f 	bl	8005f30 <xTaskGetTickCountFromISR>
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	e002      	b.n	8003b1c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8003b16:	f002 f9fb 	bl	8005f10 <xTaskGetTickCount>
 8003b1a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200000a8 	.word	0x200000a8

08003b2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b090      	sub	sp, #64	; 0x40
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b3c:	f3ef 8305 	mrs	r3, IPSR
 8003b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 808f 	bne.w	8003c68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b56:	f3ef 8311 	mrs	r3, BASEPRI
 8003b5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <osThreadNew+0x3e>
 8003b62:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <osThreadNew+0x148>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d07e      	beq.n	8003c68 <osThreadNew+0x13c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d07b      	beq.n	8003c68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003b74:	2318      	movs	r3, #24
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d045      	beq.n	8003c14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <osThreadNew+0x6a>
        name = attr->name;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <osThreadNew+0x90>
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b38      	cmp	r3, #56	; 0x38
 8003bae:	d805      	bhi.n	8003bbc <osThreadNew+0x90>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <osThreadNew+0x94>
        return (NULL);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e054      	b.n	8003c6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00e      	beq.n	8003bf6 <osThreadNew+0xca>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2bbb      	cmp	r3, #187	; 0xbb
 8003bde:	d90a      	bls.n	8003bf6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <osThreadNew+0xca>
        mem = 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	e010      	b.n	8003c18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <osThreadNew+0xec>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <osThreadNew+0xec>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <osThreadNew+0xec>
          mem = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	e001      	b.n	8003c18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d110      	bne.n	8003c40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c26:	9202      	str	r2, [sp, #8]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f001 fe53 	bl	80058e0 <xTaskCreateStatic>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e013      	b.n	8003c68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d110      	bne.n	8003c68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 fea4 	bl	80059a6 <xTaskCreate>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <osThreadNew+0x13c>
          hTask = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c68:	693b      	ldr	r3, [r7, #16]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3730      	adds	r7, #48	; 0x30
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200000a8 	.word	0x200000a8

08003c78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c80:	f3ef 8305 	mrs	r3, IPSR
 8003c84:	613b      	str	r3, [r7, #16]
  return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c98:	f3ef 8311 	mrs	r3, BASEPRI
 8003c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <osDelay+0x3c>
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <osDelay+0x58>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d103      	bne.n	8003cb4 <osDelay+0x3c>
    stat = osErrorISR;
 8003cac:	f06f 0305 	mvn.w	r3, #5
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e007      	b.n	8003cc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 ffce 	bl	8005c60 <vTaskDelay>
    }
  }

  return (stat);
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200000a8 	.word	0x200000a8

08003cd4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce0:	f3ef 8305 	mrs	r3, IPSR
 8003ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ce6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 8085 	bne.w	8003df8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8003cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <osMutexNew+0x3a>
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <osMutexNew+0x130>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d074      	beq.n	8003df8 <osMutexNew+0x124>
    if (attr != NULL) {
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <osMutexNew+0x48>
      type = attr->attr_bits;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	e001      	b.n	8003d20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <osMutexNew+0x5c>
      rmtx = 1U;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e001      	b.n	8003d34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d15c      	bne.n	8003df8 <osMutexNew+0x124>
      mem = -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <osMutexNew+0x8c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b4f      	cmp	r3, #79	; 0x4f
 8003d58:	d902      	bls.n	8003d60 <osMutexNew+0x8c>
          mem = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e00c      	b.n	8003d7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <osMutexNew+0xa6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <osMutexNew+0xa6>
            mem = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e001      	b.n	8003d7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d112      	bne.n	8003da6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2004      	movs	r0, #4
 8003d8e:	f000 fe1a 	bl	80049c6 <xQueueCreateMutexStatic>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24
 8003d94:	e016      	b.n	8003dc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f000 fe12 	bl	80049c6 <xQueueCreateMutexStatic>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
 8003da4:	e00e      	b.n	8003dc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003db2:	2004      	movs	r0, #4
 8003db4:	f000 fdef 	bl	8004996 <xQueueCreateMutex>
 8003db8:	6278      	str	r0, [r7, #36]	; 0x24
 8003dba:	e003      	b.n	8003dc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f000 fdea 	bl	8004996 <xQueueCreateMutex>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <osMutexNew+0x110>
        if (attr != NULL) {
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <osMutexNew+0x104>
          name = attr->name;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e001      	b.n	8003ddc <osMutexNew+0x108>
        } else {
          name = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de0:	f001 fcf6 	bl	80057d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d006      	beq.n	8003df8 <osMutexNew+0x124>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200000a8 	.word	0x200000a8

08003e08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e26:	f3ef 8305 	mrs	r3, IPSR
 8003e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e32:	f3ef 8310 	mrs	r3, PRIMASK
 8003e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <osMutexAcquire+0x52>
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <osMutexAcquire+0xb8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d103      	bne.n	8003e5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003e52:	f06f 0305 	mvn.w	r3, #5
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e02c      	b.n	8003eb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003e60:	f06f 0303 	mvn.w	r3, #3
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e025      	b.n	8003eb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	69b8      	ldr	r0, [r7, #24]
 8003e72:	f000 fdf9 	bl	8004a68 <xQueueTakeMutexRecursive>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d01b      	beq.n	8003eb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003e82:	f06f 0301 	mvn.w	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e014      	b.n	8003eb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003e8a:	f06f 0302 	mvn.w	r3, #2
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e010      	b.n	8003eb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	69b8      	ldr	r0, [r7, #24]
 8003e96:	f001 f9b3 	bl	8005200 <xQueueSemaphoreTake>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d009      	beq.n	8003eb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003ea6:	f06f 0301 	mvn.w	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e002      	b.n	8003eb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003eae:	f06f 0302 	mvn.w	r3, #2
 8003eb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200000a8 	.word	0x200000a8

08003ec4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee0:	f3ef 8305 	mrs	r3, IPSR
 8003ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8003efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <osMutexRelease+0x50>
 8003f04:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <osMutexRelease+0x9c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d103      	bne.n	8003f14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003f0c:	f06f 0305 	mvn.w	r3, #5
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e01f      	b.n	8003f54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003f1a:	f06f 0303 	mvn.w	r3, #3
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e018      	b.n	8003f54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003f28:	69b8      	ldr	r0, [r7, #24]
 8003f2a:	f000 fd67 	bl	80049fc <xQueueGiveMutexRecursive>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d00f      	beq.n	8003f54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003f34:	f06f 0302 	mvn.w	r3, #2
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e00b      	b.n	8003f54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	69b8      	ldr	r0, [r7, #24]
 8003f44:	f000 fe3a 	bl	8004bbc <xQueueGenericSend>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003f4e:	f06f 0302 	mvn.w	r3, #2
 8003f52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8003f54:	69fb      	ldr	r3, [r7, #28]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200000a8 	.word	0x200000a8

08003f64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08c      	sub	sp, #48	; 0x30
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f74:	f3ef 8305 	mrs	r3, IPSR
 8003f78:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 8086 	bne.w	800408e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	617b      	str	r3, [r7, #20]
  return(result);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f92:	613b      	str	r3, [r7, #16]
  return(result);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <osSemaphoreNew+0x3e>
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <osSemaphoreNew+0x134>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d075      	beq.n	800408e <osSemaphoreNew+0x12a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d072      	beq.n	800408e <osSemaphoreNew+0x12a>
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d86e      	bhi.n	800408e <osSemaphoreNew+0x12a>
    mem = -1;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <osSemaphoreNew+0x6e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b4f      	cmp	r3, #79	; 0x4f
 8003fca:	d902      	bls.n	8003fd2 <osSemaphoreNew+0x6e>
        mem = 1;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	e00c      	b.n	8003fec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <osSemaphoreNew+0x88>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <osSemaphoreNew+0x88>
          mem = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	e001      	b.n	8003fec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d04c      	beq.n	800408e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d128      	bne.n	800404c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10a      	bne.n	8004016 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2203      	movs	r2, #3
 8004006:	9200      	str	r2, [sp, #0]
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	2001      	movs	r0, #1
 800400e:	f000 fbc1 	bl	8004794 <xQueueGenericCreateStatic>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
 8004014:	e005      	b.n	8004022 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004016:	2203      	movs	r2, #3
 8004018:	2100      	movs	r1, #0
 800401a:	2001      	movs	r0, #1
 800401c:	f000 fc3c 	bl	8004898 <xQueueGenericCreate>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d022      	beq.n	800406e <osSemaphoreNew+0x10a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01f      	beq.n	800406e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800402e:	2300      	movs	r3, #0
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004036:	f000 fdc1 	bl	8004bbc <xQueueGenericSend>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d016      	beq.n	800406e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004042:	f001 fa77 	bl	8005534 <vQueueDelete>
            hSemaphore = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
 800404a:	e010      	b.n	800406e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	461a      	mov	r2, r3
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fd3c 	bl	8004ad8 <xQueueCreateCountingSemaphoreStatic>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
 8004062:	e004      	b.n	800406e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fd71 	bl	8004b4e <xQueueCreateCountingSemaphore>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <osSemaphoreNew+0x11e>
          name = attr->name;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	e001      	b.n	8004086 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800408a:	f001 fba1 	bl	80057d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200000a8 	.word	0x200000a8

0800409c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80040b4:	f06f 0303 	mvn.w	r3, #3
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	e04b      	b.n	8004154 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040bc:	f3ef 8305 	mrs	r3, IPSR
 80040c0:	617b      	str	r3, [r7, #20]
  return(result);
 80040c2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10f      	bne.n	80040e8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c8:	f3ef 8310 	mrs	r3, PRIMASK
 80040cc:	613b      	str	r3, [r7, #16]
  return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d4:	f3ef 8311 	mrs	r3, BASEPRI
 80040d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d026      	beq.n	800412e <osSemaphoreAcquire+0x92>
 80040e0:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <osSemaphoreAcquire+0xc4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d122      	bne.n	800412e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80040ee:	f06f 0303 	mvn.w	r3, #3
 80040f2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80040f4:	e02d      	b.n	8004152 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	461a      	mov	r2, r3
 8004100:	2100      	movs	r1, #0
 8004102:	69b8      	ldr	r0, [r7, #24]
 8004104:	f001 f990 	bl	8005428 <xQueueReceiveFromISR>
 8004108:	4603      	mov	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d003      	beq.n	8004116 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800410e:	f06f 0302 	mvn.w	r3, #2
 8004112:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004114:	e01d      	b.n	8004152 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <osSemaphoreAcquire+0xb6>
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <osSemaphoreAcquire+0xc8>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800412c:	e011      	b.n	8004152 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	69b8      	ldr	r0, [r7, #24]
 8004132:	f001 f865 	bl	8005200 <xQueueSemaphoreTake>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d00b      	beq.n	8004154 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004142:	f06f 0301 	mvn.w	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e004      	b.n	8004154 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800414a:	f06f 0302 	mvn.w	r3, #2
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e000      	b.n	8004154 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004152:	bf00      	nop
      }
    }
  }

  return (stat);
 8004154:	69fb      	ldr	r3, [r7, #28]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200000a8 	.word	0x200000a8
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800417e:	f06f 0303 	mvn.w	r3, #3
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e03e      	b.n	8004204 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004186:	f3ef 8305 	mrs	r3, IPSR
 800418a:	617b      	str	r3, [r7, #20]
  return(result);
 800418c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	613b      	str	r3, [r7, #16]
  return(result);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800419e:	f3ef 8311 	mrs	r3, BASEPRI
 80041a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01e      	beq.n	80041e8 <osSemaphoreRelease+0x80>
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <osSemaphoreRelease+0xa8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d11a      	bne.n	80041e8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4619      	mov	r1, r3
 80041bc:	69b8      	ldr	r0, [r7, #24]
 80041be:	f000 fea3 	bl	8004f08 <xQueueGiveFromISR>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d003      	beq.n	80041d0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80041c8:	f06f 0302 	mvn.w	r3, #2
 80041cc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80041ce:	e018      	b.n	8004202 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <osSemaphoreRelease+0x9a>
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <osSemaphoreRelease+0xac>)
 80041d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80041e6:	e00c      	b.n	8004202 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80041e8:	2300      	movs	r3, #0
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	69b8      	ldr	r0, [r7, #24]
 80041f0:	f000 fce4 	bl	8004bbc <xQueueGenericSend>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d004      	beq.n	8004204 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80041fa:	f06f 0302 	mvn.w	r3, #2
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e000      	b.n	8004204 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004202:	bf00      	nop
    }
  }

  return (stat);
 8004204:	69fb      	ldr	r3, [r7, #28]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200000a8 	.word	0x200000a8
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	; 0x30
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004228:	f3ef 8305 	mrs	r3, IPSR
 800422c:	61bb      	str	r3, [r7, #24]
  return(result);
 800422e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004230:	2b00      	cmp	r3, #0
 8004232:	d16f      	bne.n	8004314 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004234:	f3ef 8310 	mrs	r3, PRIMASK
 8004238:	617b      	str	r3, [r7, #20]
  return(result);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004240:	f3ef 8311 	mrs	r3, BASEPRI
 8004244:	613b      	str	r3, [r7, #16]
  return(result);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <osMessageQueueNew+0x3c>
 800424c:	4b34      	ldr	r3, [pc, #208]	; (8004320 <osMessageQueueNew+0x108>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d05f      	beq.n	8004314 <osMessageQueueNew+0xfc>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d05c      	beq.n	8004314 <osMessageQueueNew+0xfc>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d059      	beq.n	8004314 <osMessageQueueNew+0xfc>
    mem = -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d029      	beq.n	80042c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <osMessageQueueNew+0x82>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b4f      	cmp	r3, #79	; 0x4f
 800427a:	d90e      	bls.n	800429a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <osMessageQueueNew+0x82>
        mem = 1;
 8004294:	2301      	movs	r3, #1
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	e014      	b.n	80042c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <osMessageQueueNew+0xac>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <osMessageQueueNew+0xac>
          mem = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e001      	b.n	80042c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10b      	bne.n	80042e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2100      	movs	r1, #0
 80042d4:	9100      	str	r1, [sp, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa5b 	bl	8004794 <xQueueGenericCreateStatic>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24
 80042e0:	e008      	b.n	80042f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80042e8:	2200      	movs	r2, #0
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fad3 	bl	8004898 <xQueueGenericCreate>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e001      	b.n	800430c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004310:	f001 fa5e 	bl	80057d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200000a8 	.word	0x200000a8

08004324 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433c:	f3ef 8305 	mrs	r3, IPSR
 8004340:	61fb      	str	r3, [r7, #28]
  return(result);
 8004342:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004348:	f3ef 8310 	mrs	r3, PRIMASK
 800434c:	61bb      	str	r3, [r7, #24]
  return(result);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	617b      	str	r3, [r7, #20]
  return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02c      	beq.n	80043ba <osMessageQueuePut+0x96>
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <osMessageQueuePut+0xe0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d128      	bne.n	80043ba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <osMessageQueuePut+0x56>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <osMessageQueuePut+0x56>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800437a:	f06f 0303 	mvn.w	r3, #3
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004380:	e039      	b.n	80043f6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004386:	f107 0210 	add.w	r2, r7, #16
 800438a:	2300      	movs	r3, #0
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	6a38      	ldr	r0, [r7, #32]
 8004390:	f000 fd1a 	bl	8004dc8 <xQueueGenericSendFromISR>
 8004394:	4603      	mov	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d003      	beq.n	80043a2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800439a:	f06f 0302 	mvn.w	r3, #2
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043a0:	e029      	b.n	80043f6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d026      	beq.n	80043f6 <osMessageQueuePut+0xd2>
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <osMessageQueuePut+0xe4>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043b8:	e01d      	b.n	80043f6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <osMessageQueuePut+0xa2>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80043c6:	f06f 0303 	mvn.w	r3, #3
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e014      	b.n	80043f8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80043ce:	2300      	movs	r3, #0
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	6a38      	ldr	r0, [r7, #32]
 80043d6:	f000 fbf1 	bl	8004bbc <xQueueGenericSend>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d00b      	beq.n	80043f8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80043e6:	f06f 0301 	mvn.w	r3, #1
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	e004      	b.n	80043f8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80043ee:	f06f 0302 	mvn.w	r3, #2
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	e000      	b.n	80043f8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	; 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200000a8 	.word	0x200000a8
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004422:	f3ef 8305 	mrs	r3, IPSR
 8004426:	61fb      	str	r3, [r7, #28]
  return(result);
 8004428:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	61bb      	str	r3, [r7, #24]
  return(result);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800443a:	f3ef 8311 	mrs	r3, BASEPRI
 800443e:	617b      	str	r3, [r7, #20]
  return(result);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02c      	beq.n	80044a0 <osMessageQueueGet+0x94>
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <osMessageQueueGet+0xdc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d128      	bne.n	80044a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <osMessageQueueGet+0x54>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <osMessageQueueGet+0x54>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004460:	f06f 0303 	mvn.w	r3, #3
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004466:	e038      	b.n	80044da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	461a      	mov	r2, r3
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	6a38      	ldr	r0, [r7, #32]
 8004476:	f000 ffd7 	bl	8005428 <xQueueReceiveFromISR>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d003      	beq.n	8004488 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004480:	f06f 0302 	mvn.w	r3, #2
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004486:	e028      	b.n	80044da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d025      	beq.n	80044da <osMessageQueueGet+0xce>
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <osMessageQueueGet+0xe0>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800449e:	e01c      	b.n	80044da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <osMessageQueueGet+0xa0>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80044ac:	f06f 0303 	mvn.w	r3, #3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	e013      	b.n	80044dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	6a38      	ldr	r0, [r7, #32]
 80044ba:	f000 fdbb 	bl	8005034 <xQueueReceive>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d00b      	beq.n	80044dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80044ca:	f06f 0301 	mvn.w	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
 80044d0:	e004      	b.n	80044dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80044d2:	f06f 0302 	mvn.w	r3, #2
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	e000      	b.n	80044dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200000a8 	.word	0x200000a8
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a07      	ldr	r2, [pc, #28]	; (800451c <vApplicationGetIdleTaskMemory+0x2c>)
 8004500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a06      	ldr	r2, [pc, #24]	; (8004520 <vApplicationGetIdleTaskMemory+0x30>)
 8004506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	601a      	str	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	200000ac 	.word	0x200000ac
 8004520:	20000168 	.word	0x20000168

08004524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <vApplicationGetTimerTaskMemory+0x2c>)
 8004534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a06      	ldr	r2, [pc, #24]	; (8004554 <vApplicationGetTimerTaskMemory+0x30>)
 800453a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	20000368 	.word	0x20000368
 8004554:	20000424 	.word	0x20000424

08004558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0208 	add.w	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f103 0208 	add.w	r2, r3, #8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f103 0208 	add.w	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d103      	bne.n	800461a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e00c      	b.n	8004634 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3308      	adds	r3, #8
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e002      	b.n	8004628 <vListInsert+0x2e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d2f6      	bcs.n	8004622 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6892      	ldr	r2, [r2, #8]
 8004682:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d103      	bne.n	80046a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1e5a      	subs	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10c      	bne.n	80046ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	b672      	cpsid	i
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	b662      	cpsie	i
 80046e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80046ee:	f002 fdcd 	bl	800728c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	68f9      	ldr	r1, [r7, #12]
 80046fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	3b01      	subs	r3, #1
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	; 0xff
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d114      	bne.n	800476e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3310      	adds	r3, #16
 8004750:	4618      	mov	r0, r3
 8004752:	f001 fd75 	bl	8006240 <xTaskRemoveFromEventList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d012      	beq.n	8004782 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <xQueueGenericReset+0xd0>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e009      	b.n	8004782 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3310      	adds	r3, #16
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fef0 	bl	8004558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff feeb 	bl	8004558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f002 fdb7 	bl	80072f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004786:	2301      	movs	r3, #1
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	; 0x38
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10c      	bne.n	80047c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	b672      	cpsid	i
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	b662      	cpsie	i
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	b672      	cpsid	i
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	b662      	cpsie	i
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <xQueueGenericCreateStatic+0x5a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xQueueGenericCreateStatic+0x5e>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <xQueueGenericCreateStatic+0x60>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	b672      	cpsid	i
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	b662      	cpsie	i
 800480c:	623b      	str	r3, [r7, #32]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <xQueueGenericCreateStatic+0x8a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <xQueueGenericCreateStatic+0x8e>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <xQueueGenericCreateStatic+0x90>
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	b672      	cpsid	i
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	b662      	cpsie	i
 800483c:	61fb      	str	r3, [r7, #28]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004842:	2350      	movs	r3, #80	; 0x50
 8004844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b50      	cmp	r3, #80	; 0x50
 800484a:	d00c      	beq.n	8004866 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	b672      	cpsid	i
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	b662      	cpsie	i
 8004860:	61bb      	str	r3, [r7, #24]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004866:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800487a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f847 	bl	800491c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004890:	4618      	mov	r0, r3
 8004892:	3730      	adds	r7, #48	; 0x30
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e004      	b.n	80048dc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3350      	adds	r3, #80	; 0x50
 80048e0:	4618      	mov	r0, r3
 80048e2:	f002 fdff 	bl	80074e4 <pvPortMalloc>
 80048e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d011      	beq.n	8004912 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3350      	adds	r3, #80	; 0x50
 80048f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004900:	79fa      	ldrb	r2, [r7, #7]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f805 	bl	800491c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004912:	69bb      	ldr	r3, [r7, #24]
	}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e002      	b.n	800493e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800494a:	2101      	movs	r1, #1
 800494c:	69b8      	ldr	r0, [r7, #24]
 800494e:	f7ff feb7 	bl	80046c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004982:	2300      	movs	r3, #0
 8004984:	2200      	movs	r2, #0
 8004986:	2100      	movs	r1, #0
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f917 	bl	8004bbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6939      	ldr	r1, [r7, #16]
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f7ff ff72 	bl	8004898 <xQueueGenericCreate>
 80049b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ffd3 	bl	8004962 <prvInitialiseMutex>

		return xNewQueue;
 80049bc:	68fb      	ldr	r3, [r7, #12]
	}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	4603      	mov	r3, r0
 80049ce:	6039      	str	r1, [r7, #0]
 80049d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80049d2:	2301      	movs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	6939      	ldr	r1, [r7, #16]
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f7ff fed5 	bl	8004794 <xQueueGenericCreateStatic>
 80049ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ffb8 	bl	8004962 <prvInitialiseMutex>

		return xNewQueue;
 80049f2:	68fb      	ldr	r3, [r7, #12]
	}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	b672      	cpsid	i
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	b662      	cpsie	i
 8004a22:	60fb      	str	r3, [r7, #12]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	689c      	ldr	r4, [r3, #8]
 8004a2c:	f001 fdd2 	bl	80065d4 <xTaskGetCurrentTaskHandle>
 8004a30:	4603      	mov	r3, r0
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d111      	bne.n	8004a5a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	6938      	ldr	r0, [r7, #16]
 8004a50:	f000 f8b4 	bl	8004bbc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e001      	b.n	8004a5e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004a5e:	697b      	ldr	r3, [r7, #20]
	}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}

08004a68 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	b672      	cpsid	i
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	b662      	cpsie	i
 8004a90:	60fb      	str	r3, [r7, #12]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	689c      	ldr	r4, [r3, #8]
 8004a9a:	f001 fd9b 	bl	80065d4 <xTaskGetCurrentTaskHandle>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	d107      	bne.n	8004ab4 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e00c      	b.n	8004ace <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	6938      	ldr	r0, [r7, #16]
 8004ab8:	f000 fba2 	bl	8005200 <xQueueSemaphoreTake>
 8004abc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004ace:	697b      	ldr	r3, [r7, #20]
	}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd90      	pop	{r4, r7, pc}

08004ad8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	b672      	cpsid	i
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	b662      	cpsie	i
 8004afe:	61bb      	str	r3, [r7, #24]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d90c      	bls.n	8004b26 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	617b      	str	r3, [r7, #20]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b26:	2302      	movs	r3, #2
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff fe2f 	bl	8004794 <xQueueGenericCreateStatic>
 8004b36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004b44:	69fb      	ldr	r3, [r7, #28]
	}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	b672      	cpsid	i
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	b662      	cpsie	i
 8004b72:	613b      	str	r3, [r7, #16]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d90c      	bls.n	8004b9a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fe7a 	bl	8004898 <xQueueGenericCreate>
 8004ba4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004bb2:	697b      	ldr	r3, [r7, #20]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10c      	bne.n	8004bf2 <xQueueGenericSend+0x36>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	b672      	cpsid	i
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	b662      	cpsie	i
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <xQueueGenericSend+0x44>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xQueueGenericSend+0x48>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <xQueueGenericSend+0x4a>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <xQueueGenericSend+0x68>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	b672      	cpsid	i
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	b662      	cpsie	i
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d103      	bne.n	8004c32 <xQueueGenericSend+0x76>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <xQueueGenericSend+0x7a>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <xQueueGenericSend+0x7c>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10c      	bne.n	8004c56 <xQueueGenericSend+0x9a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	b672      	cpsid	i
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	b662      	cpsie	i
 8004c50:	623b      	str	r3, [r7, #32]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c56:	f001 fccd 	bl	80065f4 <xTaskGetSchedulerState>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <xQueueGenericSend+0xaa>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSend+0xae>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSend+0xb0>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10c      	bne.n	8004c8a <xQueueGenericSend+0xce>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	b672      	cpsid	i
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	b662      	cpsie	i
 8004c84:	61fb      	str	r3, [r7, #28]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c8a:	f002 faff 	bl	800728c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <xQueueGenericSend+0xe4>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d129      	bne.n	8004cf4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ca6:	f000 fc82 	bl	80055ae <prvCopyDataToQueue>
 8004caa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d010      	beq.n	8004cd6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fac1 	bl	8006240 <xTaskRemoveFromEventList>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <xQueueGenericSend+0x208>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	e00a      	b.n	8004cec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cdc:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <xQueueGenericSend+0x208>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cec:	f002 fb02 	bl	80072f4 <vPortExitCritical>
				return pdPASS;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e063      	b.n	8004dbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cfa:	f002 fafb 	bl	80072f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e05c      	b.n	8004dbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fafd 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d12:	2301      	movs	r3, #1
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d16:	f002 faed 	bl	80072f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d1a:	f001 f84b 	bl	8005db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d1e:	f002 fab5 	bl	800728c <vPortEnterCritical>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d103      	bne.n	8004d38 <xQueueGenericSend+0x17c>
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d103      	bne.n	8004d4e <xQueueGenericSend+0x192>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4e:	f002 fad1 	bl	80072f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d52:	1d3a      	adds	r2, r7, #4
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 faec 	bl	8006338 <xTaskCheckForTimeOut>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d124      	bne.n	8004db0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d68:	f000 fd19 	bl	800579e <prvIsQueueFull>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	3310      	adds	r3, #16
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fa0c 	bl	8006198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d82:	f000 fca4 	bl	80056ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d86:	f001 f823 	bl	8005dd0 <xTaskResumeAll>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f af7c 	bne.w	8004c8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <xQueueGenericSend+0x208>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	e772      	b.n	8004c8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da6:	f000 fc92 	bl	80056ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004daa:	f001 f811 	bl	8005dd0 <xTaskResumeAll>
 8004dae:	e76c      	b.n	8004c8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db2:	f000 fc8c 	bl	80056ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004db6:	f001 f80b 	bl	8005dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3738      	adds	r7, #56	; 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08e      	sub	sp, #56	; 0x38
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10c      	bne.n	8004dfa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	b672      	cpsid	i
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	b662      	cpsie	i
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <xQueueGenericSendFromISR+0x40>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <xQueueGenericSendFromISR+0x44>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <xQueueGenericSendFromISR+0x46>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	b672      	cpsid	i
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	b662      	cpsie	i
 8004e26:	623b      	str	r3, [r7, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d103      	bne.n	8004e3a <xQueueGenericSendFromISR+0x72>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <xQueueGenericSendFromISR+0x76>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueGenericSendFromISR+0x78>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10c      	bne.n	8004e5e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	b672      	cpsid	i
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	b662      	cpsie	i
 8004e58:	61fb      	str	r3, [r7, #28]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e5e:	f002 fafd 	bl	800745c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e62:	f3ef 8211 	mrs	r2, BASEPRI
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	61ba      	str	r2, [r7, #24]
 8004e7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <xQueueGenericSendFromISR+0xcc>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d12c      	bne.n	8004eee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea4:	f000 fb83 	bl	80055ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ea8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d112      	bne.n	8004ed8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d016      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	3324      	adds	r3, #36	; 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f9be 	bl	8006240 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00e      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e007      	b.n	8004ee8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004edc:	3301      	adds	r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	b25a      	sxtb	r2, r3
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004eec:	e001      	b.n	8004ef2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004efc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3738      	adds	r7, #56	; 0x38
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10c      	bne.n	8004f36 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	b672      	cpsid	i
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	b662      	cpsie	i
 8004f30:	623b      	str	r3, [r7, #32]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <xQueueGiveFromISR+0x50>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	b672      	cpsid	i
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	b662      	cpsie	i
 8004f52:	61fb      	str	r3, [r7, #28]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <xQueueGiveFromISR+0x60>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <xQueueGiveFromISR+0x64>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <xQueueGiveFromISR+0x66>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10c      	bne.n	8004f8c <xQueueGiveFromISR+0x84>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	b672      	cpsid	i
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	b662      	cpsie	i
 8004f86:	61bb      	str	r3, [r7, #24]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f8c:	f002 fa66 	bl	800745c <vPortValidateInterruptPriority>
	__asm volatile
 8004f90:	f3ef 8211 	mrs	r2, BASEPRI
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	b672      	cpsid	i
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	b662      	cpsie	i
 8004fa8:	617a      	str	r2, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004fac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d22b      	bcs.n	8005018 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d112      	bne.n	8005002 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d016      	beq.n	8005012 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f929 	bl	8006240 <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e007      	b.n	8005012 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005006:	3301      	adds	r3, #1
 8005008:	b2db      	uxtb	r3, r3
 800500a:	b25a      	sxtb	r2, r3
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005012:	2301      	movs	r3, #1
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
 8005016:	e001      	b.n	800501c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005018:	2300      	movs	r3, #0
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f383 8811 	msr	BASEPRI, r3
}
 8005026:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800502a:	4618      	mov	r0, r3
 800502c:	3738      	adds	r7, #56	; 0x38
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <xQueueReceive+0x34>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	b672      	cpsid	i
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	b662      	cpsie	i
 8005062:	623b      	str	r3, [r7, #32]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueReceive+0x42>
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <xQueueReceive+0x46>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueReceive+0x48>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10c      	bne.n	800509a <xQueueReceive+0x66>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	b672      	cpsid	i
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	b662      	cpsie	i
 8005094:	61fb      	str	r3, [r7, #28]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509a:	f001 faab 	bl	80065f4 <xTaskGetSchedulerState>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <xQueueReceive+0x76>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <xQueueReceive+0x7a>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <xQueueReceive+0x7c>
 80050ae:	2300      	movs	r3, #0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10c      	bne.n	80050ce <xQueueReceive+0x9a>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	b672      	cpsid	i
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	b662      	cpsie	i
 80050c8:	61bb      	str	r3, [r7, #24]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050ce:	f002 f8dd 	bl	800728c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01f      	beq.n	800511e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e2:	f000 face 	bl	8005682 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00f      	beq.n	8005116 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	3310      	adds	r3, #16
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f8a0 	bl	8006240 <xTaskRemoveFromEventList>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005106:	4b3d      	ldr	r3, [pc, #244]	; (80051fc <xQueueReceive+0x1c8>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005116:	f002 f8ed 	bl	80072f4 <vPortExitCritical>
				return pdPASS;
 800511a:	2301      	movs	r3, #1
 800511c:	e069      	b.n	80051f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005124:	f002 f8e6 	bl	80072f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005128:	2300      	movs	r3, #0
 800512a:	e062      	b.n	80051f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f8e8 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800513c:	2301      	movs	r3, #1
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005140:	f002 f8d8 	bl	80072f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005144:	f000 fe36 	bl	8005db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005148:	f002 f8a0 	bl	800728c <vPortEnterCritical>
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005152:	b25b      	sxtb	r3, r3
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d103      	bne.n	8005162 <xQueueReceive+0x12e>
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005168:	b25b      	sxtb	r3, r3
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d103      	bne.n	8005178 <xQueueReceive+0x144>
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005178:	f002 f8bc 	bl	80072f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517c:	1d3a      	adds	r2, r7, #4
 800517e:	f107 0310 	add.w	r3, r7, #16
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f001 f8d7 	bl	8006338 <xTaskCheckForTimeOut>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d123      	bne.n	80051d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005192:	f000 faee 	bl	8005772 <prvIsQueueEmpty>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fff7 	bl	8006198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ac:	f000 fa8f 	bl	80056ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051b0:	f000 fe0e 	bl	8005dd0 <xTaskResumeAll>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d189      	bne.n	80050ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <xQueueReceive+0x1c8>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	e780      	b.n	80050ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ce:	f000 fa7e 	bl	80056ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d2:	f000 fdfd 	bl	8005dd0 <xTaskResumeAll>
 80051d6:	e77a      	b.n	80050ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051da:	f000 fa78 	bl	80056ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051de:	f000 fdf7 	bl	8005dd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e4:	f000 fac5 	bl	8005772 <prvIsQueueEmpty>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f43f af6f 	beq.w	80050ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	; 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10c      	bne.n	8005236 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	b672      	cpsid	i
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	b662      	cpsie	i
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	b672      	cpsid	i
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	b662      	cpsie	i
 8005252:	61fb      	str	r3, [r7, #28]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005258:	f001 f9cc 	bl	80065f4 <xTaskGetSchedulerState>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <xQueueSemaphoreTake+0x68>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <xQueueSemaphoreTake+0x6c>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <xQueueSemaphoreTake+0x6e>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	b672      	cpsid	i
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	b662      	cpsie	i
 8005286:	61bb      	str	r3, [r7, #24]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800528c:	f001 fffe 	bl	800728c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	d024      	beq.n	80052e6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	1e5a      	subs	r2, r3, #1
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052ac:	f001 fb20 	bl	80068f0 <pvTaskIncrementMutexHeldCount>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00f      	beq.n	80052de <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	3310      	adds	r3, #16
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 ffbc 	bl	8006240 <xTaskRemoveFromEventList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052ce:	4b55      	ldr	r3, [pc, #340]	; (8005424 <xQueueSemaphoreTake+0x224>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052de:	f002 f809 	bl	80072f4 <vPortExitCritical>
				return pdPASS;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e099      	b.n	800541a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d113      	bne.n	8005314 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	b672      	cpsid	i
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	b662      	cpsie	i
 8005306:	617b      	str	r3, [r7, #20]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800530c:	f001 fff2 	bl	80072f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005310:	2300      	movs	r3, #0
 8005312:	e082      	b.n	800541a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fff4 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005328:	f001 ffe4 	bl	80072f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532c:	f000 fd42 	bl	8005db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005330:	f001 ffac 	bl	800728c <vPortEnterCritical>
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <xQueueSemaphoreTake+0x14a>
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d103      	bne.n	8005360 <xQueueSemaphoreTake+0x160>
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005360:	f001 ffc8 	bl	80072f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005364:	463a      	mov	r2, r7
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 ffe3 	bl	8006338 <xTaskCheckForTimeOut>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d132      	bne.n	80053de <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800537a:	f000 f9fa 	bl	8005772 <prvIsQueueEmpty>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d026      	beq.n	80053d2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800538c:	f001 ff7e 	bl	800728c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4618      	mov	r0, r3
 8005396:	f001 f94b 	bl	8006630 <xTaskPriorityInherit>
 800539a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800539c:	f001 ffaa 	bl	80072f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	3324      	adds	r3, #36	; 0x24
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fef5 	bl	8006198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053b0:	f000 f98d 	bl	80056ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053b4:	f000 fd0c 	bl	8005dd0 <xTaskResumeAll>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f47f af66 	bne.w	800528c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80053c0:	4b18      	ldr	r3, [pc, #96]	; (8005424 <xQueueSemaphoreTake+0x224>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	e75c      	b.n	800528c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053d4:	f000 f97b 	bl	80056ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053d8:	f000 fcfa 	bl	8005dd0 <xTaskResumeAll>
 80053dc:	e756      	b.n	800528c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053e0:	f000 f975 	bl	80056ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053e4:	f000 fcf4 	bl	8005dd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053ea:	f000 f9c2 	bl	8005772 <prvIsQueueEmpty>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f43f af4b 	beq.w	800528c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80053fc:	f001 ff46 	bl	800728c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005402:	f000 f8bc 	bl	800557e <prvGetDisinheritPriorityAfterTimeout>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800540e:	4618      	mov	r0, r3
 8005410:	f001 f9e8 	bl	80067e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005414:	f001 ff6e 	bl	80072f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800541a:	4618      	mov	r0, r3
 800541c:	3738      	adds	r7, #56	; 0x38
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10c      	bne.n	8005458 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	b672      	cpsid	i
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	b662      	cpsie	i
 8005452:	623b      	str	r3, [r7, #32]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <xQueueReceiveFromISR+0x3e>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <xQueueReceiveFromISR+0x42>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <xQueueReceiveFromISR+0x44>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	b662      	cpsie	i
 8005484:	61fb      	str	r3, [r7, #28]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800548a:	f001 ffe7 	bl	800745c <vPortValidateInterruptPriority>
	__asm volatile
 800548e:	f3ef 8211 	mrs	r2, BASEPRI
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	b672      	cpsid	i
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	b662      	cpsie	i
 80054a6:	61ba      	str	r2, [r7, #24]
 80054a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80054aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02f      	beq.n	800551a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c8:	f000 f8db 	bl	8005682 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80054d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d112      	bne.n	8005504 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d016      	beq.n	8005514 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	3310      	adds	r3, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fea8 	bl	8006240 <xTaskRemoveFromEventList>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00e      	beq.n	8005514 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e007      	b.n	8005514 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005508:	3301      	adds	r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	b25a      	sxtb	r2, r3
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005514:	2301      	movs	r3, #1
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
 8005518:	e001      	b.n	800551e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f383 8811 	msr	BASEPRI, r3
}
 8005528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800552c:	4618      	mov	r0, r3
 800552e:	3738      	adds	r7, #56	; 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10c      	bne.n	8005560 <vQueueDelete+0x2c>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	b672      	cpsid	i
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	b662      	cpsie	i
 800555a:	60bb      	str	r3, [r7, #8]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f95f 	bl	8005824 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f002 f881 	bl	8007678 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e001      	b.n	80055a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80055a0:	68fb      	ldr	r3, [r7, #12]
	}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d14d      	bne.n	8005670 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f891 	bl	8006700 <xTaskPriorityDisinherit>
 80055de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	e043      	b.n	8005670 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d119      	bne.n	8005622 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6858      	ldr	r0, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	461a      	mov	r2, r3
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	f00c faa8 	bl	8011b4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d32b      	bcc.n	8005670 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	e026      	b.n	8005670 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68d8      	ldr	r0, [r3, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	461a      	mov	r2, r3
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	f00c fa8e 	bl	8011b4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	425b      	negs	r3, r3
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d207      	bcs.n	800565e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	425b      	negs	r3, r3
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d105      	bne.n	8005670 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3b01      	subs	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005678:	697b      	ldr	r3, [r7, #20]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d018      	beq.n	80056c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d303      	bcc.n	80056b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68d9      	ldr	r1, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	461a      	mov	r2, r3
 80056c0:	6838      	ldr	r0, [r7, #0]
 80056c2:	f00c fa44 	bl	8011b4e <memcpy>
	}
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d6:	f001 fdd9 	bl	800728c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e2:	e011      	b.n	8005708 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d012      	beq.n	8005712 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3324      	adds	r3, #36	; 0x24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fda5 	bl	8006240 <xTaskRemoveFromEventList>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056fc:	f000 fe82 	bl	8006404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	3b01      	subs	r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dce9      	bgt.n	80056e4 <prvUnlockQueue+0x16>
 8005710:	e000      	b.n	8005714 <prvUnlockQueue+0x46>
					break;
 8005712:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	22ff      	movs	r2, #255	; 0xff
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800571c:	f001 fdea 	bl	80072f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005720:	f001 fdb4 	bl	800728c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800572c:	e011      	b.n	8005752 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d012      	beq.n	800575c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3310      	adds	r3, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fd80 	bl	8006240 <xTaskRemoveFromEventList>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005746:	f000 fe5d 	bl	8006404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	3b01      	subs	r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005756:	2b00      	cmp	r3, #0
 8005758:	dce9      	bgt.n	800572e <prvUnlockQueue+0x60>
 800575a:	e000      	b.n	800575e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800575c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005766:	f001 fdc5 	bl	80072f4 <vPortExitCritical>
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800577a:	f001 fd87 	bl	800728c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e001      	b.n	8005790 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005790:	f001 fdb0 	bl	80072f4 <vPortExitCritical>

	return xReturn;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a6:	f001 fd71 	bl	800728c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d102      	bne.n	80057bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e001      	b.n	80057c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057c0:	f001 fd98 	bl	80072f4 <vPortExitCritical>

	return xReturn;
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e014      	b.n	800580a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057e0:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005802:	e006      	b.n	8005812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d9e7      	bls.n	80057e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20007d70 	.word	0x20007d70

08005824 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e016      	b.n	8005860 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005832:	4a10      	ldr	r2, [pc, #64]	; (8005874 <vQueueUnregisterQueue+0x50>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10b      	bne.n	800585a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005842:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <vQueueUnregisterQueue+0x50>)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2100      	movs	r1, #0
 8005848:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <vQueueUnregisterQueue+0x50>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
				break;
 8005858:	e006      	b.n	8005868 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b07      	cmp	r3, #7
 8005864:	d9e5      	bls.n	8005832 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20007d70 	.word	0x20007d70

08005878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005888:	f001 fd00 	bl	800728c <vPortEnterCritical>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005892:	b25b      	sxtb	r3, r3
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d103      	bne.n	80058a2 <vQueueWaitForMessageRestricted+0x2a>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a8:	b25b      	sxtb	r3, r3
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d103      	bne.n	80058b8 <vQueueWaitForMessageRestricted+0x40>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b8:	f001 fd1c 	bl	80072f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fc89 	bl	80061e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7ff fefb 	bl	80056ce <prvUnlockQueue>
	}
 80058d8:	bf00      	nop
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <xTaskCreateStatic+0x2e>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	b672      	cpsid	i
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	b662      	cpsie	i
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10c      	bne.n	800592e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	b672      	cpsid	i
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	b662      	cpsie	i
 8005928:	61fb      	str	r3, [r7, #28]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800592e:	23bc      	movs	r3, #188	; 0xbc
 8005930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2bbc      	cmp	r3, #188	; 0xbc
 8005936:	d00c      	beq.n	8005952 <xTaskCreateStatic+0x72>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	b672      	cpsid	i
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	b662      	cpsie	i
 800594c:	61bb      	str	r3, [r7, #24]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01e      	beq.n	8005998 <xTaskCreateStatic+0xb8>
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2202      	movs	r2, #2
 800596e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005972:	2300      	movs	r3, #0
 8005974:	9303      	str	r3, [sp, #12]
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	f107 0314 	add.w	r3, r7, #20
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f850 	bl	8005a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005992:	f000 f8f5 	bl	8005b80 <prvAddNewTaskToReadyList>
 8005996:	e001      	b.n	800599c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800599c:	697b      	ldr	r3, [r7, #20]
	}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08c      	sub	sp, #48	; 0x30
 80059aa:	af04      	add	r7, sp, #16
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fd92 	bl	80074e4 <pvPortMalloc>
 80059c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059c8:	20bc      	movs	r0, #188	; 0xbc
 80059ca:	f001 fd8b 	bl	80074e4 <pvPortMalloc>
 80059ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
 80059dc:	e005      	b.n	80059ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f001 fe4a 	bl	8007678 <vPortFree>
 80059e4:	e001      	b.n	80059ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f80e 	bl	8005a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a14:	69f8      	ldr	r0, [r7, #28]
 8005a16:	f000 f8b3 	bl	8005b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e002      	b.n	8005a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a26:	69bb      	ldr	r3, [r7, #24]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	461a      	mov	r2, r3
 8005a48:	21a5      	movs	r1, #165	; 0xa5
 8005a4a:	f00c f88e 	bl	8011b6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005a58:	440b      	add	r3, r1
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	b672      	cpsid	i
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	b662      	cpsie	i
 8005a86:	617b      	str	r3, [r7, #20]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01f      	beq.n	8005ad2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	e012      	b.n	8005abe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	7819      	ldrb	r1, [r3, #0]
 8005aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3334      	adds	r3, #52	; 0x34
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	3301      	adds	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d9e9      	bls.n	8005a98 <prvInitialiseNewTask+0x68>
 8005ac4:	e000      	b.n	8005ac8 <prvInitialiseNewTask+0x98>
			{
				break;
 8005ac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad0:	e003      	b.n	8005ada <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	2b37      	cmp	r3, #55	; 0x37
 8005ade:	d901      	bls.n	8005ae4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ae0:	2337      	movs	r3, #55	; 0x37
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	2200      	movs	r2, #0
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	3304      	adds	r3, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fd4c 	bl	8004598 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	3318      	adds	r3, #24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fd47 	bl	8004598 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	3354      	adds	r3, #84	; 0x54
 8005b34:	2260      	movs	r2, #96	; 0x60
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f00c f816 	bl	8011b6a <memset>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	4a0c      	ldr	r2, [pc, #48]	; (8005b74 <prvInitialiseNewTask+0x144>)
 8005b42:	659a      	str	r2, [r3, #88]	; 0x58
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <prvInitialiseNewTask+0x148>)
 8005b48:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <prvInitialiseNewTask+0x14c>)
 8005b4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	69b8      	ldr	r0, [r7, #24]
 8005b56:	f001 fa8f 	bl	8007078 <pxPortInitialiseStack>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6c:	bf00      	nop
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08015748 	.word	0x08015748
 8005b78:	08015768 	.word	0x08015768
 8005b7c:	08015728 	.word	0x08015728

08005b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b88:	f001 fb80 	bl	800728c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <prvAddNewTaskToReadyList+0xc4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <prvAddNewTaskToReadyList+0xc4>)
 8005b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b96:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <prvAddNewTaskToReadyList+0xc8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <prvAddNewTaskToReadyList+0xc8>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <prvAddNewTaskToReadyList+0xc4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d110      	bne.n	8005bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bac:	f000 fc4e 	bl	800644c <prvInitialiseTaskLists>
 8005bb0:	e00d      	b.n	8005bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <prvAddNewTaskToReadyList+0xcc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <prvAddNewTaskToReadyList+0xc8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d802      	bhi.n	8005bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <prvAddNewTaskToReadyList+0xc8>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bce:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <prvAddNewTaskToReadyList+0xd0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <prvAddNewTaskToReadyList+0xd0>)
 8005bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <prvAddNewTaskToReadyList+0xd0>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <prvAddNewTaskToReadyList+0xd4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d903      	bls.n	8005bf4 <prvAddNewTaskToReadyList+0x74>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <prvAddNewTaskToReadyList+0xd4>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <prvAddNewTaskToReadyList+0xd8>)
 8005c02:	441a      	add	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7fe fcd1 	bl	80045b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c10:	f001 fb70 	bl	80072f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <prvAddNewTaskToReadyList+0xcc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00e      	beq.n	8005c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <prvAddNewTaskToReadyList+0xc8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d207      	bcs.n	8005c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <prvAddNewTaskToReadyList+0xdc>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000cf8 	.word	0x20000cf8
 8005c48:	20000824 	.word	0x20000824
 8005c4c:	20000d04 	.word	0x20000d04
 8005c50:	20000d14 	.word	0x20000d14
 8005c54:	20000d00 	.word	0x20000d00
 8005c58:	20000828 	.word	0x20000828
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d019      	beq.n	8005ca6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <vTaskDelay+0x64>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <vTaskDelay+0x34>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	b672      	cpsid	i
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	b662      	cpsie	i
 8005c8e:	60bb      	str	r3, [r7, #8]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005c94:	f000 f88e 	bl	8005db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fe3c 	bl	8006918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ca0:	f000 f896 	bl	8005dd0 <xTaskResumeAll>
 8005ca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <vTaskDelay+0x68>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000d20 	.word	0x20000d20
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cda:	463a      	mov	r2, r7
 8005cdc:	1d39      	adds	r1, r7, #4
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fc04 	bl	80044f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	4926      	ldr	r1, [pc, #152]	; (8005d94 <vTaskStartScheduler+0xc8>)
 8005cfc:	4826      	ldr	r0, [pc, #152]	; (8005d98 <vTaskStartScheduler+0xcc>)
 8005cfe:	f7ff fdef 	bl	80058e0 <xTaskCreateStatic>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4a25      	ldr	r2, [pc, #148]	; (8005d9c <vTaskStartScheduler+0xd0>)
 8005d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d08:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <vTaskStartScheduler+0xd0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d20:	f000 fe4e 	bl	80069c0 <xTimerCreateTimerTask>
 8005d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d11d      	bne.n	8005d68 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	b672      	cpsid	i
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	b662      	cpsie	i
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <vTaskStartScheduler+0xd4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3354      	adds	r3, #84	; 0x54
 8005d4a:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <vTaskStartScheduler+0xd8>)
 8005d4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d4e:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <vTaskStartScheduler+0xdc>)
 8005d50:	f04f 32ff 	mov.w	r2, #4294967295
 8005d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <vTaskStartScheduler+0xe0>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <vTaskStartScheduler+0xe4>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d62:	f001 fa15 	bl	8007190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d66:	e010      	b.n	8005d8a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d10c      	bne.n	8005d8a <vTaskStartScheduler+0xbe>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	b672      	cpsid	i
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	b662      	cpsie	i
 8005d84:	60fb      	str	r3, [r7, #12]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <vTaskStartScheduler+0xbc>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	08012b30 	.word	0x08012b30
 8005d98:	0800641d 	.word	0x0800641d
 8005d9c:	20000d1c 	.word	0x20000d1c
 8005da0:	20000824 	.word	0x20000824
 8005da4:	2000001c 	.word	0x2000001c
 8005da8:	20000d18 	.word	0x20000d18
 8005dac:	20000d04 	.word	0x20000d04
 8005db0:	20000cfc 	.word	0x20000cfc

08005db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <vTaskSuspendAll+0x18>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a03      	ldr	r2, [pc, #12]	; (8005dcc <vTaskSuspendAll+0x18>)
 8005dc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005dc2:	bf00      	nop
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	20000d20 	.word	0x20000d20

08005dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dde:	4b43      	ldr	r3, [pc, #268]	; (8005eec <xTaskResumeAll+0x11c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10c      	bne.n	8005e00 <xTaskResumeAll+0x30>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	b672      	cpsid	i
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	b662      	cpsie	i
 8005dfa:	603b      	str	r3, [r7, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e00:	f001 fa44 	bl	800728c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e04:	4b39      	ldr	r3, [pc, #228]	; (8005eec <xTaskResumeAll+0x11c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <xTaskResumeAll+0x11c>)
 8005e0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0e:	4b37      	ldr	r3, [pc, #220]	; (8005eec <xTaskResumeAll+0x11c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d162      	bne.n	8005edc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <xTaskResumeAll+0x120>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d05e      	beq.n	8005edc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e1e:	e02f      	b.n	8005e80 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e20:	4b34      	ldr	r3, [pc, #208]	; (8005ef4 <xTaskResumeAll+0x124>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3318      	adds	r3, #24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fe fc1d 	bl	800466c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fc18 	bl	800466c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4b2d      	ldr	r3, [pc, #180]	; (8005ef8 <xTaskResumeAll+0x128>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d903      	bls.n	8005e50 <xTaskResumeAll+0x80>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <xTaskResumeAll+0x128>)
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4a27      	ldr	r2, [pc, #156]	; (8005efc <xTaskResumeAll+0x12c>)
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fe fba3 	bl	80045b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4b23      	ldr	r3, [pc, #140]	; (8005f00 <xTaskResumeAll+0x130>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005e7a:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <xTaskResumeAll+0x134>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e80:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <xTaskResumeAll+0x124>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1cb      	bne.n	8005e20 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e8e:	f000 fb81 	bl	8006594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <xTaskResumeAll+0x138>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e9e:	f000 f859 	bl	8005f54 <xTaskIncrementTick>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005ea8:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <xTaskResumeAll+0x134>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f1      	bne.n	8005e9e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <xTaskResumeAll+0x138>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <xTaskResumeAll+0x134>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <xTaskResumeAll+0x13c>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005edc:	f001 fa0a 	bl	80072f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000d20 	.word	0x20000d20
 8005ef0:	20000cf8 	.word	0x20000cf8
 8005ef4:	20000cb8 	.word	0x20000cb8
 8005ef8:	20000d00 	.word	0x20000d00
 8005efc:	20000828 	.word	0x20000828
 8005f00:	20000824 	.word	0x20000824
 8005f04:	20000d0c 	.word	0x20000d0c
 8005f08:	20000d08 	.word	0x20000d08
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <xTaskGetTickCount+0x1c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f1c:	687b      	ldr	r3, [r7, #4]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000cfc 	.word	0x20000cfc

08005f30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f36:	f001 fa91 	bl	800745c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <xTaskGetTickCountFromISR+0x20>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f44:	683b      	ldr	r3, [r7, #0]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000cfc 	.word	0x20000cfc

08005f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5e:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <xTaskIncrementTick+0x14c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 808b 	bne.w	800607e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f68:	4b4e      	ldr	r3, [pc, #312]	; (80060a4 <xTaskIncrementTick+0x150>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f70:	4a4c      	ldr	r2, [pc, #304]	; (80060a4 <xTaskIncrementTick+0x150>)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d122      	bne.n	8005fc2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f7c:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	b672      	cpsid	i
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	b662      	cpsie	i
 8005f9a:	603b      	str	r3, [r7, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <xTaskIncrementTick+0x4a>
 8005fa0:	4b41      	ldr	r3, [pc, #260]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	4b41      	ldr	r3, [pc, #260]	; (80060ac <xTaskIncrementTick+0x158>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3f      	ldr	r2, [pc, #252]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4a3f      	ldr	r2, [pc, #252]	; (80060ac <xTaskIncrementTick+0x158>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <xTaskIncrementTick+0x15c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a3d      	ldr	r2, [pc, #244]	; (80060b0 <xTaskIncrementTick+0x15c>)
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	f000 fae9 	bl	8006594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fc2:	4b3c      	ldr	r3, [pc, #240]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d349      	bcc.n	8006060 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd6:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	601a      	str	r2, [r3, #0]
					break;
 8005fde:	e03f      	b.n	8006060 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe0:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d203      	bcs.n	8006000 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ffe:	e02f      	b.n	8006060 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fb31 	bl	800466c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3318      	adds	r3, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fb28 	bl	800466c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <xTaskIncrementTick+0x164>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <xTaskIncrementTick+0xdc>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a22      	ldr	r2, [pc, #136]	; (80060b8 <xTaskIncrementTick+0x164>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <xTaskIncrementTick+0x168>)
 800603e:	441a      	add	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7fe fab3 	bl	80045b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <xTaskIncrementTick+0x16c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	429a      	cmp	r2, r3
 8006058:	d3b8      	bcc.n	8005fcc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605e:	e7b5      	b.n	8005fcc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <xTaskIncrementTick+0x16c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	4915      	ldr	r1, [pc, #84]	; (80060bc <xTaskIncrementTick+0x168>)
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d907      	bls.n	8006088 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e004      	b.n	8006088 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800607e:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <xTaskIncrementTick+0x170>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <xTaskIncrementTick+0x170>)
 8006086:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <xTaskIncrementTick+0x174>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006094:	697b      	ldr	r3, [r7, #20]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000d20 	.word	0x20000d20
 80060a4:	20000cfc 	.word	0x20000cfc
 80060a8:	20000cb0 	.word	0x20000cb0
 80060ac:	20000cb4 	.word	0x20000cb4
 80060b0:	20000d10 	.word	0x20000d10
 80060b4:	20000d18 	.word	0x20000d18
 80060b8:	20000d00 	.word	0x20000d00
 80060bc:	20000828 	.word	0x20000828
 80060c0:	20000824 	.word	0x20000824
 80060c4:	20000d08 	.word	0x20000d08
 80060c8:	20000d0c 	.word	0x20000d0c

080060cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060d2:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <vTaskSwitchContext+0xb4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060da:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <vTaskSwitchContext+0xb8>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e0:	e048      	b.n	8006174 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80060e2:	4b28      	ldr	r3, [pc, #160]	; (8006184 <vTaskSwitchContext+0xb8>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e8:	4b27      	ldr	r3, [pc, #156]	; (8006188 <vTaskSwitchContext+0xbc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e012      	b.n	8006116 <vTaskSwitchContext+0x4a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10c      	bne.n	8006110 <vTaskSwitchContext+0x44>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	b672      	cpsid	i
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	b662      	cpsie	i
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <vTaskSwitchContext+0x42>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b01      	subs	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	491d      	ldr	r1, [pc, #116]	; (800618c <vTaskSwitchContext+0xc0>)
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0e2      	beq.n	80060f0 <vTaskSwitchContext+0x24>
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a15      	ldr	r2, [pc, #84]	; (800618c <vTaskSwitchContext+0xc0>)
 8006136:	4413      	add	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	3308      	adds	r3, #8
 800614c:	429a      	cmp	r2, r3
 800614e:	d104      	bne.n	800615a <vTaskSwitchContext+0x8e>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <vTaskSwitchContext+0xc4>)
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4a08      	ldr	r2, [pc, #32]	; (8006188 <vTaskSwitchContext+0xbc>)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <vTaskSwitchContext+0xc4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3354      	adds	r3, #84	; 0x54
 8006170:	4a08      	ldr	r2, [pc, #32]	; (8006194 <vTaskSwitchContext+0xc8>)
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000d20 	.word	0x20000d20
 8006184:	20000d0c 	.word	0x20000d0c
 8006188:	20000d00 	.word	0x20000d00
 800618c:	20000828 	.word	0x20000828
 8006190:	20000824 	.word	0x20000824
 8006194:	2000001c 	.word	0x2000001c

08006198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	b672      	cpsid	i
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	b662      	cpsie	i
 80061bc:	60fb      	str	r3, [r7, #12]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <vTaskPlaceOnEventList+0x48>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3318      	adds	r3, #24
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fe fa15 	bl	80045fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061d0:	2101      	movs	r1, #1
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f000 fba0 	bl	8006918 <prvAddCurrentTaskToDelayedList>
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000824 	.word	0x20000824

080061e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10c      	bne.n	8006210 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	b672      	cpsid	i
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	b662      	cpsie	i
 800620a:	617b      	str	r3, [r7, #20]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <vTaskPlaceOnEventListRestricted+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3318      	adds	r3, #24
 8006216:	4619      	mov	r1, r3
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7fe f9ca 	bl	80045b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006224:	f04f 33ff 	mov.w	r3, #4294967295
 8006228:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68b8      	ldr	r0, [r7, #8]
 800622e:	f000 fb73 	bl	8006918 <prvAddCurrentTaskToDelayedList>
	}
 8006232:	bf00      	nop
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000824 	.word	0x20000824

08006240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10c      	bne.n	8006270 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	b672      	cpsid	i
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	b662      	cpsie	i
 800626a:	60fb      	str	r3, [r7, #12]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	3318      	adds	r3, #24
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe f9f9 	bl	800466c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <xTaskRemoveFromEventList+0xb4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11d      	bne.n	80062be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f9f0 	bl	800466c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <xTaskRemoveFromEventList+0xb8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d903      	bls.n	80062a0 <xTaskRemoveFromEventList+0x60>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <xTaskRemoveFromEventList+0xb8>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <xTaskRemoveFromEventList+0xbc>)
 80062ae:	441a      	add	r2, r3
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe f97b 	bl	80045b2 <vListInsertEnd>
 80062bc:	e005      	b.n	80062ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3318      	adds	r3, #24
 80062c2:	4619      	mov	r1, r3
 80062c4:	480e      	ldr	r0, [pc, #56]	; (8006300 <xTaskRemoveFromEventList+0xc0>)
 80062c6:	f7fe f974 	bl	80045b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <xTaskRemoveFromEventList+0xc4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d905      	bls.n	80062e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <xTaskRemoveFromEventList+0xc8>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e001      	b.n	80062e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062e8:	697b      	ldr	r3, [r7, #20]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000d20 	.word	0x20000d20
 80062f8:	20000d00 	.word	0x20000d00
 80062fc:	20000828 	.word	0x20000828
 8006300:	20000cb8 	.word	0x20000cb8
 8006304:	20000824 	.word	0x20000824
 8006308:	20000d0c 	.word	0x20000d0c

0800630c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <vTaskInternalSetTimeOutState+0x24>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <vTaskInternalSetTimeOutState+0x28>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	605a      	str	r2, [r3, #4]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	20000d10 	.word	0x20000d10
 8006334:	20000cfc 	.word	0x20000cfc

08006338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10c      	bne.n	8006362 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	b672      	cpsid	i
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	b662      	cpsie	i
 800635c:	613b      	str	r3, [r7, #16]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006382:	f000 ff83 	bl	800728c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <xTaskCheckForTimeOut+0xc4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d102      	bne.n	80063a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e023      	b.n	80063ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b15      	ldr	r3, [pc, #84]	; (8006400 <xTaskCheckForTimeOut+0xc8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d007      	beq.n	80063c2 <xTaskCheckForTimeOut+0x8a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d302      	bcc.n	80063c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e015      	b.n	80063ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d20b      	bcs.n	80063e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff97 	bl	800630c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e004      	b.n	80063ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ea:	2301      	movs	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063ee:	f000 ff81 	bl	80072f4 <vPortExitCritical>

	return xReturn;
 80063f2:	69fb      	ldr	r3, [r7, #28]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000cfc 	.word	0x20000cfc
 8006400:	20000d10 	.word	0x20000d10

08006404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <vTaskMissedYield+0x14>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20000d0c 	.word	0x20000d0c

0800641c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006424:	f000 f852 	bl	80064cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <prvIdleTask+0x28>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d9f9      	bls.n	8006424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <prvIdleTask+0x2c>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006440:	e7f0      	b.n	8006424 <prvIdleTask+0x8>
 8006442:	bf00      	nop
 8006444:	20000828 	.word	0x20000828
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	e00c      	b.n	8006472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <prvInitialiseTaskLists+0x60>)
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe f876 	bl	8004558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3301      	adds	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b37      	cmp	r3, #55	; 0x37
 8006476:	d9ef      	bls.n	8006458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006478:	480d      	ldr	r0, [pc, #52]	; (80064b0 <prvInitialiseTaskLists+0x64>)
 800647a:	f7fe f86d 	bl	8004558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800647e:	480d      	ldr	r0, [pc, #52]	; (80064b4 <prvInitialiseTaskLists+0x68>)
 8006480:	f7fe f86a 	bl	8004558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006484:	480c      	ldr	r0, [pc, #48]	; (80064b8 <prvInitialiseTaskLists+0x6c>)
 8006486:	f7fe f867 	bl	8004558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800648a:	480c      	ldr	r0, [pc, #48]	; (80064bc <prvInitialiseTaskLists+0x70>)
 800648c:	f7fe f864 	bl	8004558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006490:	480b      	ldr	r0, [pc, #44]	; (80064c0 <prvInitialiseTaskLists+0x74>)
 8006492:	f7fe f861 	bl	8004558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <prvInitialiseTaskLists+0x78>)
 8006498:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <prvInitialiseTaskLists+0x64>)
 800649a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <prvInitialiseTaskLists+0x7c>)
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <prvInitialiseTaskLists+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000828 	.word	0x20000828
 80064b0:	20000c88 	.word	0x20000c88
 80064b4:	20000c9c 	.word	0x20000c9c
 80064b8:	20000cb8 	.word	0x20000cb8
 80064bc:	20000ccc 	.word	0x20000ccc
 80064c0:	20000ce4 	.word	0x20000ce4
 80064c4:	20000cb0 	.word	0x20000cb0
 80064c8:	20000cb4 	.word	0x20000cb4

080064cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d2:	e019      	b.n	8006508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064d4:	f000 feda 	bl	800728c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d8:	4b10      	ldr	r3, [pc, #64]	; (800651c <prvCheckTasksWaitingTermination+0x50>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe f8c1 	bl	800466c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064fe:	f000 fef9 	bl	80072f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f810 	bl	8006528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <prvCheckTasksWaitingTermination+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e1      	bne.n	80064d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000ccc 	.word	0x20000ccc
 8006520:	20000cf8 	.word	0x20000cf8
 8006524:	20000ce0 	.word	0x20000ce0

08006528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3354      	adds	r3, #84	; 0x54
 8006534:	4618      	mov	r0, r3
 8006536:	f00b fbe1 	bl	8011cfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4618      	mov	r0, r3
 800654a:	f001 f895 	bl	8007678 <vPortFree>
				vPortFree( pxTCB );
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f892 	bl	8007678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006554:	e01a      	b.n	800658c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800655c:	2b01      	cmp	r3, #1
 800655e:	d103      	bne.n	8006568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f889 	bl	8007678 <vPortFree>
	}
 8006566:	e011      	b.n	800658c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800656e:	2b02      	cmp	r3, #2
 8006570:	d00c      	beq.n	800658c <prvDeleteTCB+0x64>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	b672      	cpsid	i
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	b662      	cpsie	i
 8006586:	60fb      	str	r3, [r7, #12]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <prvDeleteTCB+0x62>
	}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <prvResetNextTaskUnblockTime+0x38>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvResetNextTaskUnblockTime+0x3c>)
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065ac:	e008      	b.n	80065c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <prvResetNextTaskUnblockTime+0x38>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <prvResetNextTaskUnblockTime+0x3c>)
 80065be:	6013      	str	r3, [r2, #0]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000cb0 	.word	0x20000cb0
 80065d0:	20000d18 	.word	0x20000d18

080065d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80065e0:	687b      	ldr	r3, [r7, #4]
	}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000824 	.word	0x20000824

080065f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <xTaskGetSchedulerState+0x34>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006602:	2301      	movs	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	e008      	b.n	800661a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006608:	4b08      	ldr	r3, [pc, #32]	; (800662c <xTaskGetSchedulerState+0x38>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006610:	2302      	movs	r3, #2
 8006612:	607b      	str	r3, [r7, #4]
 8006614:	e001      	b.n	800661a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800661a:	687b      	ldr	r3, [r7, #4]
	}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000d04 	.word	0x20000d04
 800662c:	20000d20 	.word	0x20000d20

08006630 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d051      	beq.n	80066ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <xTaskPriorityInherit+0xc4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	429a      	cmp	r2, r3
 8006652:	d241      	bcs.n	80066d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db06      	blt.n	800666a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <xTaskPriorityInherit+0xc4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6959      	ldr	r1, [r3, #20]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <xTaskPriorityInherit+0xc8>)
 800667c:	4413      	add	r3, r2
 800667e:	4299      	cmp	r1, r3
 8006680:	d122      	bne.n	80066c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3304      	adds	r3, #4
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd fff0 	bl	800466c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800668c:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <xTaskPriorityInherit+0xc4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <xTaskPriorityInherit+0xcc>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d903      	bls.n	80066aa <xTaskPriorityInherit+0x7a>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	4a15      	ldr	r2, [pc, #84]	; (80066fc <xTaskPriorityInherit+0xcc>)
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <xTaskPriorityInherit+0xc8>)
 80066b8:	441a      	add	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fd ff76 	bl	80045b2 <vListInsertEnd>
 80066c6:	e004      	b.n	80066d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <xTaskPriorityInherit+0xc4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e008      	b.n	80066ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <xTaskPriorityInherit+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d201      	bcs.n	80066ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066ea:	68fb      	ldr	r3, [r7, #12]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000824 	.word	0x20000824
 80066f8:	20000828 	.word	0x20000828
 80066fc:	20000d00 	.word	0x20000d00

08006700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05a      	beq.n	80067cc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006716:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <xTaskPriorityDisinherit+0xd8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d00c      	beq.n	800673a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	b672      	cpsid	i
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	b662      	cpsie	i
 8006734:	60fb      	str	r3, [r7, #12]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	b672      	cpsid	i
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	b662      	cpsie	i
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	429a      	cmp	r2, r3
 8006770:	d02c      	beq.n	80067cc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006776:	2b00      	cmp	r3, #0
 8006778:	d128      	bne.n	80067cc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd ff74 	bl	800466c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <xTaskPriorityDisinherit+0xdc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d903      	bls.n	80067ac <xTaskPriorityDisinherit+0xac>
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <xTaskPriorityDisinherit+0xdc>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <xTaskPriorityDisinherit+0xe0>)
 80067ba:	441a      	add	r2, r3
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fd fef5 	bl	80045b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067cc:	697b      	ldr	r3, [r7, #20]
	}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000824 	.word	0x20000824
 80067dc:	20000d00 	.word	0x20000d00
 80067e0:	20000828 	.word	0x20000828

080067e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d06e      	beq.n	80068da <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10c      	bne.n	800681e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	b672      	cpsid	i
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	b662      	cpsie	i
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d902      	bls.n	800682e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e002      	b.n	8006834 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006832:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	429a      	cmp	r2, r3
 800683c:	d04d      	beq.n	80068da <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	429a      	cmp	r2, r3
 8006846:	d148      	bne.n	80068da <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006848:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	429a      	cmp	r2, r3
 8006850:	d10c      	bne.n	800686c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	b672      	cpsid	i
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	b662      	cpsie	i
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	db04      	blt.n	800688a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	6959      	ldr	r1, [r3, #20]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800689a:	4413      	add	r3, r2
 800689c:	4299      	cmp	r1, r3
 800689e:	d11c      	bne.n	80068da <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd fee1 	bl	800466c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d903      	bls.n	80068be <vTaskPriorityDisinheritAfterTimeout+0xda>
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	4a0c      	ldr	r2, [pc, #48]	; (80068ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068cc:	441a      	add	r2, r3
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fd fe6c 	bl	80045b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068da:	bf00      	nop
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000824 	.word	0x20000824
 80068e8:	20000828 	.word	0x20000828
 80068ec:	20000d00 	.word	0x20000d00

080068f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <pvTaskIncrementMutexHeldCount+0x24>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <pvTaskIncrementMutexHeldCount+0x24>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006902:	3201      	adds	r2, #1
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006906:	4b03      	ldr	r3, [pc, #12]	; (8006914 <pvTaskIncrementMutexHeldCount+0x24>)
 8006908:	681b      	ldr	r3, [r3, #0]
	}
 800690a:	4618      	mov	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20000824 	.word	0x20000824

08006918 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006928:	4b20      	ldr	r3, [pc, #128]	; (80069ac <prvAddCurrentTaskToDelayedList+0x94>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3304      	adds	r3, #4
 800692e:	4618      	mov	r0, r3
 8006930:	f7fd fe9c 	bl	800466c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d10a      	bne.n	8006952 <prvAddCurrentTaskToDelayedList+0x3a>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4819      	ldr	r0, [pc, #100]	; (80069b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800694c:	f7fd fe31 	bl	80045b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006950:	e026      	b.n	80069a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <prvAddCurrentTaskToDelayedList+0x94>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d209      	bcs.n	800697e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fd fe3f 	bl	80045fa <vListInsert>
}
 800697c:	e010      	b.n	80069a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fd fe35 	bl	80045fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d202      	bcs.n	80069a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000cfc 	.word	0x20000cfc
 80069ac:	20000824 	.word	0x20000824
 80069b0:	20000ce4 	.word	0x20000ce4
 80069b4:	20000cb4 	.word	0x20000cb4
 80069b8:	20000cb0 	.word	0x20000cb0
 80069bc:	20000d18 	.word	0x20000d18

080069c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069ca:	f000 fb15 	bl	8006ff8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <xTimerCreateTimerTask+0x84>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d021      	beq.n	8006a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069de:	1d3a      	adds	r2, r7, #4
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd fd9b 	bl	8004524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	9202      	str	r2, [sp, #8]
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2302      	movs	r3, #2
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	2300      	movs	r3, #0
 80069fe:	460a      	mov	r2, r1
 8006a00:	4911      	ldr	r1, [pc, #68]	; (8006a48 <xTimerCreateTimerTask+0x88>)
 8006a02:	4812      	ldr	r0, [pc, #72]	; (8006a4c <xTimerCreateTimerTask+0x8c>)
 8006a04:	f7fe ff6c 	bl	80058e0 <xTaskCreateStatic>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <xTimerCreateTimerTask+0x90>)
 8006a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <xTimerCreateTimerTask+0x90>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10c      	bne.n	8006a3a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	b672      	cpsid	i
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	613b      	str	r3, [r7, #16]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006a3a:	697b      	ldr	r3, [r7, #20]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000d54 	.word	0x20000d54
 8006a48:	08012b38 	.word	0x08012b38
 8006a4c:	08006b91 	.word	0x08006b91
 8006a50:	20000d58 	.word	0x20000d58

08006a54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10c      	bne.n	8006a86 <xTimerGenericCommand+0x32>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	b672      	cpsid	i
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	b662      	cpsie	i
 8006a80:	623b      	str	r3, [r7, #32]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a86:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <xTimerGenericCommand+0x9c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02a      	beq.n	8006ae4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	dc18      	bgt.n	8006ad2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aa0:	f7ff fda8 	bl	80065f4 <xTaskGetSchedulerState>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d109      	bne.n	8006abe <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006aaa:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <xTimerGenericCommand+0x9c>)
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	f107 0110 	add.w	r1, r7, #16
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	f7fe f881 	bl	8004bbc <xQueueGenericSend>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24
 8006abc:	e012      	b.n	8006ae4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <xTimerGenericCommand+0x9c>)
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	f107 0110 	add.w	r1, r7, #16
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f7fe f877 	bl	8004bbc <xQueueGenericSend>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24
 8006ad0:	e008      	b.n	8006ae4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <xTimerGenericCommand+0x9c>)
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f107 0110 	add.w	r1, r7, #16
 8006ada:	2300      	movs	r3, #0
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	f7fe f973 	bl	8004dc8 <xQueueGenericSendFromISR>
 8006ae2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	; 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000d54 	.word	0x20000d54

08006af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afe:	4b23      	ldr	r3, [pc, #140]	; (8006b8c <prvProcessExpiredTimer+0x98>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fdad 	bl	800466c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d024      	beq.n	8006b6a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	18d1      	adds	r1, r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	f000 f8d3 	bl	8006cd8 <prvInsertTimerInActiveList>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d021      	beq.n	8006b7c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	2100      	movs	r1, #0
 8006b42:	6978      	ldr	r0, [r7, #20]
 8006b44:	f7ff ff86 	bl	8006a54 <xTimerGenericCommand>
 8006b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d115      	bne.n	8006b7c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	b672      	cpsid	i
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	b662      	cpsie	i
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	6978      	ldr	r0, [r7, #20]
 8006b82:	4798      	blx	r3
}
 8006b84:	bf00      	nop
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000d4c 	.word	0x20000d4c

08006b90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f857 	bl	8006c50 <prvGetNextExpireTime>
 8006ba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f803 	bl	8006bb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bae:	f000 f8d5 	bl	8006d5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bb2:	e7f1      	b.n	8006b98 <prvTimerTask+0x8>

08006bb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bbe:	f7ff f8f9 	bl	8005db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f866 	bl	8006c98 <prvSampleTimeNow>
 8006bcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d130      	bne.n	8006c36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <prvProcessTimerOrBlockTask+0x3c>
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d806      	bhi.n	8006bf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006be2:	f7ff f8f5 	bl	8005dd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff83 	bl	8006af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bee:	e024      	b.n	8006c3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <prvProcessTimerOrBlockTask+0x90>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <prvProcessTimerOrBlockTask+0x50>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <prvProcessTimerOrBlockTask+0x52>
 8006c04:	2300      	movs	r3, #0
 8006c06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c08:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <prvProcessTimerOrBlockTask+0x94>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7fe fe2f 	bl	8005878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c1a:	f7ff f8d9 	bl	8005dd0 <xTaskResumeAll>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c24:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <prvProcessTimerOrBlockTask+0x98>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
}
 8006c34:	e001      	b.n	8006c3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c36:	f7ff f8cb 	bl	8005dd0 <xTaskResumeAll>
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000d50 	.word	0x20000d50
 8006c48:	20000d54 	.word	0x20000d54
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <prvGetNextExpireTime+0x44>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <prvGetNextExpireTime+0x16>
 8006c62:	2201      	movs	r2, #1
 8006c64:	e000      	b.n	8006c68 <prvGetNextExpireTime+0x18>
 8006c66:	2200      	movs	r2, #0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <prvGetNextExpireTime+0x44>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e001      	b.n	8006c84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000d4c 	.word	0x20000d4c

08006c98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ca0:	f7ff f936 	bl	8005f10 <xTaskGetTickCount>
 8006ca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <prvSampleTimeNow+0x3c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d205      	bcs.n	8006cbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cb0:	f000 f93c 	bl	8006f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e002      	b.n	8006cc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cc2:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <prvSampleTimeNow+0x3c>)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000d5c 	.word	0x20000d5c

08006cd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d812      	bhi.n	8006d24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d302      	bcc.n	8006d12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e01b      	b.n	8006d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <prvInsertTimerInActiveList+0x7c>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	f7fd fc6c 	bl	80045fa <vListInsert>
 8006d22:	e012      	b.n	8006d4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d206      	bcs.n	8006d3a <prvInsertTimerInActiveList+0x62>
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d302      	bcc.n	8006d3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e007      	b.n	8006d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <prvInsertTimerInActiveList+0x80>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f7fd fc58 	bl	80045fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d4a:	697b      	ldr	r3, [r7, #20]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000d50 	.word	0x20000d50
 8006d58:	20000d4c 	.word	0x20000d4c

08006d5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08e      	sub	sp, #56	; 0x38
 8006d60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d62:	e0d0      	b.n	8006f06 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da1a      	bge.n	8006da0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10c      	bne.n	8006d90 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	b672      	cpsid	i
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	b662      	cpsie	i
 8006d8a:	61fb      	str	r3, [r7, #28]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d96:	6850      	ldr	r0, [r2, #4]
 8006d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9a:	6892      	ldr	r2, [r2, #8]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f2c0 80ae 	blt.w	8006f04 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	3304      	adds	r3, #4
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fd fc57 	bl	800466c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff69 	bl	8006c98 <prvSampleTimeNow>
 8006dc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	f200 809b 	bhi.w	8006f06 <prvProcessReceivedCommands+0x1aa>
 8006dd0:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <prvProcessReceivedCommands+0x7c>)
 8006dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e79 	.word	0x08006e79
 8006de8:	08006e8d 	.word	0x08006e8d
 8006dec:	08006edb 	.word	0x08006edb
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e01 	.word	0x08006e01
 8006df8:	08006e79 	.word	0x08006e79
 8006dfc:	08006e8d 	.word	0x08006e8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	18d1      	adds	r1, r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e20:	f7ff ff5a 	bl	8006cd8 <prvInsertTimerInActiveList>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d06d      	beq.n	8006f06 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d062      	beq.n	8006f06 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	441a      	add	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e52:	f7ff fdff 	bl	8006a54 <xTimerGenericCommand>
 8006e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d153      	bne.n	8006f06 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	61bb      	str	r3, [r7, #24]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006e8a:	e03c      	b.n	8006f06 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10c      	bne.n	8006ec6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	b672      	cpsid	i
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	b662      	cpsie	i
 8006ec0:	617b      	str	r3, [r7, #20]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	18d1      	adds	r1, r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed4:	f7ff ff00 	bl	8006cd8 <prvInsertTimerInActiveList>
					break;
 8006ed8:	e015      	b.n	8006f06 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eea:	f000 fbc5 	bl	8007678 <vPortFree>
 8006eee:	e00a      	b.n	8006f06 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f02:	e000      	b.n	8006f06 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <prvProcessReceivedCommands+0x1cc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1d39      	adds	r1, r7, #4
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe f890 	bl	8005034 <xQueueReceive>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f47f af24 	bne.w	8006d64 <prvProcessReceivedCommands+0x8>
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3730      	adds	r7, #48	; 0x30
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000d54 	.word	0x20000d54

08006f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f32:	e04a      	b.n	8006fca <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f34:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3e:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fb8d 	bl	800466c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d030      	beq.n	8006fca <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d90e      	bls.n	8006f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f86:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7fd fb32 	bl	80045fa <vListInsert>
 8006f96:	e018      	b.n	8006fca <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff fd56 	bl	8006a54 <xTimerGenericCommand>
 8006fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10c      	bne.n	8006fca <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	603b      	str	r3, [r7, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1af      	bne.n	8006f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <prvSwitchTimerLists+0xc8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fe2:	4a04      	ldr	r2, [pc, #16]	; (8006ff4 <prvSwitchTimerLists+0xc8>)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	6013      	str	r3, [r2, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000d4c 	.word	0x20000d4c
 8006ff4:	20000d50 	.word	0x20000d50

08006ff8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ffe:	f000 f945 	bl	800728c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d120      	bne.n	800704c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800700a:	4814      	ldr	r0, [pc, #80]	; (800705c <prvCheckForValidListAndQueue+0x64>)
 800700c:	f7fd faa4 	bl	8004558 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007010:	4813      	ldr	r0, [pc, #76]	; (8007060 <prvCheckForValidListAndQueue+0x68>)
 8007012:	f7fd faa1 	bl	8004558 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <prvCheckForValidListAndQueue+0x6c>)
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <prvCheckForValidListAndQueue+0x64>)
 800701a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <prvCheckForValidListAndQueue+0x70>)
 800701e:	4a10      	ldr	r2, [pc, #64]	; (8007060 <prvCheckForValidListAndQueue+0x68>)
 8007020:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007022:	2300      	movs	r3, #0
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <prvCheckForValidListAndQueue+0x74>)
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <prvCheckForValidListAndQueue+0x78>)
 800702a:	2110      	movs	r1, #16
 800702c:	200a      	movs	r0, #10
 800702e:	f7fd fbb1 	bl	8004794 <xQueueGenericCreateStatic>
 8007032:	4603      	mov	r3, r0
 8007034:	4a08      	ldr	r2, [pc, #32]	; (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007036:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <prvCheckForValidListAndQueue+0x60>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	490b      	ldr	r1, [pc, #44]	; (8007074 <prvCheckForValidListAndQueue+0x7c>)
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fbc2 	bl	80057d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800704c:	f000 f952 	bl	80072f4 <vPortExitCritical>
}
 8007050:	bf00      	nop
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000d54 	.word	0x20000d54
 800705c:	20000d24 	.word	0x20000d24
 8007060:	20000d38 	.word	0x20000d38
 8007064:	20000d4c 	.word	0x20000d4c
 8007068:	20000d50 	.word	0x20000d50
 800706c:	20000e00 	.word	0x20000e00
 8007070:	20000d60 	.word	0x20000d60
 8007074:	08012b40 	.word	0x08012b40

08007078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b04      	subs	r3, #4
 8007088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3b04      	subs	r3, #4
 8007096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3b04      	subs	r3, #4
 80070a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070a8:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <pxPortInitialiseStack+0x64>)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3b14      	subs	r3, #20
 80070b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b04      	subs	r3, #4
 80070be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f06f 0202 	mvn.w	r2, #2
 80070c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3b20      	subs	r3, #32
 80070cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	080070e1 	.word	0x080070e1

080070e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <prvTaskExitError+0x5c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d00c      	beq.n	800710e <prvTaskExitError+0x2e>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	b672      	cpsid	i
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	b662      	cpsie	i
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <prvTaskExitError+0x2c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007126:	bf00      	nop
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0fc      	beq.n	8007128 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	2000000c 	.word	0x2000000c

08007140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <prvPortStartFirstTask+0x24>)
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f380 8808 	msr	MSP, r0
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8814 	msr	CONTROL, r0
 800717a:	b662      	cpsie	i
 800717c:	b661      	cpsie	f
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	df00      	svc	0
 8007188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800718a:	bf00      	nop
 800718c:	e000ed08 	.word	0xe000ed08

08007190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <xPortStartScheduler+0xe4>)
 8007198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	22ff      	movs	r2, #255	; 0xff
 80071a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b2f      	ldr	r3, [pc, #188]	; (8007278 <xPortStartScheduler+0xe8>)
 80071bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071be:	4b2f      	ldr	r3, [pc, #188]	; (800727c <xPortStartScheduler+0xec>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071c4:	e009      	b.n	80071da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071c6:	4b2d      	ldr	r3, [pc, #180]	; (800727c <xPortStartScheduler+0xec>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a2b      	ldr	r2, [pc, #172]	; (800727c <xPortStartScheduler+0xec>)
 80071ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d0ef      	beq.n	80071c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071e6:	4b25      	ldr	r3, [pc, #148]	; (800727c <xPortStartScheduler+0xec>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1c3 0307 	rsb	r3, r3, #7
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d00c      	beq.n	800720c <xPortStartScheduler+0x7c>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	b672      	cpsid	i
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	b662      	cpsie	i
 8007206:	60bb      	str	r3, [r7, #8]
}
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <xPortStartScheduler+0xec>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	4a1a      	ldr	r2, [pc, #104]	; (800727c <xPortStartScheduler+0xec>)
 8007214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007216:	4b19      	ldr	r3, [pc, #100]	; (800727c <xPortStartScheduler+0xec>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800721e:	4a17      	ldr	r2, [pc, #92]	; (800727c <xPortStartScheduler+0xec>)
 8007220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <xPortStartScheduler+0xf0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a14      	ldr	r2, [pc, #80]	; (8007280 <xPortStartScheduler+0xf0>)
 8007230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007236:	4b12      	ldr	r3, [pc, #72]	; (8007280 <xPortStartScheduler+0xf0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a11      	ldr	r2, [pc, #68]	; (8007280 <xPortStartScheduler+0xf0>)
 800723c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007242:	f000 f8dd 	bl	8007400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xPortStartScheduler+0xf4>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800724c:	f000 f8fc 	bl	8007448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <xPortStartScheduler+0xf8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a0c      	ldr	r2, [pc, #48]	; (8007288 <xPortStartScheduler+0xf8>)
 8007256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800725a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800725c:	f7ff ff84 	bl	8007168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007260:	f7fe ff34 	bl	80060cc <vTaskSwitchContext>
	prvTaskExitError();
 8007264:	f7ff ff3c 	bl	80070e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	e000e400 	.word	0xe000e400
 8007278:	20000e50 	.word	0x20000e50
 800727c:	20000e54 	.word	0x20000e54
 8007280:	e000ed20 	.word	0xe000ed20
 8007284:	2000000c 	.word	0x2000000c
 8007288:	e000ef34 	.word	0xe000ef34

0800728c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	b672      	cpsid	i
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	b662      	cpsie	i
 80072a6:	607b      	str	r3, [r7, #4]
}
 80072a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072aa:	4b10      	ldr	r3, [pc, #64]	; (80072ec <vPortEnterCritical+0x60>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	4a0e      	ldr	r2, [pc, #56]	; (80072ec <vPortEnterCritical+0x60>)
 80072b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <vPortEnterCritical+0x60>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d111      	bne.n	80072e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <vPortEnterCritical+0x64>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <vPortEnterCritical+0x54>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	b672      	cpsid	i
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	b662      	cpsie	i
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vPortEnterCritical+0x52>
	}
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	2000000c 	.word	0x2000000c
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <vPortExitCritical+0x54>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <vPortExitCritical+0x28>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	b672      	cpsid	i
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	b662      	cpsie	i
 8007316:	607b      	str	r3, [r7, #4]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <vPortExitCritical+0x54>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	4a09      	ldr	r2, [pc, #36]	; (8007348 <vPortExitCritical+0x54>)
 8007324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <vPortExitCritical+0x54>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d105      	bne.n	800733a <vPortExitCritical+0x46>
 800732e:	2300      	movs	r3, #0
 8007330:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f383 8811 	msr	BASEPRI, r3
}
 8007338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	2000000c 	.word	0x2000000c
 800734c:	00000000 	.word	0x00000000

08007350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007350:	f3ef 8009 	mrs	r0, PSP
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <pxCurrentTCBConst>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	f01e 0f10 	tst.w	lr, #16
 8007360:	bf08      	it	eq
 8007362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	6010      	str	r0, [r2, #0]
 800736c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007374:	b672      	cpsid	i
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	b662      	cpsie	i
 8007384:	f7fe fea2 	bl	80060cc <vTaskSwitchContext>
 8007388:	f04f 0000 	mov.w	r0, #0
 800738c:	f380 8811 	msr	BASEPRI, r0
 8007390:	bc09      	pop	{r0, r3}
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	6808      	ldr	r0, [r1, #0]
 8007396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739a:	f01e 0f10 	tst.w	lr, #16
 800739e:	bf08      	it	eq
 80073a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073a4:	f380 8809 	msr	PSP, r0
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <pxCurrentTCBConst>:
 80073b0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop

080073b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	b672      	cpsid	i
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	b662      	cpsie	i
 80073d2:	607b      	str	r3, [r7, #4]
}
 80073d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073d6:	f7fe fdbd 	bl	8005f54 <xTaskIncrementTick>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <xPortSysTickHandler+0x44>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f383 8811 	msr	BASEPRI, r3
}
 80073f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <vPortSetupTimerInterrupt+0x34>)
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800740a:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <vPortSetupTimerInterrupt+0x38>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <vPortSetupTimerInterrupt+0x3c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <vPortSetupTimerInterrupt+0x40>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	099b      	lsrs	r3, r3, #6
 800741c:	4a09      	ldr	r2, [pc, #36]	; (8007444 <vPortSetupTimerInterrupt+0x44>)
 800741e:	3b01      	subs	r3, #1
 8007420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007422:	4b04      	ldr	r3, [pc, #16]	; (8007434 <vPortSetupTimerInterrupt+0x34>)
 8007424:	2207      	movs	r2, #7
 8007426:	601a      	str	r2, [r3, #0]
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	e000e010 	.word	0xe000e010
 8007438:	e000e018 	.word	0xe000e018
 800743c:	20000000 	.word	0x20000000
 8007440:	10624dd3 	.word	0x10624dd3
 8007444:	e000e014 	.word	0xe000e014

08007448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007458 <vPortEnableVFP+0x10>
 800744c:	6801      	ldr	r1, [r0, #0]
 800744e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007452:	6001      	str	r1, [r0, #0]
 8007454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007456:	bf00      	nop
 8007458:	e000ed88 	.word	0xe000ed88

0800745c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007462:	f3ef 8305 	mrs	r3, IPSR
 8007466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d916      	bls.n	800749c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800746e:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <vPortValidateInterruptPriority+0x78>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007478:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <vPortValidateInterruptPriority+0x7c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	7afa      	ldrb	r2, [r7, #11]
 800747e:	429a      	cmp	r2, r3
 8007480:	d20c      	bcs.n	800749c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	b672      	cpsid	i
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	b662      	cpsie	i
 8007496:	607b      	str	r3, [r7, #4]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <vPortValidateInterruptPriority+0x80>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <vPortValidateInterruptPriority+0x84>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d90c      	bls.n	80074c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	b672      	cpsid	i
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	b662      	cpsie	i
 80074c0:	603b      	str	r3, [r7, #0]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <vPortValidateInterruptPriority+0x68>
	}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	e000e3f0 	.word	0xe000e3f0
 80074d8:	20000e50 	.word	0x20000e50
 80074dc:	e000ed0c 	.word	0xe000ed0c
 80074e0:	20000e54 	.word	0x20000e54

080074e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074f0:	f7fe fc60 	bl	8005db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074f4:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <pvPortMalloc+0x180>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074fc:	f000 f91a 	bl	8007734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007500:	4b59      	ldr	r3, [pc, #356]	; (8007668 <pvPortMalloc+0x184>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4013      	ands	r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 8092 	bne.w	8007632 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01f      	beq.n	8007554 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007514:	2208      	movs	r2, #8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d016      	beq.n	8007554 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	3308      	adds	r3, #8
 800752e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <pvPortMalloc+0x70>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	b672      	cpsid	i
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	b662      	cpsie	i
 800754e:	617b      	str	r3, [r7, #20]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d06b      	beq.n	8007632 <pvPortMalloc+0x14e>
 800755a:	4b44      	ldr	r3, [pc, #272]	; (800766c <pvPortMalloc+0x188>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d866      	bhi.n	8007632 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007564:	4b42      	ldr	r3, [pc, #264]	; (8007670 <pvPortMalloc+0x18c>)
 8007566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <pvPortMalloc+0x18c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756e:	e004      	b.n	800757a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d903      	bls.n	800758c <pvPortMalloc+0xa8>
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f1      	bne.n	8007570 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800758c:	4b35      	ldr	r3, [pc, #212]	; (8007664 <pvPortMalloc+0x180>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007592:	429a      	cmp	r2, r3
 8007594:	d04d      	beq.n	8007632 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2208      	movs	r2, #8
 800759c:	4413      	add	r3, r2
 800759e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	2308      	movs	r3, #8
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d921      	bls.n	80075fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00c      	beq.n	80075e4 <pvPortMalloc+0x100>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	613b      	str	r3, [r7, #16]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075f6:	69b8      	ldr	r0, [r7, #24]
 80075f8:	f000 f8fe 	bl	80077f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <pvPortMalloc+0x188>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	4a19      	ldr	r2, [pc, #100]	; (800766c <pvPortMalloc+0x188>)
 8007608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800760a:	4b18      	ldr	r3, [pc, #96]	; (800766c <pvPortMalloc+0x188>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <pvPortMalloc+0x190>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d203      	bcs.n	800761e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <pvPortMalloc+0x188>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <pvPortMalloc+0x190>)
 800761c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <pvPortMalloc+0x184>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	431a      	orrs	r2, r3
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007632:	f7fe fbcd 	bl	8005dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00c      	beq.n	800765a <pvPortMalloc+0x176>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	b672      	cpsid	i
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	b662      	cpsie	i
 8007654:	60fb      	str	r3, [r7, #12]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <pvPortMalloc+0x174>
	return pvReturn;
 800765a:	69fb      	ldr	r3, [r7, #28]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3728      	adds	r7, #40	; 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20004a60 	.word	0x20004a60
 8007668:	20004a6c 	.word	0x20004a6c
 800766c:	20004a64 	.word	0x20004a64
 8007670:	20004a58 	.word	0x20004a58
 8007674:	20004a68 	.word	0x20004a68

08007678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d04c      	beq.n	8007724 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800768a:	2308      	movs	r3, #8
 800768c:	425b      	negs	r3, r3
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	4b23      	ldr	r3, [pc, #140]	; (800772c <vPortFree+0xb4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10c      	bne.n	80076c0 <vPortFree+0x48>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	b672      	cpsid	i
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	b662      	cpsie	i
 80076ba:	60fb      	str	r3, [r7, #12]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00c      	beq.n	80076e2 <vPortFree+0x6a>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	60bb      	str	r3, [r7, #8]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <vPortFree+0xb4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d019      	beq.n	8007724 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d115      	bne.n	8007724 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4b0b      	ldr	r3, [pc, #44]	; (800772c <vPortFree+0xb4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	43db      	mvns	r3, r3
 8007702:	401a      	ands	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007708:	f7fe fb54 	bl	8005db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	4b07      	ldr	r3, [pc, #28]	; (8007730 <vPortFree+0xb8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4413      	add	r3, r2
 8007716:	4a06      	ldr	r2, [pc, #24]	; (8007730 <vPortFree+0xb8>)
 8007718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800771a:	6938      	ldr	r0, [r7, #16]
 800771c:	f000 f86c 	bl	80077f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007720:	f7fe fb56 	bl	8005dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007724:	bf00      	nop
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20004a6c 	.word	0x20004a6c
 8007730:	20004a64 	.word	0x20004a64

08007734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800773a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800773e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007740:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <prvHeapInit+0xac>)
 8007742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3307      	adds	r3, #7
 8007752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <prvHeapInit+0xac>)
 8007764:	4413      	add	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800776c:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <prvHeapInit+0xb0>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <prvHeapInit+0xb0>)
 8007774:	2200      	movs	r2, #0
 8007776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007780:	2208      	movs	r2, #8
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <prvHeapInit+0xb4>)
 8007794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <prvHeapInit+0xb4>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <prvHeapInit+0xb4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077b4:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <prvHeapInit+0xb4>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <prvHeapInit+0xb8>)
 80077c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <prvHeapInit+0xbc>)
 80077ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077cc:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <prvHeapInit+0xc0>)
 80077ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20000e58 	.word	0x20000e58
 80077e4:	20004a58 	.word	0x20004a58
 80077e8:	20004a60 	.word	0x20004a60
 80077ec:	20004a68 	.word	0x20004a68
 80077f0:	20004a64 	.word	0x20004a64
 80077f4:	20004a6c 	.word	0x20004a6c

080077f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007800:	4b28      	ldr	r3, [pc, #160]	; (80078a4 <prvInsertBlockIntoFreeList+0xac>)
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <prvInsertBlockIntoFreeList+0x14>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	429a      	cmp	r2, r3
 8007814:	d8f7      	bhi.n	8007806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d108      	bne.n	800783a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d118      	bne.n	8007880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d00d      	beq.n	8007876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e008      	b.n	8007888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e003      	b.n	8007888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d002      	beq.n	8007896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20004a58 	.word	0x20004a58
 80078a8:	20004a60 	.word	0x20004a60

080078ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80078b6:	f007 fa7b 	bl	800edb0 <sys_timeouts_sleeptime>
 80078ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d10b      	bne.n	80078dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80078c4:	4813      	ldr	r0, [pc, #76]	; (8007914 <tcpip_timeouts_mbox_fetch+0x68>)
 80078c6:	f009 ffcc 	bl	8011862 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80078ca:	2200      	movs	r2, #0
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f009 ff54 	bl	801177c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80078d4:	480f      	ldr	r0, [pc, #60]	; (8007914 <tcpip_timeouts_mbox_fetch+0x68>)
 80078d6:	f009 ffb5 	bl	8011844 <sys_mutex_lock>
    return;
 80078da:	e018      	b.n	800790e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80078e2:	f007 fa2b 	bl	800ed3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80078e6:	e7e6      	b.n	80078b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80078e8:	480a      	ldr	r0, [pc, #40]	; (8007914 <tcpip_timeouts_mbox_fetch+0x68>)
 80078ea:	f009 ffba 	bl	8011862 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f009 ff42 	bl	801177c <sys_arch_mbox_fetch>
 80078f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80078fa:	4806      	ldr	r0, [pc, #24]	; (8007914 <tcpip_timeouts_mbox_fetch+0x68>)
 80078fc:	f009 ffa2 	bl	8011844 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d102      	bne.n	800790e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007908:	f007 fa18 	bl	800ed3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800790c:	e7d3      	b.n	80078b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20007db0 	.word	0x20007db0

08007918 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007920:	4810      	ldr	r0, [pc, #64]	; (8007964 <tcpip_thread+0x4c>)
 8007922:	f009 ff8f 	bl	8011844 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <tcpip_thread+0x50>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <tcpip_thread+0x50>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <tcpip_thread+0x54>)
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800793a:	f107 030c 	add.w	r3, r7, #12
 800793e:	4619      	mov	r1, r3
 8007940:	480b      	ldr	r0, [pc, #44]	; (8007970 <tcpip_thread+0x58>)
 8007942:	f7ff ffb3 	bl	80078ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d106      	bne.n	800795a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <tcpip_thread+0x5c>)
 800794e:	2291      	movs	r2, #145	; 0x91
 8007950:	4909      	ldr	r1, [pc, #36]	; (8007978 <tcpip_thread+0x60>)
 8007952:	480a      	ldr	r0, [pc, #40]	; (800797c <tcpip_thread+0x64>)
 8007954:	f00a f96c 	bl	8011c30 <iprintf>
      continue;
 8007958:	e003      	b.n	8007962 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f80f 	bl	8007980 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007962:	e7ea      	b.n	800793a <tcpip_thread+0x22>
 8007964:	20007db0 	.word	0x20007db0
 8007968:	20004a70 	.word	0x20004a70
 800796c:	20004a74 	.word	0x20004a74
 8007970:	20004a78 	.word	0x20004a78
 8007974:	08012b48 	.word	0x08012b48
 8007978:	08012b78 	.word	0x08012b78
 800797c:	08012b98 	.word	0x08012b98

08007980 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d026      	beq.n	80079de <tcpip_thread_handle_msg+0x5e>
 8007990:	2b02      	cmp	r3, #2
 8007992:	dc2b      	bgt.n	80079ec <tcpip_thread_handle_msg+0x6c>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <tcpip_thread_handle_msg+0x1e>
 8007998:	2b01      	cmp	r3, #1
 800799a:	d015      	beq.n	80079c8 <tcpip_thread_handle_msg+0x48>
 800799c:	e026      	b.n	80079ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6850      	ldr	r0, [r2, #4]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6892      	ldr	r2, [r2, #8]
 80079aa:	4611      	mov	r1, r2
 80079ac:	4798      	blx	r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 fcc5 	bl	8009348 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	2009      	movs	r0, #9
 80079c2:	f000 fe1d 	bl	8008600 <memp_free>
      break;
 80079c6:	e018      	b.n	80079fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6892      	ldr	r2, [r2, #8]
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	2008      	movs	r0, #8
 80079d8:	f000 fe12 	bl	8008600 <memp_free>
      break;
 80079dc:	e00d      	b.n	80079fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6892      	ldr	r2, [r2, #8]
 80079e6:	4610      	mov	r0, r2
 80079e8:	4798      	blx	r3
      break;
 80079ea:	e006      	b.n	80079fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <tcpip_thread_handle_msg+0x84>)
 80079ee:	22cf      	movs	r2, #207	; 0xcf
 80079f0:	4905      	ldr	r1, [pc, #20]	; (8007a08 <tcpip_thread_handle_msg+0x88>)
 80079f2:	4806      	ldr	r0, [pc, #24]	; (8007a0c <tcpip_thread_handle_msg+0x8c>)
 80079f4:	f00a f91c 	bl	8011c30 <iprintf>
      break;
 80079f8:	bf00      	nop
  }
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08012b48 	.word	0x08012b48
 8007a08:	08012b78 	.word	0x08012b78
 8007a0c:	08012b98 	.word	0x08012b98

08007a10 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007a1c:	481a      	ldr	r0, [pc, #104]	; (8007a88 <tcpip_inpkt+0x78>)
 8007a1e:	f009 fede 	bl	80117de <sys_mbox_valid>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d105      	bne.n	8007a34 <tcpip_inpkt+0x24>
 8007a28:	4b18      	ldr	r3, [pc, #96]	; (8007a8c <tcpip_inpkt+0x7c>)
 8007a2a:	22fc      	movs	r2, #252	; 0xfc
 8007a2c:	4918      	ldr	r1, [pc, #96]	; (8007a90 <tcpip_inpkt+0x80>)
 8007a2e:	4819      	ldr	r0, [pc, #100]	; (8007a94 <tcpip_inpkt+0x84>)
 8007a30:	f00a f8fe 	bl	8011c30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007a34:	2009      	movs	r0, #9
 8007a36:	f000 fd91 	bl	800855c <memp_malloc>
 8007a3a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	e01a      	b.n	8007a7e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	4809      	ldr	r0, [pc, #36]	; (8007a88 <tcpip_inpkt+0x78>)
 8007a64:	f009 fe70 	bl	8011748 <sys_mbox_trypost>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007a6e:	6979      	ldr	r1, [r7, #20]
 8007a70:	2009      	movs	r0, #9
 8007a72:	f000 fdc5 	bl	8008600 <memp_free>
    return ERR_MEM;
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7a:	e000      	b.n	8007a7e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007a7c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20004a78 	.word	0x20004a78
 8007a8c:	08012b48 	.word	0x08012b48
 8007a90:	08012bc0 	.word	0x08012bc0
 8007a94:	08012b98 	.word	0x08012b98

08007a98 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007aa8:	f003 0318 	and.w	r3, r3, #24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007ab0:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <tcpip_input+0x3c>)
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff ffab 	bl	8007a10 <tcpip_inpkt>
 8007aba:	4603      	mov	r3, r0
 8007abc:	e005      	b.n	8007aca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007abe:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <tcpip_input+0x40>)
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ffa4 	bl	8007a10 <tcpip_inpkt>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08011569 	.word	0x08011569
 8007ad8:	0801047d 	.word	0x0801047d

08007adc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007ae6:	4819      	ldr	r0, [pc, #100]	; (8007b4c <tcpip_try_callback+0x70>)
 8007ae8:	f009 fe79 	bl	80117de <sys_mbox_valid>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <tcpip_try_callback+0x24>
 8007af2:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <tcpip_try_callback+0x74>)
 8007af4:	f240 125d 	movw	r2, #349	; 0x15d
 8007af8:	4916      	ldr	r1, [pc, #88]	; (8007b54 <tcpip_try_callback+0x78>)
 8007afa:	4817      	ldr	r0, [pc, #92]	; (8007b58 <tcpip_try_callback+0x7c>)
 8007afc:	f00a f898 	bl	8011c30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007b00:	2008      	movs	r0, #8
 8007b02:	f000 fd2b 	bl	800855c <memp_malloc>
 8007b06:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b12:	e017      	b.n	8007b44 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	4808      	ldr	r0, [pc, #32]	; (8007b4c <tcpip_try_callback+0x70>)
 8007b2a:	f009 fe0d 	bl	8011748 <sys_mbox_trypost>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d006      	beq.n	8007b42 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007b34:	68f9      	ldr	r1, [r7, #12]
 8007b36:	2008      	movs	r0, #8
 8007b38:	f000 fd62 	bl	8008600 <memp_free>
    return ERR_MEM;
 8007b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b40:	e000      	b.n	8007b44 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20004a78 	.word	0x20004a78
 8007b50:	08012b48 	.word	0x08012b48
 8007b54:	08012bc0 	.word	0x08012bc0
 8007b58:	08012b98 	.word	0x08012b98

08007b5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007b66:	f000 f871 	bl	8007c4c <lwip_init>

  tcpip_init_done = initfunc;
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <tcpip_init+0x6c>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007b70:	4a16      	ldr	r2, [pc, #88]	; (8007bcc <tcpip_init+0x70>)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007b76:	2106      	movs	r1, #6
 8007b78:	4815      	ldr	r0, [pc, #84]	; (8007bd0 <tcpip_init+0x74>)
 8007b7a:	f009 fdcb 	bl	8011714 <sys_mbox_new>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007b84:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <tcpip_init+0x78>)
 8007b86:	f240 2261 	movw	r2, #609	; 0x261
 8007b8a:	4913      	ldr	r1, [pc, #76]	; (8007bd8 <tcpip_init+0x7c>)
 8007b8c:	4813      	ldr	r0, [pc, #76]	; (8007bdc <tcpip_init+0x80>)
 8007b8e:	f00a f84f 	bl	8011c30 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007b92:	4813      	ldr	r0, [pc, #76]	; (8007be0 <tcpip_init+0x84>)
 8007b94:	f009 fe40 	bl	8011818 <sys_mutex_new>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <tcpip_init+0x78>)
 8007ba0:	f240 2265 	movw	r2, #613	; 0x265
 8007ba4:	490f      	ldr	r1, [pc, #60]	; (8007be4 <tcpip_init+0x88>)
 8007ba6:	480d      	ldr	r0, [pc, #52]	; (8007bdc <tcpip_init+0x80>)
 8007ba8:	f00a f842 	bl	8011c30 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007bac:	2318      	movs	r3, #24
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	490c      	ldr	r1, [pc, #48]	; (8007be8 <tcpip_init+0x8c>)
 8007bb8:	480c      	ldr	r0, [pc, #48]	; (8007bec <tcpip_init+0x90>)
 8007bba:	f009 fe5f 	bl	801187c <sys_thread_new>
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20004a70 	.word	0x20004a70
 8007bcc:	20004a74 	.word	0x20004a74
 8007bd0:	20004a78 	.word	0x20004a78
 8007bd4:	08012b48 	.word	0x08012b48
 8007bd8:	08012bd0 	.word	0x08012bd0
 8007bdc:	08012b98 	.word	0x08012b98
 8007be0:	20007db0 	.word	0x20007db0
 8007be4:	08012bf4 	.word	0x08012bf4
 8007be8:	08007919 	.word	0x08007919
 8007bec:	08012c18 	.word	0x08012c18

08007bf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	b21a      	sxth	r2, r3
 8007c00:	88fb      	ldrh	r3, [r7, #6]
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	b21b      	sxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b21b      	sxth	r3, r3
 8007c0c:	b29b      	uxth	r3, r3
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	061a      	lsls	r2, r3, #24
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	0a1b      	lsrs	r3, r3, #8
 8007c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	0e1b      	lsrs	r3, r3, #24
 8007c3e:	4313      	orrs	r3, r2
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007c56:	f009 fdd3 	bl	8011800 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007c5a:	f000 f8d5 	bl	8007e08 <mem_init>
  memp_init();
 8007c5e:	f000 fc31 	bl	80084c4 <memp_init>
  pbuf_init();
  netif_init();
 8007c62:	f000 fcf7 	bl	8008654 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007c66:	f007 f8db 	bl	800ee20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007c6a:	f001 fe07 	bl	800987c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007c6e:	f007 f81d 	bl	800ecac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <ptr_to_mem+0x20>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	4413      	add	r3, r2
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	20004a7c 	.word	0x20004a7c

08007ca0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <mem_to_ptr+0x20>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	b29b      	uxth	r3, r3
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20004a7c 	.word	0x20004a7c

08007cc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007ccc:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <plug_holes+0x120>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d206      	bcs.n	8007ce4 <plug_holes+0x20>
 8007cd6:	4b44      	ldr	r3, [pc, #272]	; (8007de8 <plug_holes+0x124>)
 8007cd8:	f240 12df 	movw	r2, #479	; 0x1df
 8007cdc:	4943      	ldr	r1, [pc, #268]	; (8007dec <plug_holes+0x128>)
 8007cde:	4844      	ldr	r0, [pc, #272]	; (8007df0 <plug_holes+0x12c>)
 8007ce0:	f009 ffa6 	bl	8011c30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <plug_holes+0x130>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d306      	bcc.n	8007cfc <plug_holes+0x38>
 8007cee:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <plug_holes+0x124>)
 8007cf0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007cf4:	4940      	ldr	r1, [pc, #256]	; (8007df8 <plug_holes+0x134>)
 8007cf6:	483e      	ldr	r0, [pc, #248]	; (8007df0 <plug_holes+0x12c>)
 8007cf8:	f009 ff9a 	bl	8011c30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <plug_holes+0x4e>
 8007d04:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <plug_holes+0x124>)
 8007d06:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007d0a:	493c      	ldr	r1, [pc, #240]	; (8007dfc <plug_holes+0x138>)
 8007d0c:	4838      	ldr	r0, [pc, #224]	; (8007df0 <plug_holes+0x12c>)
 8007d0e:	f009 ff8f 	bl	8011c30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d1a:	d906      	bls.n	8007d2a <plug_holes+0x66>
 8007d1c:	4b32      	ldr	r3, [pc, #200]	; (8007de8 <plug_holes+0x124>)
 8007d1e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007d22:	4937      	ldr	r1, [pc, #220]	; (8007e00 <plug_holes+0x13c>)
 8007d24:	4832      	ldr	r0, [pc, #200]	; (8007df0 <plug_holes+0x12c>)
 8007d26:	f009 ff83 	bl	8011c30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff ffa4 	bl	8007c7c <ptr_to_mem>
 8007d34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d024      	beq.n	8007d88 <plug_holes+0xc4>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d120      	bne.n	8007d88 <plug_holes+0xc4>
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <plug_holes+0x130>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d01b      	beq.n	8007d88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <plug_holes+0x140>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d102      	bne.n	8007d60 <plug_holes+0x9c>
      lfree = mem;
 8007d5a:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <plug_holes+0x140>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d70:	d00a      	beq.n	8007d88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ff80 	bl	8007c7c <ptr_to_mem>
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff ff8e 	bl	8007ca0 <mem_to_ptr>
 8007d84:	4603      	mov	r3, r0
 8007d86:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff ff75 	bl	8007c7c <ptr_to_mem>
 8007d92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d01f      	beq.n	8007ddc <plug_holes+0x118>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11b      	bne.n	8007ddc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007da4:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <plug_holes+0x140>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d102      	bne.n	8007db4 <plug_holes+0xf0>
      lfree = pmem;
 8007dae:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <plug_holes+0x140>)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	881a      	ldrh	r2, [r3, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007dc4:	d00a      	beq.n	8007ddc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff ff56 	bl	8007c7c <ptr_to_mem>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	f7ff ff64 	bl	8007ca0 <mem_to_ptr>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}
 8007de4:	20004a7c 	.word	0x20004a7c
 8007de8:	08012c28 	.word	0x08012c28
 8007dec:	08012c58 	.word	0x08012c58
 8007df0:	08012c70 	.word	0x08012c70
 8007df4:	20004a80 	.word	0x20004a80
 8007df8:	08012c98 	.word	0x08012c98
 8007dfc:	08012cb4 	.word	0x08012cb4
 8007e00:	08012cd0 	.word	0x08012cd0
 8007e04:	20004a88 	.word	0x20004a88

08007e08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007e0e:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <mem_init+0x84>)
 8007e10:	3303      	adds	r3, #3
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <mem_init+0x88>)
 8007e1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <mem_init+0x88>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007e28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007e36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007e3a:	f7ff ff1f 	bl	8007c7c <ptr_to_mem>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4a14      	ldr	r2, [pc, #80]	; (8007e94 <mem_init+0x8c>)
 8007e42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007e44:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <mem_init+0x8c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007e4c:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <mem_init+0x8c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007e54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <mem_init+0x8c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007e5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <mem_init+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a0c      	ldr	r2, [pc, #48]	; (8007e98 <mem_init+0x90>)
 8007e66:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007e68:	480c      	ldr	r0, [pc, #48]	; (8007e9c <mem_init+0x94>)
 8007e6a:	f009 fcd5 	bl	8011818 <sys_mutex_new>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d006      	beq.n	8007e82 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <mem_init+0x98>)
 8007e76:	f240 221f 	movw	r2, #543	; 0x21f
 8007e7a:	490a      	ldr	r1, [pc, #40]	; (8007ea4 <mem_init+0x9c>)
 8007e7c:	480a      	ldr	r0, [pc, #40]	; (8007ea8 <mem_init+0xa0>)
 8007e7e:	f009 fed7 	bl	8011c30 <iprintf>
  }
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20007dcc 	.word	0x20007dcc
 8007e90:	20004a7c 	.word	0x20004a7c
 8007e94:	20004a80 	.word	0x20004a80
 8007e98:	20004a88 	.word	0x20004a88
 8007e9c:	20004a84 	.word	0x20004a84
 8007ea0:	08012c28 	.word	0x08012c28
 8007ea4:	08012cfc 	.word	0x08012cfc
 8007ea8:	08012c70 	.word	0x08012c70

08007eac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fef3 	bl	8007ca0 <mem_to_ptr>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff feda 	bl	8007c7c <ptr_to_mem>
 8007ec8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	885b      	ldrh	r3, [r3, #2]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fed4 	bl	8007c7c <ptr_to_mem>
 8007ed4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ede:	d818      	bhi.n	8007f12 <mem_link_valid+0x66>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	885b      	ldrh	r3, [r3, #2]
 8007ee4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ee8:	d813      	bhi.n	8007f12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007eee:	8afa      	ldrh	r2, [r7, #22]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d004      	beq.n	8007efe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	8afa      	ldrh	r2, [r7, #22]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d109      	bne.n	8007f12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <mem_link_valid+0x74>)
 8007f00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d006      	beq.n	8007f16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	885b      	ldrh	r3, [r3, #2]
 8007f0c:	8afa      	ldrh	r2, [r7, #22]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d001      	beq.n	8007f16 <mem_link_valid+0x6a>
    return 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e000      	b.n	8007f18 <mem_link_valid+0x6c>
  }
  return 1;
 8007f16:	2301      	movs	r3, #1
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20004a80 	.word	0x20004a80

08007f24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d070      	beq.n	8008014 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00d      	beq.n	8007f58 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007f3c:	4b37      	ldr	r3, [pc, #220]	; (800801c <mem_free+0xf8>)
 8007f3e:	f240 2273 	movw	r2, #627	; 0x273
 8007f42:	4937      	ldr	r1, [pc, #220]	; (8008020 <mem_free+0xfc>)
 8007f44:	4837      	ldr	r0, [pc, #220]	; (8008024 <mem_free+0x100>)
 8007f46:	f009 fe73 	bl	8011c30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f4a:	f009 fcb7 	bl	80118bc <sys_arch_protect>
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f009 fcc1 	bl	80118d8 <sys_arch_unprotect>
    return;
 8007f56:	e05e      	b.n	8008016 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3b08      	subs	r3, #8
 8007f5c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007f5e:	4b32      	ldr	r3, [pc, #200]	; (8008028 <mem_free+0x104>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d306      	bcc.n	8007f76 <mem_free+0x52>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 020c 	add.w	r2, r3, #12
 8007f6e:	4b2f      	ldr	r3, [pc, #188]	; (800802c <mem_free+0x108>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90d      	bls.n	8007f92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007f76:	4b29      	ldr	r3, [pc, #164]	; (800801c <mem_free+0xf8>)
 8007f78:	f240 227f 	movw	r2, #639	; 0x27f
 8007f7c:	492c      	ldr	r1, [pc, #176]	; (8008030 <mem_free+0x10c>)
 8007f7e:	4829      	ldr	r0, [pc, #164]	; (8008024 <mem_free+0x100>)
 8007f80:	f009 fe56 	bl	8011c30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f84:	f009 fc9a 	bl	80118bc <sys_arch_protect>
 8007f88:	6138      	str	r0, [r7, #16]
 8007f8a:	6938      	ldr	r0, [r7, #16]
 8007f8c:	f009 fca4 	bl	80118d8 <sys_arch_unprotect>
    return;
 8007f90:	e041      	b.n	8008016 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007f92:	4828      	ldr	r0, [pc, #160]	; (8008034 <mem_free+0x110>)
 8007f94:	f009 fc56 	bl	8011844 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	791b      	ldrb	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d110      	bne.n	8007fc2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	; (800801c <mem_free+0xf8>)
 8007fa2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007fa6:	4924      	ldr	r1, [pc, #144]	; (8008038 <mem_free+0x114>)
 8007fa8:	481e      	ldr	r0, [pc, #120]	; (8008024 <mem_free+0x100>)
 8007faa:	f009 fe41 	bl	8011c30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007fae:	4821      	ldr	r0, [pc, #132]	; (8008034 <mem_free+0x110>)
 8007fb0:	f009 fc57 	bl	8011862 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007fb4:	f009 fc82 	bl	80118bc <sys_arch_protect>
 8007fb8:	6178      	str	r0, [r7, #20]
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f009 fc8c 	bl	80118d8 <sys_arch_unprotect>
    return;
 8007fc0:	e029      	b.n	8008016 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007fc2:	69f8      	ldr	r0, [r7, #28]
 8007fc4:	f7ff ff72 	bl	8007eac <mem_link_valid>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d110      	bne.n	8007ff0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <mem_free+0xf8>)
 8007fd0:	f240 2295 	movw	r2, #661	; 0x295
 8007fd4:	4919      	ldr	r1, [pc, #100]	; (800803c <mem_free+0x118>)
 8007fd6:	4813      	ldr	r0, [pc, #76]	; (8008024 <mem_free+0x100>)
 8007fd8:	f009 fe2a 	bl	8011c30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007fdc:	4815      	ldr	r0, [pc, #84]	; (8008034 <mem_free+0x110>)
 8007fde:	f009 fc40 	bl	8011862 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007fe2:	f009 fc6b 	bl	80118bc <sys_arch_protect>
 8007fe6:	61b8      	str	r0, [r7, #24]
 8007fe8:	69b8      	ldr	r0, [r7, #24]
 8007fea:	f009 fc75 	bl	80118d8 <sys_arch_unprotect>
    return;
 8007fee:	e012      	b.n	8008016 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <mem_free+0x11c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d202      	bcs.n	8008006 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008000:	4a0f      	ldr	r2, [pc, #60]	; (8008040 <mem_free+0x11c>)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008006:	69f8      	ldr	r0, [r7, #28]
 8008008:	f7ff fe5c 	bl	8007cc4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <mem_free+0x110>)
 800800e:	f009 fc28 	bl	8011862 <sys_mutex_unlock>
 8008012:	e000      	b.n	8008016 <mem_free+0xf2>
    return;
 8008014:	bf00      	nop
}
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	08012c28 	.word	0x08012c28
 8008020:	08012d18 	.word	0x08012d18
 8008024:	08012c70 	.word	0x08012c70
 8008028:	20004a7c 	.word	0x20004a7c
 800802c:	20004a80 	.word	0x20004a80
 8008030:	08012d3c 	.word	0x08012d3c
 8008034:	20004a84 	.word	0x20004a84
 8008038:	08012d58 	.word	0x08012d58
 800803c:	08012d80 	.word	0x08012d80
 8008040:	20004a88 	.word	0x20004a88

08008044 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008050:	887b      	ldrh	r3, [r7, #2]
 8008052:	3303      	adds	r3, #3
 8008054:	b29b      	uxth	r3, r3
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800805c:	8bfb      	ldrh	r3, [r7, #30]
 800805e:	2b0b      	cmp	r3, #11
 8008060:	d801      	bhi.n	8008066 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008062:	230c      	movs	r3, #12
 8008064:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008066:	8bfb      	ldrh	r3, [r7, #30]
 8008068:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800806c:	d803      	bhi.n	8008076 <mem_trim+0x32>
 800806e:	8bfa      	ldrh	r2, [r7, #30]
 8008070:	887b      	ldrh	r3, [r7, #2]
 8008072:	429a      	cmp	r2, r3
 8008074:	d201      	bcs.n	800807a <mem_trim+0x36>
    return NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	e0d8      	b.n	800822c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800807a:	4b6e      	ldr	r3, [pc, #440]	; (8008234 <mem_trim+0x1f0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d304      	bcc.n	800808e <mem_trim+0x4a>
 8008084:	4b6c      	ldr	r3, [pc, #432]	; (8008238 <mem_trim+0x1f4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	429a      	cmp	r2, r3
 800808c:	d306      	bcc.n	800809c <mem_trim+0x58>
 800808e:	4b6b      	ldr	r3, [pc, #428]	; (800823c <mem_trim+0x1f8>)
 8008090:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008094:	496a      	ldr	r1, [pc, #424]	; (8008240 <mem_trim+0x1fc>)
 8008096:	486b      	ldr	r0, [pc, #428]	; (8008244 <mem_trim+0x200>)
 8008098:	f009 fdca 	bl	8011c30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800809c:	4b65      	ldr	r3, [pc, #404]	; (8008234 <mem_trim+0x1f0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d304      	bcc.n	80080b0 <mem_trim+0x6c>
 80080a6:	4b64      	ldr	r3, [pc, #400]	; (8008238 <mem_trim+0x1f4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d307      	bcc.n	80080c0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080b0:	f009 fc04 	bl	80118bc <sys_arch_protect>
 80080b4:	60b8      	str	r0, [r7, #8]
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	f009 fc0e 	bl	80118d8 <sys_arch_unprotect>
    return rmem;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	e0b5      	b.n	800822c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3b08      	subs	r3, #8
 80080c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80080c6:	69b8      	ldr	r0, [r7, #24]
 80080c8:	f7ff fdea 	bl	8007ca0 <mem_to_ptr>
 80080cc:	4603      	mov	r3, r0
 80080ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	8afb      	ldrh	r3, [r7, #22]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b08      	subs	r3, #8
 80080dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80080de:	8bfa      	ldrh	r2, [r7, #30]
 80080e0:	8abb      	ldrh	r3, [r7, #20]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d906      	bls.n	80080f4 <mem_trim+0xb0>
 80080e6:	4b55      	ldr	r3, [pc, #340]	; (800823c <mem_trim+0x1f8>)
 80080e8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80080ec:	4956      	ldr	r1, [pc, #344]	; (8008248 <mem_trim+0x204>)
 80080ee:	4855      	ldr	r0, [pc, #340]	; (8008244 <mem_trim+0x200>)
 80080f0:	f009 fd9e 	bl	8011c30 <iprintf>
  if (newsize > size) {
 80080f4:	8bfa      	ldrh	r2, [r7, #30]
 80080f6:	8abb      	ldrh	r3, [r7, #20]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d901      	bls.n	8008100 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e095      	b.n	800822c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008100:	8bfa      	ldrh	r2, [r7, #30]
 8008102:	8abb      	ldrh	r3, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d101      	bne.n	800810c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	e08f      	b.n	800822c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800810c:	484f      	ldr	r0, [pc, #316]	; (800824c <mem_trim+0x208>)
 800810e:	f009 fb99 	bl	8011844 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fdb0 	bl	8007c7c <ptr_to_mem>
 800811c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	791b      	ldrb	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d13f      	bne.n	80081a6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800812e:	d106      	bne.n	800813e <mem_trim+0xfa>
 8008130:	4b42      	ldr	r3, [pc, #264]	; (800823c <mem_trim+0x1f8>)
 8008132:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008136:	4946      	ldr	r1, [pc, #280]	; (8008250 <mem_trim+0x20c>)
 8008138:	4842      	ldr	r0, [pc, #264]	; (8008244 <mem_trim+0x200>)
 800813a:	f009 fd79 	bl	8011c30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008144:	8afa      	ldrh	r2, [r7, #22]
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	4413      	add	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	3308      	adds	r3, #8
 800814e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008150:	4b40      	ldr	r3, [pc, #256]	; (8008254 <mem_trim+0x210>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d106      	bne.n	8008168 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fd8d 	bl	8007c7c <ptr_to_mem>
 8008162:	4603      	mov	r3, r0
 8008164:	4a3b      	ldr	r2, [pc, #236]	; (8008254 <mem_trim+0x210>)
 8008166:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fd86 	bl	8007c7c <ptr_to_mem>
 8008170:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2200      	movs	r2, #0
 8008176:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	89ba      	ldrh	r2, [r7, #12]
 800817c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	8afa      	ldrh	r2, [r7, #22]
 8008182:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	89fa      	ldrh	r2, [r7, #14]
 8008188:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008192:	d047      	beq.n	8008224 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fd6f 	bl	8007c7c <ptr_to_mem>
 800819e:	4602      	mov	r2, r0
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	8053      	strh	r3, [r2, #2]
 80081a4:	e03e      	b.n	8008224 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80081a6:	8bfb      	ldrh	r3, [r7, #30]
 80081a8:	f103 0214 	add.w	r2, r3, #20
 80081ac:	8abb      	ldrh	r3, [r7, #20]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d838      	bhi.n	8008224 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80081b2:	8afa      	ldrh	r2, [r7, #22]
 80081b4:	8bfb      	ldrh	r3, [r7, #30]
 80081b6:	4413      	add	r3, r2
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3308      	adds	r3, #8
 80081bc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081c6:	d106      	bne.n	80081d6 <mem_trim+0x192>
 80081c8:	4b1c      	ldr	r3, [pc, #112]	; (800823c <mem_trim+0x1f8>)
 80081ca:	f240 3216 	movw	r2, #790	; 0x316
 80081ce:	4920      	ldr	r1, [pc, #128]	; (8008250 <mem_trim+0x20c>)
 80081d0:	481c      	ldr	r0, [pc, #112]	; (8008244 <mem_trim+0x200>)
 80081d2:	f009 fd2d 	bl	8011c30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80081d6:	89fb      	ldrh	r3, [r7, #14]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fd4f 	bl	8007c7c <ptr_to_mem>
 80081de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80081e0:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <mem_trim+0x210>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d202      	bcs.n	80081f0 <mem_trim+0x1ac>
      lfree = mem2;
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <mem_trim+0x210>)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2200      	movs	r2, #0
 80081f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	881a      	ldrh	r2, [r3, #0]
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	8afa      	ldrh	r2, [r7, #22]
 8008202:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	89fa      	ldrh	r2, [r7, #14]
 8008208:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008212:	d007      	beq.n	8008224 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fd2f 	bl	8007c7c <ptr_to_mem>
 800821e:	4602      	mov	r2, r0
 8008220:	89fb      	ldrh	r3, [r7, #14]
 8008222:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008224:	4809      	ldr	r0, [pc, #36]	; (800824c <mem_trim+0x208>)
 8008226:	f009 fb1c 	bl	8011862 <sys_mutex_unlock>
  return rmem;
 800822a:	687b      	ldr	r3, [r7, #4]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20004a7c 	.word	0x20004a7c
 8008238:	20004a80 	.word	0x20004a80
 800823c:	08012c28 	.word	0x08012c28
 8008240:	08012db4 	.word	0x08012db4
 8008244:	08012c70 	.word	0x08012c70
 8008248:	08012dcc 	.word	0x08012dcc
 800824c:	20004a84 	.word	0x20004a84
 8008250:	08012dec 	.word	0x08012dec
 8008254:	20004a88 	.word	0x20004a88

08008258 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <mem_malloc+0x14>
    return NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	e0e2      	b.n	8008432 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	3303      	adds	r3, #3
 8008270:	b29b      	uxth	r3, r3
 8008272:	f023 0303 	bic.w	r3, r3, #3
 8008276:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008278:	8bbb      	ldrh	r3, [r7, #28]
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d801      	bhi.n	8008282 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800827e:	230c      	movs	r3, #12
 8008280:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008282:	8bbb      	ldrh	r3, [r7, #28]
 8008284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008288:	d803      	bhi.n	8008292 <mem_malloc+0x3a>
 800828a:	8bba      	ldrh	r2, [r7, #28]
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	429a      	cmp	r2, r3
 8008290:	d201      	bcs.n	8008296 <mem_malloc+0x3e>
    return NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	e0cd      	b.n	8008432 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008296:	4869      	ldr	r0, [pc, #420]	; (800843c <mem_malloc+0x1e4>)
 8008298:	f009 fad4 	bl	8011844 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800829c:	4b68      	ldr	r3, [pc, #416]	; (8008440 <mem_malloc+0x1e8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fcfd 	bl	8007ca0 <mem_to_ptr>
 80082a6:	4603      	mov	r3, r0
 80082a8:	83fb      	strh	r3, [r7, #30]
 80082aa:	e0b7      	b.n	800841c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80082ac:	8bfb      	ldrh	r3, [r7, #30]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fce4 	bl	8007c7c <ptr_to_mem>
 80082b4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 80a7 	bne.w	800840e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	8bfb      	ldrh	r3, [r7, #30]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f1a3 0208 	sub.w	r2, r3, #8
 80082ce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80082d0:	429a      	cmp	r2, r3
 80082d2:	f0c0 809c 	bcc.w	800840e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	8bfb      	ldrh	r3, [r7, #30]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f1a3 0208 	sub.w	r2, r3, #8
 80082e4:	8bbb      	ldrh	r3, [r7, #28]
 80082e6:	3314      	adds	r3, #20
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d333      	bcc.n	8008354 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80082ec:	8bfa      	ldrh	r2, [r7, #30]
 80082ee:	8bbb      	ldrh	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3308      	adds	r3, #8
 80082f6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80082f8:	8a7b      	ldrh	r3, [r7, #18]
 80082fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082fe:	d106      	bne.n	800830e <mem_malloc+0xb6>
 8008300:	4b50      	ldr	r3, [pc, #320]	; (8008444 <mem_malloc+0x1ec>)
 8008302:	f240 3287 	movw	r2, #903	; 0x387
 8008306:	4950      	ldr	r1, [pc, #320]	; (8008448 <mem_malloc+0x1f0>)
 8008308:	4850      	ldr	r0, [pc, #320]	; (800844c <mem_malloc+0x1f4>)
 800830a:	f009 fc91 	bl	8011c30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800830e:	8a7b      	ldrh	r3, [r7, #18]
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fcb3 	bl	8007c7c <ptr_to_mem>
 8008316:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	881a      	ldrh	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8bfa      	ldrh	r2, [r7, #30]
 800832a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	8a7a      	ldrh	r2, [r7, #18]
 8008330:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2201      	movs	r2, #1
 8008336:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008340:	d00b      	beq.n	800835a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fc98 	bl	8007c7c <ptr_to_mem>
 800834c:	4602      	mov	r2, r0
 800834e:	8a7b      	ldrh	r3, [r7, #18]
 8008350:	8053      	strh	r3, [r2, #2]
 8008352:	e002      	b.n	800835a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2201      	movs	r2, #1
 8008358:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800835a:	4b39      	ldr	r3, [pc, #228]	; (8008440 <mem_malloc+0x1e8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	429a      	cmp	r2, r3
 8008362:	d127      	bne.n	80083b4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008364:	4b36      	ldr	r3, [pc, #216]	; (8008440 <mem_malloc+0x1e8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800836a:	e005      	b.n	8008378 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fc83 	bl	8007c7c <ptr_to_mem>
 8008376:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	791b      	ldrb	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <mem_malloc+0x132>
 8008380:	4b33      	ldr	r3, [pc, #204]	; (8008450 <mem_malloc+0x1f8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	429a      	cmp	r2, r3
 8008388:	d1f0      	bne.n	800836c <mem_malloc+0x114>
          }
          lfree = cur;
 800838a:	4a2d      	ldr	r2, [pc, #180]	; (8008440 <mem_malloc+0x1e8>)
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008390:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <mem_malloc+0x1e8>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <mem_malloc+0x1f8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d00b      	beq.n	80083b4 <mem_malloc+0x15c>
 800839c:	4b28      	ldr	r3, [pc, #160]	; (8008440 <mem_malloc+0x1e8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <mem_malloc+0x15c>
 80083a6:	4b27      	ldr	r3, [pc, #156]	; (8008444 <mem_malloc+0x1ec>)
 80083a8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80083ac:	4929      	ldr	r1, [pc, #164]	; (8008454 <mem_malloc+0x1fc>)
 80083ae:	4827      	ldr	r0, [pc, #156]	; (800844c <mem_malloc+0x1f4>)
 80083b0:	f009 fc3e 	bl	8011c30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80083b4:	4821      	ldr	r0, [pc, #132]	; (800843c <mem_malloc+0x1e4>)
 80083b6:	f009 fa54 	bl	8011862 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80083ba:	8bba      	ldrh	r2, [r7, #28]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	4413      	add	r3, r2
 80083c0:	3308      	adds	r3, #8
 80083c2:	4a23      	ldr	r2, [pc, #140]	; (8008450 <mem_malloc+0x1f8>)
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d906      	bls.n	80083d8 <mem_malloc+0x180>
 80083ca:	4b1e      	ldr	r3, [pc, #120]	; (8008444 <mem_malloc+0x1ec>)
 80083cc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80083d0:	4921      	ldr	r1, [pc, #132]	; (8008458 <mem_malloc+0x200>)
 80083d2:	481e      	ldr	r0, [pc, #120]	; (800844c <mem_malloc+0x1f4>)
 80083d4:	f009 fc2c 	bl	8011c30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <mem_malloc+0x198>
 80083e2:	4b18      	ldr	r3, [pc, #96]	; (8008444 <mem_malloc+0x1ec>)
 80083e4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80083e8:	491c      	ldr	r1, [pc, #112]	; (800845c <mem_malloc+0x204>)
 80083ea:	4818      	ldr	r0, [pc, #96]	; (800844c <mem_malloc+0x1f4>)
 80083ec:	f009 fc20 	bl	8011c30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d006      	beq.n	8008408 <mem_malloc+0x1b0>
 80083fa:	4b12      	ldr	r3, [pc, #72]	; (8008444 <mem_malloc+0x1ec>)
 80083fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008400:	4917      	ldr	r1, [pc, #92]	; (8008460 <mem_malloc+0x208>)
 8008402:	4812      	ldr	r0, [pc, #72]	; (800844c <mem_malloc+0x1f4>)
 8008404:	f009 fc14 	bl	8011c30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	3308      	adds	r3, #8
 800840c:	e011      	b.n	8008432 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800840e:	8bfb      	ldrh	r3, [r7, #30]
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fc33 	bl	8007c7c <ptr_to_mem>
 8008416:	4603      	mov	r3, r0
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800841c:	8bfa      	ldrh	r2, [r7, #30]
 800841e:	8bbb      	ldrh	r3, [r7, #28]
 8008420:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008424:	429a      	cmp	r2, r3
 8008426:	f4ff af41 	bcc.w	80082ac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800842a:	4804      	ldr	r0, [pc, #16]	; (800843c <mem_malloc+0x1e4>)
 800842c:	f009 fa19 	bl	8011862 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20004a84 	.word	0x20004a84
 8008440:	20004a88 	.word	0x20004a88
 8008444:	08012c28 	.word	0x08012c28
 8008448:	08012dec 	.word	0x08012dec
 800844c:	08012c70 	.word	0x08012c70
 8008450:	20004a80 	.word	0x20004a80
 8008454:	08012e00 	.word	0x08012e00
 8008458:	08012e1c 	.word	0x08012e1c
 800845c:	08012e4c 	.word	0x08012e4c
 8008460:	08012e7c 	.word	0x08012e7c

08008464 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	3303      	adds	r3, #3
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e011      	b.n	80084aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	461a      	mov	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	dbe7      	blt.n	8008486 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80084ca:	2300      	movs	r3, #0
 80084cc:	80fb      	strh	r3, [r7, #6]
 80084ce:	e009      	b.n	80084e4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	4a08      	ldr	r2, [pc, #32]	; (80084f4 <memp_init+0x30>)
 80084d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff ffc3 	bl	8008464 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	3301      	adds	r3, #1
 80084e2:	80fb      	strh	r3, [r7, #6]
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	2b0c      	cmp	r3, #12
 80084e8:	d9f2      	bls.n	80084d0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	080156a0 	.word	0x080156a0

080084f8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008500:	f009 f9dc 	bl	80118bc <sys_arch_protect>
 8008504:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d015      	beq.n	8008540 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d006      	beq.n	8008536 <do_memp_malloc_pool+0x3e>
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <do_memp_malloc_pool+0x58>)
 800852a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800852e:	4909      	ldr	r1, [pc, #36]	; (8008554 <do_memp_malloc_pool+0x5c>)
 8008530:	4809      	ldr	r0, [pc, #36]	; (8008558 <do_memp_malloc_pool+0x60>)
 8008532:	f009 fb7d 	bl	8011c30 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f009 f9ce 	bl	80118d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	e003      	b.n	8008548 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f009 f9c9 	bl	80118d8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08012ea0 	.word	0x08012ea0
 8008554:	08012ed0 	.word	0x08012ed0
 8008558:	08012ef4 	.word	0x08012ef4

0800855c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b0c      	cmp	r3, #12
 800856a:	d908      	bls.n	800857e <memp_malloc+0x22>
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <memp_malloc+0x3c>)
 800856e:	f240 1257 	movw	r2, #343	; 0x157
 8008572:	490a      	ldr	r1, [pc, #40]	; (800859c <memp_malloc+0x40>)
 8008574:	480a      	ldr	r0, [pc, #40]	; (80085a0 <memp_malloc+0x44>)
 8008576:	f009 fb5b 	bl	8011c30 <iprintf>
 800857a:	2300      	movs	r3, #0
 800857c:	e008      	b.n	8008590 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <memp_malloc+0x48>)
 8008582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ffb6 	bl	80084f8 <do_memp_malloc_pool>
 800858c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800858e:	68fb      	ldr	r3, [r7, #12]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	08012ea0 	.word	0x08012ea0
 800859c:	08012f30 	.word	0x08012f30
 80085a0:	08012ef4 	.word	0x08012ef4
 80085a4:	080156a0 	.word	0x080156a0

080085a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <do_memp_free_pool+0x22>
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <do_memp_free_pool+0x4c>)
 80085be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80085c2:	490d      	ldr	r1, [pc, #52]	; (80085f8 <do_memp_free_pool+0x50>)
 80085c4:	480d      	ldr	r0, [pc, #52]	; (80085fc <do_memp_free_pool+0x54>)
 80085c6:	f009 fb33 	bl	8011c30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80085ce:	f009 f975 	bl	80118bc <sys_arch_protect>
 80085d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80085e6:	68b8      	ldr	r0, [r7, #8]
 80085e8:	f009 f976 	bl	80118d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	08012ea0 	.word	0x08012ea0
 80085f8:	08012f50 	.word	0x08012f50
 80085fc:	08012ef4 	.word	0x08012ef4

08008600 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b0c      	cmp	r3, #12
 8008610:	d907      	bls.n	8008622 <memp_free+0x22>
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <memp_free+0x44>)
 8008614:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008618:	490b      	ldr	r1, [pc, #44]	; (8008648 <memp_free+0x48>)
 800861a:	480c      	ldr	r0, [pc, #48]	; (800864c <memp_free+0x4c>)
 800861c:	f009 fb08 	bl	8011c30 <iprintf>
 8008620:	e00c      	b.n	800863c <memp_free+0x3c>

  if (mem == NULL) {
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	4a09      	ldr	r2, [pc, #36]	; (8008650 <memp_free+0x50>)
 800862c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff ffb8 	bl	80085a8 <do_memp_free_pool>
 8008638:	e000      	b.n	800863c <memp_free+0x3c>
    return;
 800863a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	08012ea0 	.word	0x08012ea0
 8008648:	08012f70 	.word	0x08012f70
 800864c:	08012ef4 	.word	0x08012ef4
 8008650:	080156a0 	.word	0x080156a0

08008654 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008658:	bf00      	nop
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d108      	bne.n	800868a <netif_add+0x26>
 8008678:	4b57      	ldr	r3, [pc, #348]	; (80087d8 <netif_add+0x174>)
 800867a:	f240 1227 	movw	r2, #295	; 0x127
 800867e:	4957      	ldr	r1, [pc, #348]	; (80087dc <netif_add+0x178>)
 8008680:	4857      	ldr	r0, [pc, #348]	; (80087e0 <netif_add+0x17c>)
 8008682:	f009 fad5 	bl	8011c30 <iprintf>
 8008686:	2300      	movs	r3, #0
 8008688:	e0a2      	b.n	80087d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d108      	bne.n	80086a2 <netif_add+0x3e>
 8008690:	4b51      	ldr	r3, [pc, #324]	; (80087d8 <netif_add+0x174>)
 8008692:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008696:	4953      	ldr	r1, [pc, #332]	; (80087e4 <netif_add+0x180>)
 8008698:	4851      	ldr	r0, [pc, #324]	; (80087e0 <netif_add+0x17c>)
 800869a:	f009 fac9 	bl	8011c30 <iprintf>
 800869e:	2300      	movs	r3, #0
 80086a0:	e096      	b.n	80087d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80086a8:	4b4f      	ldr	r3, [pc, #316]	; (80087e8 <netif_add+0x184>)
 80086aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80086b2:	4b4d      	ldr	r3, [pc, #308]	; (80087e8 <netif_add+0x184>)
 80086b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80086bc:	4b4a      	ldr	r3, [pc, #296]	; (80087e8 <netif_add+0x184>)
 80086be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a45      	ldr	r2, [pc, #276]	; (80087ec <netif_add+0x188>)
 80086d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80086f2:	4b3f      	ldr	r3, [pc, #252]	; (80087f0 <netif_add+0x18c>)
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008700:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f913 	bl	8008934 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	4798      	blx	r3
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <netif_add+0xba>
    return NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	e058      	b.n	80087d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008724:	2bff      	cmp	r3, #255	; 0xff
 8008726:	d103      	bne.n	8008730 <netif_add+0xcc>
        netif->num = 0;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008734:	4b2f      	ldr	r3, [pc, #188]	; (80087f4 <netif_add+0x190>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	617b      	str	r3, [r7, #20]
 800873a:	e02b      	b.n	8008794 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	429a      	cmp	r2, r3
 8008742:	d106      	bne.n	8008752 <netif_add+0xee>
 8008744:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <netif_add+0x174>)
 8008746:	f240 128b 	movw	r2, #395	; 0x18b
 800874a:	492b      	ldr	r1, [pc, #172]	; (80087f8 <netif_add+0x194>)
 800874c:	4824      	ldr	r0, [pc, #144]	; (80087e0 <netif_add+0x17c>)
 800874e:	f009 fa6f 	bl	8011c30 <iprintf>
        num_netifs++;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	3301      	adds	r3, #1
 8008756:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2bff      	cmp	r3, #255	; 0xff
 800875c:	dd06      	ble.n	800876c <netif_add+0x108>
 800875e:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <netif_add+0x174>)
 8008760:	f240 128d 	movw	r2, #397	; 0x18d
 8008764:	4925      	ldr	r1, [pc, #148]	; (80087fc <netif_add+0x198>)
 8008766:	481e      	ldr	r0, [pc, #120]	; (80087e0 <netif_add+0x17c>)
 8008768:	f009 fa62 	bl	8011c30 <iprintf>
        if (netif2->num == netif->num) {
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008778:	429a      	cmp	r2, r3
 800877a:	d108      	bne.n	800878e <netif_add+0x12a>
          netif->num++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008782:	3301      	adds	r3, #1
 8008784:	b2da      	uxtb	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800878c:	e005      	b.n	800879a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1d0      	bne.n	800873c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1be      	bne.n	800871e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087a6:	2bfe      	cmp	r3, #254	; 0xfe
 80087a8:	d103      	bne.n	80087b2 <netif_add+0x14e>
    netif_num = 0;
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <netif_add+0x18c>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	e006      	b.n	80087c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087b8:	3301      	adds	r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <netif_add+0x18c>)
 80087be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <netif_add+0x190>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80087c8:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <netif_add+0x190>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80087ce:	68fb      	ldr	r3, [r7, #12]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	08012f8c 	.word	0x08012f8c
 80087dc:	08013020 	.word	0x08013020
 80087e0:	08012fdc 	.word	0x08012fdc
 80087e4:	0801303c 	.word	0x0801303c
 80087e8:	08015714 	.word	0x08015714
 80087ec:	08008c0f 	.word	0x08008c0f
 80087f0:	20004ac0 	.word	0x20004ac0
 80087f4:	2000b4b8 	.word	0x2000b4b8
 80087f8:	08013060 	.word	0x08013060
 80087fc:	08013074 	.word	0x08013074

08008800 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f002 fb7d 	bl	800af0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f006 fc8d 	bl	800f134 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <netif_do_set_ipaddr+0x20>
 8008836:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <netif_do_set_ipaddr+0x88>)
 8008838:	f240 12cb 	movw	r2, #459	; 0x1cb
 800883c:	491c      	ldr	r1, [pc, #112]	; (80088b0 <netif_do_set_ipaddr+0x8c>)
 800883e:	481d      	ldr	r0, [pc, #116]	; (80088b4 <netif_do_set_ipaddr+0x90>)
 8008840:	f009 f9f6 	bl	8011c30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <netif_do_set_ipaddr+0x34>
 800884a:	4b18      	ldr	r3, [pc, #96]	; (80088ac <netif_do_set_ipaddr+0x88>)
 800884c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008850:	4917      	ldr	r1, [pc, #92]	; (80088b0 <netif_do_set_ipaddr+0x8c>)
 8008852:	4818      	ldr	r0, [pc, #96]	; (80088b4 <netif_do_set_ipaddr+0x90>)
 8008854:	f009 f9ec 	bl	8011c30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3304      	adds	r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d01c      	beq.n	80088a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3304      	adds	r3, #4
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008876:	f107 0314 	add.w	r3, r7, #20
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ffbf 	bl	8008800 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <netif_do_set_ipaddr+0x6a>
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	e000      	b.n	8008890 <netif_do_set_ipaddr+0x6c>
 800888e:	2300      	movs	r3, #0
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008894:	2101      	movs	r1, #1
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f8d2 	bl	8008a40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	08012f8c 	.word	0x08012f8c
 80088b0:	080130a4 	.word	0x080130a4
 80088b4:	08012fdc 	.word	0x08012fdc

080088b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3308      	adds	r3, #8
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d00a      	beq.n	80088e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <netif_do_set_netmask+0x26>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	e000      	b.n	80088e0 <netif_do_set_netmask+0x28>
 80088de:	2300      	movs	r3, #0
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80088e4:	2301      	movs	r3, #1
 80088e6:	e000      	b.n	80088ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	330c      	adds	r3, #12
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d00a      	beq.n	8008926 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <netif_do_set_gw+0x26>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	e000      	b.n	800891e <netif_do_set_gw+0x28>
 800891c:	2300      	movs	r3, #0
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008950:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <netif_set_addr+0x90>)
 8008952:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800895a:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <netif_set_addr+0x90>)
 800895c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <netif_set_addr+0x90>)
 8008966:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <netif_set_addr+0x42>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <netif_set_addr+0x46>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <netif_set_addr+0x48>
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008984:	f107 0310 	add.w	r3, r7, #16
 8008988:	461a      	mov	r2, r3
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff ff49 	bl	8008824 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff ff8e 	bl	80088b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7ff ffa8 	bl	80088f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	461a      	mov	r2, r3
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7ff ff35 	bl	8008824 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80089ba:	bf00      	nop
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08015714 	.word	0x08015714

080089c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80089d0:	4a04      	ldr	r2, [pc, #16]	; (80089e4 <netif_set_default+0x1c>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000b4bc 	.word	0x2000b4bc

080089e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <netif_set_up+0x1e>
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <netif_set_up+0x4c>)
 80089f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80089fc:	490e      	ldr	r1, [pc, #56]	; (8008a38 <netif_set_up+0x50>)
 80089fe:	480f      	ldr	r0, [pc, #60]	; (8008a3c <netif_set_up+0x54>)
 8008a00:	f009 f916 	bl	8011c30 <iprintf>
 8008a04:	e013      	b.n	8008a2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10c      	bne.n	8008a2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008a26:	2103      	movs	r1, #3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f809 	bl	8008a40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	08012f8c 	.word	0x08012f8c
 8008a38:	08013114 	.word	0x08013114
 8008a3c:	08012fdc 	.word	0x08012fdc

08008a40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <netif_issue_reports+0x20>
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <netif_issue_reports+0x74>)
 8008a54:	f240 326d 	movw	r2, #877	; 0x36d
 8008a58:	4917      	ldr	r1, [pc, #92]	; (8008ab8 <netif_issue_reports+0x78>)
 8008a5a:	4818      	ldr	r0, [pc, #96]	; (8008abc <netif_issue_reports+0x7c>)
 8008a5c:	f009 f8e8 	bl	8011c30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01e      	beq.n	8008aac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d017      	beq.n	8008aac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d013      	beq.n	8008aae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a96:	f003 0308 	and.w	r3, r3, #8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f007 faaf 	bl	8010008 <etharp_request>
 8008aaa:	e000      	b.n	8008aae <netif_issue_reports+0x6e>
    return;
 8008aac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	08012f8c 	.word	0x08012f8c
 8008ab8:	08013130 	.word	0x08013130
 8008abc:	08012fdc 	.word	0x08012fdc

08008ac0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d107      	bne.n	8008ade <netif_set_down+0x1e>
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <netif_set_down+0x58>)
 8008ad0:	f240 329b 	movw	r2, #923	; 0x39b
 8008ad4:	4911      	ldr	r1, [pc, #68]	; (8008b1c <netif_set_down+0x5c>)
 8008ad6:	4812      	ldr	r0, [pc, #72]	; (8008b20 <netif_set_down+0x60>)
 8008ad8:	f009 f8aa 	bl	8011c30 <iprintf>
 8008adc:	e019      	b.n	8008b12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d012      	beq.n	8008b12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f006 fe39 	bl	800f784 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	08012f8c 	.word	0x08012f8c
 8008b1c:	08013154 	.word	0x08013154
 8008b20:	08012fdc 	.word	0x08012fdc

08008b24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d107      	bne.n	8008b42 <netif_set_link_up+0x1e>
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <netif_set_link_up+0x5c>)
 8008b34:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008b38:	4912      	ldr	r1, [pc, #72]	; (8008b84 <netif_set_link_up+0x60>)
 8008b3a:	4813      	ldr	r0, [pc, #76]	; (8008b88 <netif_set_link_up+0x64>)
 8008b3c:	f009 f878 	bl	8011c30 <iprintf>
 8008b40:	e01b      	b.n	8008b7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d114      	bne.n	8008b7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008b62:	2103      	movs	r1, #3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff6b 	bl	8008a40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <netif_set_link_up+0x56>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	08012f8c 	.word	0x08012f8c
 8008b84:	08013174 	.word	0x08013174
 8008b88:	08012fdc 	.word	0x08012fdc

08008b8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d107      	bne.n	8008baa <netif_set_link_down+0x1e>
 8008b9a:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <netif_set_link_down+0x54>)
 8008b9c:	f240 4206 	movw	r2, #1030	; 0x406
 8008ba0:	4910      	ldr	r1, [pc, #64]	; (8008be4 <netif_set_link_down+0x58>)
 8008ba2:	4811      	ldr	r0, [pc, #68]	; (8008be8 <netif_set_link_down+0x5c>)
 8008ba4:	f009 f844 	bl	8011c30 <iprintf>
 8008ba8:	e017      	b.n	8008bda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bbe:	f023 0304 	bic.w	r3, r3, #4
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <netif_set_link_down+0x4e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	08012f8c 	.word	0x08012f8c
 8008be4:	08013198 	.word	0x08013198
 8008be8:	08012fdc 	.word	0x08012fdc

08008bec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	61da      	str	r2, [r3, #28]
  }
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008c1a:	f06f 030b 	mvn.w	r3, #11
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d013      	beq.n	8008c64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <netif_get_by_index+0x48>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	e00c      	b.n	8008c5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	79fa      	ldrb	r2, [r7, #7]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d101      	bne.n	8008c58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	e006      	b.n	8008c66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1ef      	bne.n	8008c44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2000b4b8 	.word	0x2000b4b8

08008c78 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008c7e:	f008 fe1d 	bl	80118bc <sys_arch_protect>
 8008c82:	6038      	str	r0, [r7, #0]
 8008c84:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <pbuf_free_ooseq+0x44>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	6838      	ldr	r0, [r7, #0]
 8008c8c:	f008 fe24 	bl	80118d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <pbuf_free_ooseq+0x48>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	e00a      	b.n	8008cae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 f971 	bl	800af88 <tcp_free_ooseq>
      return;
 8008ca6:	e005      	b.n	8008cb4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1f1      	bne.n	8008c98 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	2000b4c0 	.word	0x2000b4c0
 8008cc0:	2000b4c8 	.word	0x2000b4c8

08008cc4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008ccc:	f7ff ffd4 	bl	8008c78 <pbuf_free_ooseq>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008cde:	f008 fded 	bl	80118bc <sys_arch_protect>
 8008ce2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008ce4:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <pbuf_pool_is_empty+0x4c>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008cea:	4b0e      	ldr	r3, [pc, #56]	; (8008d24 <pbuf_pool_is_empty+0x4c>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f008 fdf1 	bl	80118d8 <sys_arch_unprotect>

  if (!queued) {
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10f      	bne.n	8008d1c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	480a      	ldr	r0, [pc, #40]	; (8008d28 <pbuf_pool_is_empty+0x50>)
 8008d00:	f7fe feec 	bl	8007adc <tcpip_try_callback>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <pbuf_pool_is_empty+0x44>
 8008d0a:	f008 fdd7 	bl	80118bc <sys_arch_protect>
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <pbuf_pool_is_empty+0x4c>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f008 fdde 	bl	80118d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	2000b4c0 	.word	0x2000b4c0
 8008d28:	08008cc5 	.word	0x08008cc5

08008d2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4611      	mov	r1, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	80fb      	strh	r3, [r7, #6]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	88ba      	ldrh	r2, [r7, #4]
 8008d58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008d5a:	8b3b      	ldrh	r3, [r7, #24]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	7f3a      	ldrb	r2, [r7, #28]
 8008d66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	73da      	strb	r2, [r3, #15]
}
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	; 0x30
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	80bb      	strh	r3, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008d96:	887b      	ldrh	r3, [r7, #2]
 8008d98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008d9c:	d07f      	beq.n	8008e9e <pbuf_alloc+0x11e>
 8008d9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008da2:	f300 80c8 	bgt.w	8008f36 <pbuf_alloc+0x1b6>
 8008da6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008daa:	d010      	beq.n	8008dce <pbuf_alloc+0x4e>
 8008dac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008db0:	f300 80c1 	bgt.w	8008f36 <pbuf_alloc+0x1b6>
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d002      	beq.n	8008dbe <pbuf_alloc+0x3e>
 8008db8:	2b41      	cmp	r3, #65	; 0x41
 8008dba:	f040 80bc 	bne.w	8008f36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008dbe:	887a      	ldrh	r2, [r7, #2]
 8008dc0:	88bb      	ldrh	r3, [r7, #4]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f000 f8d1 	bl	8008f6c <pbuf_alloc_reference>
 8008dca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008dcc:	e0bd      	b.n	8008f4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008dd6:	88bb      	ldrh	r3, [r7, #4]
 8008dd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008dda:	200c      	movs	r0, #12
 8008ddc:	f7ff fbbe 	bl	800855c <memp_malloc>
 8008de0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008de8:	f7ff ff76 	bl	8008cd8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df4:	f000 faa8 	bl	8009348 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e0a7      	b.n	8008f4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dfe:	3303      	adds	r3, #3
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f023 0303 	bic.w	r3, r3, #3
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	8b7a      	ldrh	r2, [r7, #26]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	bf28      	it	cs
 8008e14:	4613      	movcs	r3, r2
 8008e16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4413      	add	r3, r2
 8008e20:	3303      	adds	r3, #3
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	4618      	mov	r0, r3
 8008e28:	89f9      	ldrh	r1, [r7, #14]
 8008e2a:	8b7a      	ldrh	r2, [r7, #26]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	887b      	ldrh	r3, [r7, #2]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	460b      	mov	r3, r1
 8008e36:	4601      	mov	r1, r0
 8008e38:	6938      	ldr	r0, [r7, #16]
 8008e3a:	f7ff ff77 	bl	8008d2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <pbuf_alloc+0xd8>
 8008e4a:	4b42      	ldr	r3, [pc, #264]	; (8008f54 <pbuf_alloc+0x1d4>)
 8008e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e50:	4941      	ldr	r1, [pc, #260]	; (8008f58 <pbuf_alloc+0x1d8>)
 8008e52:	4842      	ldr	r0, [pc, #264]	; (8008f5c <pbuf_alloc+0x1dc>)
 8008e54:	f008 feec 	bl	8011c30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e5a:	3303      	adds	r3, #3
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008e64:	d106      	bne.n	8008e74 <pbuf_alloc+0xf4>
 8008e66:	4b3b      	ldr	r3, [pc, #236]	; (8008f54 <pbuf_alloc+0x1d4>)
 8008e68:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008e6c:	493c      	ldr	r1, [pc, #240]	; (8008f60 <pbuf_alloc+0x1e0>)
 8008e6e:	483b      	ldr	r0, [pc, #236]	; (8008f5c <pbuf_alloc+0x1dc>)
 8008e70:	f008 fede 	bl	8011c30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7e:	e002      	b.n	8008e86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008e8a:	8b7a      	ldrh	r2, [r7, #26]
 8008e8c:	89fb      	ldrh	r3, [r7, #14]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008e96:	8b7b      	ldrh	r3, [r7, #26]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d19e      	bne.n	8008dda <pbuf_alloc+0x5a>
      break;
 8008e9c:	e055      	b.n	8008f4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ea0:	3303      	adds	r3, #3
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f023 0303 	bic.w	r3, r3, #3
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	88bb      	ldrh	r3, [r7, #4]
 8008eac:	3303      	adds	r3, #3
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f023 0303 	bic.w	r3, r3, #3
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008eba:	8b3b      	ldrh	r3, [r7, #24]
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008ec0:	8b3a      	ldrh	r2, [r7, #24]
 8008ec2:	88bb      	ldrh	r3, [r7, #4]
 8008ec4:	3303      	adds	r3, #3
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d306      	bcc.n	8008edc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008ece:	8afa      	ldrh	r2, [r7, #22]
 8008ed0:	88bb      	ldrh	r3, [r7, #4]
 8008ed2:	3303      	adds	r3, #3
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d201      	bcs.n	8008ee0 <pbuf_alloc+0x160>
        return NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e035      	b.n	8008f4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008ee0:	8afb      	ldrh	r3, [r7, #22]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff f9b8 	bl	8008258 <mem_malloc>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <pbuf_alloc+0x174>
        return NULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e02b      	b.n	8008f4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ef6:	3310      	adds	r3, #16
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	4413      	add	r3, r2
 8008efc:	3303      	adds	r3, #3
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	4618      	mov	r0, r3
 8008f04:	88b9      	ldrh	r1, [r7, #4]
 8008f06:	88ba      	ldrh	r2, [r7, #4]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	460b      	mov	r3, r1
 8008f12:	4601      	mov	r1, r0
 8008f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f16:	f7ff ff09 	bl	8008d2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d010      	beq.n	8008f48 <pbuf_alloc+0x1c8>
 8008f26:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <pbuf_alloc+0x1d4>)
 8008f28:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008f2c:	490d      	ldr	r1, [pc, #52]	; (8008f64 <pbuf_alloc+0x1e4>)
 8008f2e:	480b      	ldr	r0, [pc, #44]	; (8008f5c <pbuf_alloc+0x1dc>)
 8008f30:	f008 fe7e 	bl	8011c30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008f34:	e008      	b.n	8008f48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <pbuf_alloc+0x1d4>)
 8008f38:	f240 1227 	movw	r2, #295	; 0x127
 8008f3c:	490a      	ldr	r1, [pc, #40]	; (8008f68 <pbuf_alloc+0x1e8>)
 8008f3e:	4807      	ldr	r0, [pc, #28]	; (8008f5c <pbuf_alloc+0x1dc>)
 8008f40:	f008 fe76 	bl	8011c30 <iprintf>
      return NULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e001      	b.n	8008f4c <pbuf_alloc+0x1cc>
      break;
 8008f48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3728      	adds	r7, #40	; 0x28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	080131bc 	.word	0x080131bc
 8008f58:	080131ec 	.word	0x080131ec
 8008f5c:	0801321c 	.word	0x0801321c
 8008f60:	08013244 	.word	0x08013244
 8008f64:	08013278 	.word	0x08013278
 8008f68:	080132a4 	.word	0x080132a4

08008f6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	807b      	strh	r3, [r7, #2]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008f7c:	883b      	ldrh	r3, [r7, #0]
 8008f7e:	2b41      	cmp	r3, #65	; 0x41
 8008f80:	d009      	beq.n	8008f96 <pbuf_alloc_reference+0x2a>
 8008f82:	883b      	ldrh	r3, [r7, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d006      	beq.n	8008f96 <pbuf_alloc_reference+0x2a>
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <pbuf_alloc_reference+0x5c>)
 8008f8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008f8e:	490f      	ldr	r1, [pc, #60]	; (8008fcc <pbuf_alloc_reference+0x60>)
 8008f90:	480f      	ldr	r0, [pc, #60]	; (8008fd0 <pbuf_alloc_reference+0x64>)
 8008f92:	f008 fe4d 	bl	8011c30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008f96:	200b      	movs	r0, #11
 8008f98:	f7ff fae0 	bl	800855c <memp_malloc>
 8008f9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e00b      	b.n	8008fc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008fa8:	8879      	ldrh	r1, [r7, #2]
 8008faa:	887a      	ldrh	r2, [r7, #2]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	883b      	ldrh	r3, [r7, #0]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7ff feb7 	bl	8008d2c <pbuf_init_alloced_pbuf>
  return p;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	080131bc 	.word	0x080131bc
 8008fcc:	080132c0 	.word	0x080132c0
 8008fd0:	0801321c 	.word	0x0801321c

08008fd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af02      	add	r7, sp, #8
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	81bb      	strh	r3, [r7, #12]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008fec:	8a7b      	ldrh	r3, [r7, #18]
 8008fee:	3303      	adds	r3, #3
 8008ff0:	f023 0203 	bic.w	r2, r3, #3
 8008ff4:	89bb      	ldrh	r3, [r7, #12]
 8008ff6:	441a      	add	r2, r3
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d901      	bls.n	8009002 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	e018      	b.n	8009034 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009008:	8a7b      	ldrh	r3, [r7, #18]
 800900a:	3303      	adds	r3, #3
 800900c:	f023 0303 	bic.w	r3, r3, #3
 8009010:	6a3a      	ldr	r2, [r7, #32]
 8009012:	4413      	add	r3, r2
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e001      	b.n	800901c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	89b9      	ldrh	r1, [r7, #12]
 8009020:	89ba      	ldrh	r2, [r7, #12]
 8009022:	2302      	movs	r3, #2
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	460b      	mov	r3, r1
 800902c:	6979      	ldr	r1, [r7, #20]
 800902e:	f7ff fe7d 	bl	8008d2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009032:	687b      	ldr	r3, [r7, #4]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <pbuf_realloc+0x20>
 800904e:	4b3a      	ldr	r3, [pc, #232]	; (8009138 <pbuf_realloc+0xfc>)
 8009050:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009054:	4939      	ldr	r1, [pc, #228]	; (800913c <pbuf_realloc+0x100>)
 8009056:	483a      	ldr	r0, [pc, #232]	; (8009140 <pbuf_realloc+0x104>)
 8009058:	f008 fdea 	bl	8011c30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	891b      	ldrh	r3, [r3, #8]
 8009060:	887a      	ldrh	r2, [r7, #2]
 8009062:	429a      	cmp	r2, r3
 8009064:	d263      	bcs.n	800912e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	891a      	ldrh	r2, [r3, #8]
 800906a:	887b      	ldrh	r3, [r7, #2]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009070:	887b      	ldrh	r3, [r7, #2]
 8009072:	817b      	strh	r3, [r7, #10]
  q = p;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009078:	e018      	b.n	80090ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	895b      	ldrh	r3, [r3, #10]
 800907e:	897a      	ldrh	r2, [r7, #10]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	891a      	ldrh	r2, [r3, #8]
 8009088:	893b      	ldrh	r3, [r7, #8]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <pbuf_realloc+0x70>
 800909e:	4b26      	ldr	r3, [pc, #152]	; (8009138 <pbuf_realloc+0xfc>)
 80090a0:	f240 12af 	movw	r2, #431	; 0x1af
 80090a4:	4927      	ldr	r1, [pc, #156]	; (8009144 <pbuf_realloc+0x108>)
 80090a6:	4826      	ldr	r0, [pc, #152]	; (8009140 <pbuf_realloc+0x104>)
 80090a8:	f008 fdc2 	bl	8011c30 <iprintf>
  while (rem_len > q->len) {
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	895b      	ldrh	r3, [r3, #10]
 80090b0:	897a      	ldrh	r2, [r7, #10]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d8e1      	bhi.n	800907a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	7b1b      	ldrb	r3, [r3, #12]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d121      	bne.n	8009106 <pbuf_realloc+0xca>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	895b      	ldrh	r3, [r3, #10]
 80090c6:	897a      	ldrh	r2, [r7, #10]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d01c      	beq.n	8009106 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	7b5b      	ldrb	r3, [r3, #13]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d116      	bne.n	8009106 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	897b      	ldrh	r3, [r7, #10]
 80090e4:	4413      	add	r3, r2
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4619      	mov	r1, r3
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7fe ffaa 	bl	8008044 <mem_trim>
 80090f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <pbuf_realloc+0xca>
 80090f8:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <pbuf_realloc+0xfc>)
 80090fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80090fe:	4912      	ldr	r1, [pc, #72]	; (8009148 <pbuf_realloc+0x10c>)
 8009100:	480f      	ldr	r0, [pc, #60]	; (8009140 <pbuf_realloc+0x104>)
 8009102:	f008 fd95 	bl	8011c30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	897a      	ldrh	r2, [r7, #10]
 800910a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	895a      	ldrh	r2, [r3, #10]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f911 	bl	8009348 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e000      	b.n	8009130 <pbuf_realloc+0xf4>
    return;
 800912e:	bf00      	nop

}
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	080131bc 	.word	0x080131bc
 800913c:	080132d4 	.word	0x080132d4
 8009140:	0801321c 	.word	0x0801321c
 8009144:	080132ec 	.word	0x080132ec
 8009148:	08013304 	.word	0x08013304

0800914c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <pbuf_add_header_impl+0x22>
 8009160:	4b2b      	ldr	r3, [pc, #172]	; (8009210 <pbuf_add_header_impl+0xc4>)
 8009162:	f240 12df 	movw	r2, #479	; 0x1df
 8009166:	492b      	ldr	r1, [pc, #172]	; (8009214 <pbuf_add_header_impl+0xc8>)
 8009168:	482b      	ldr	r0, [pc, #172]	; (8009218 <pbuf_add_header_impl+0xcc>)
 800916a:	f008 fd61 	bl	8011c30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <pbuf_add_header_impl+0x30>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917a:	d301      	bcc.n	8009180 <pbuf_add_header_impl+0x34>
    return 1;
 800917c:	2301      	movs	r3, #1
 800917e:	e043      	b.n	8009208 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <pbuf_add_header_impl+0x3e>
    return 0;
 8009186:	2300      	movs	r3, #0
 8009188:	e03e      	b.n	8009208 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	891a      	ldrh	r2, [r3, #8]
 8009192:	8a7b      	ldrh	r3, [r7, #18]
 8009194:	4413      	add	r3, r2
 8009196:	b29b      	uxth	r3, r3
 8009198:	8a7a      	ldrh	r2, [r7, #18]
 800919a:	429a      	cmp	r2, r3
 800919c:	d901      	bls.n	80091a2 <pbuf_add_header_impl+0x56>
    return 1;
 800919e:	2301      	movs	r3, #1
 80091a0:	e032      	b.n	8009208 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	7b1b      	ldrb	r3, [r3, #12]
 80091a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80091a8:	8a3b      	ldrh	r3, [r7, #16]
 80091aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00c      	beq.n	80091cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	425b      	negs	r3, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3310      	adds	r3, #16
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d20d      	bcs.n	80091e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e01d      	b.n	8009208 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	425b      	negs	r3, r3
 80091da:	4413      	add	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e001      	b.n	80091e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e011      	b.n	8009208 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	895a      	ldrh	r2, [r3, #10]
 80091ee:	8a7b      	ldrh	r3, [r7, #18]
 80091f0:	4413      	add	r3, r2
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	891a      	ldrh	r2, [r3, #8]
 80091fc:	8a7b      	ldrh	r3, [r7, #18]
 80091fe:	4413      	add	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	811a      	strh	r2, [r3, #8]


  return 0;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	080131bc 	.word	0x080131bc
 8009214:	08013320 	.word	0x08013320
 8009218:	0801321c 	.word	0x0801321c

0800921c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ff8e 	bl	800914c <pbuf_add_header_impl>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <pbuf_remove_header+0x1e>
 800924c:	4b20      	ldr	r3, [pc, #128]	; (80092d0 <pbuf_remove_header+0x94>)
 800924e:	f240 224b 	movw	r2, #587	; 0x24b
 8009252:	4920      	ldr	r1, [pc, #128]	; (80092d4 <pbuf_remove_header+0x98>)
 8009254:	4820      	ldr	r0, [pc, #128]	; (80092d8 <pbuf_remove_header+0x9c>)
 8009256:	f008 fceb 	bl	8011c30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <pbuf_remove_header+0x2c>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009266:	d301      	bcc.n	800926c <pbuf_remove_header+0x30>
    return 1;
 8009268:	2301      	movs	r3, #1
 800926a:	e02c      	b.n	80092c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <pbuf_remove_header+0x3a>
    return 0;
 8009272:	2300      	movs	r3, #0
 8009274:	e027      	b.n	80092c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	895b      	ldrh	r3, [r3, #10]
 800927e:	89fa      	ldrh	r2, [r7, #14]
 8009280:	429a      	cmp	r2, r3
 8009282:	d908      	bls.n	8009296 <pbuf_remove_header+0x5a>
 8009284:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <pbuf_remove_header+0x94>)
 8009286:	f240 2255 	movw	r2, #597	; 0x255
 800928a:	4914      	ldr	r1, [pc, #80]	; (80092dc <pbuf_remove_header+0xa0>)
 800928c:	4812      	ldr	r0, [pc, #72]	; (80092d8 <pbuf_remove_header+0x9c>)
 800928e:	f008 fccf 	bl	8011c30 <iprintf>
 8009292:	2301      	movs	r3, #1
 8009294:	e017      	b.n	80092c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	441a      	add	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	895a      	ldrh	r2, [r3, #10]
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	891a      	ldrh	r2, [r3, #8]
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	080131bc 	.word	0x080131bc
 80092d4:	08013320 	.word	0x08013320
 80092d8:	0801321c 	.word	0x0801321c
 80092dc:	0801332c 	.word	0x0801332c

080092e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	807b      	strh	r3, [r7, #2]
 80092ec:	4613      	mov	r3, r2
 80092ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80092f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da08      	bge.n	800930a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80092f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092fc:	425b      	negs	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ff9b 	bl	800923c <pbuf_remove_header>
 8009306:	4603      	mov	r3, r0
 8009308:	e007      	b.n	800931a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800930a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800930e:	787a      	ldrb	r2, [r7, #1]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ff1a 	bl	800914c <pbuf_add_header_impl>
 8009318:	4603      	mov	r3, r0
  }
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800932e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009332:	2201      	movs	r2, #1
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff ffd2 	bl	80092e0 <pbuf_header_impl>
 800933c:	4603      	mov	r3, r0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <pbuf_free+0x22>
 800935c:	4b3b      	ldr	r3, [pc, #236]	; (800944c <pbuf_free+0x104>)
 800935e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009362:	493b      	ldr	r1, [pc, #236]	; (8009450 <pbuf_free+0x108>)
 8009364:	483b      	ldr	r0, [pc, #236]	; (8009454 <pbuf_free+0x10c>)
 8009366:	f008 fc63 	bl	8011c30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800936a:	2300      	movs	r3, #0
 800936c:	e069      	b.n	8009442 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009372:	e062      	b.n	800943a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009374:	f008 faa2 	bl	80118bc <sys_arch_protect>
 8009378:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7b9b      	ldrb	r3, [r3, #14]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <pbuf_free+0x48>
 8009382:	4b32      	ldr	r3, [pc, #200]	; (800944c <pbuf_free+0x104>)
 8009384:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009388:	4933      	ldr	r1, [pc, #204]	; (8009458 <pbuf_free+0x110>)
 800938a:	4832      	ldr	r0, [pc, #200]	; (8009454 <pbuf_free+0x10c>)
 800938c:	f008 fc50 	bl	8011c30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7b9b      	ldrb	r3, [r3, #14]
 8009394:	3b01      	subs	r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	739a      	strb	r2, [r3, #14]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7b9b      	ldrb	r3, [r3, #14]
 80093a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80093a2:	69b8      	ldr	r0, [r7, #24]
 80093a4:	f008 fa98 	bl	80118d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d143      	bne.n	8009436 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7b1b      	ldrb	r3, [r3, #12]
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7b5b      	ldrb	r3, [r3, #13]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d011      	beq.n	80093ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <pbuf_free+0x9c>
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <pbuf_free+0x104>)
 80093d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80093dc:	491f      	ldr	r1, [pc, #124]	; (800945c <pbuf_free+0x114>)
 80093de:	481d      	ldr	r0, [pc, #116]	; (8009454 <pbuf_free+0x10c>)
 80093e0:	f008 fc26 	bl	8011c30 <iprintf>
        pc->custom_free_function(p);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
 80093ec:	e01d      	b.n	800942a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d104      	bne.n	80093fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	200c      	movs	r0, #12
 80093f8:	f7ff f902 	bl	8008600 <memp_free>
 80093fc:	e015      	b.n	800942a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d104      	bne.n	800940e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	200b      	movs	r0, #11
 8009408:	f7ff f8fa 	bl	8008600 <memp_free>
 800940c:	e00d      	b.n	800942a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <pbuf_free+0xd4>
          mem_free(p);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe fd85 	bl	8007f24 <mem_free>
 800941a:	e006      	b.n	800942a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <pbuf_free+0x104>)
 800941e:	f240 320f 	movw	r2, #783	; 0x30f
 8009422:	490f      	ldr	r1, [pc, #60]	; (8009460 <pbuf_free+0x118>)
 8009424:	480b      	ldr	r0, [pc, #44]	; (8009454 <pbuf_free+0x10c>)
 8009426:	f008 fc03 	bl	8011c30 <iprintf>
        }
      }
      count++;
 800942a:	7ffb      	ldrb	r3, [r7, #31]
 800942c:	3301      	adds	r3, #1
 800942e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	e001      	b.n	800943a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d199      	bne.n	8009374 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009440:	7ffb      	ldrb	r3, [r7, #31]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	080131bc 	.word	0x080131bc
 8009450:	08013320 	.word	0x08013320
 8009454:	0801321c 	.word	0x0801321c
 8009458:	0801334c 	.word	0x0801334c
 800945c:	08013364 	.word	0x08013364
 8009460:	08013388 	.word	0x08013388

08009464 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009470:	e005      	b.n	800947e <pbuf_clen+0x1a>
    ++len;
 8009472:	89fb      	ldrh	r3, [r7, #14]
 8009474:	3301      	adds	r3, #1
 8009476:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f6      	bne.n	8009472 <pbuf_clen+0xe>
  }
  return len;
 8009484:	89fb      	ldrh	r3, [r7, #14]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d016      	beq.n	80094d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80094a2:	f008 fa0b 	bl	80118bc <sys_arch_protect>
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7b9b      	ldrb	r3, [r3, #14]
 80094ac:	3301      	adds	r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	739a      	strb	r2, [r3, #14]
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f008 fa0f 	bl	80118d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7b9b      	ldrb	r3, [r3, #14]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <pbuf_ref+0x3c>
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <pbuf_ref+0x44>)
 80094c4:	f240 3242 	movw	r2, #834	; 0x342
 80094c8:	4904      	ldr	r1, [pc, #16]	; (80094dc <pbuf_ref+0x48>)
 80094ca:	4805      	ldr	r0, [pc, #20]	; (80094e0 <pbuf_ref+0x4c>)
 80094cc:	f008 fbb0 	bl	8011c30 <iprintf>
  }
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	080131bc 	.word	0x080131bc
 80094dc:	0801339c 	.word	0x0801339c
 80094e0:	0801321c 	.word	0x0801321c

080094e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <pbuf_cat+0x16>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d107      	bne.n	800950a <pbuf_cat+0x26>
 80094fa:	4b20      	ldr	r3, [pc, #128]	; (800957c <pbuf_cat+0x98>)
 80094fc:	f240 3259 	movw	r2, #857	; 0x359
 8009500:	491f      	ldr	r1, [pc, #124]	; (8009580 <pbuf_cat+0x9c>)
 8009502:	4820      	ldr	r0, [pc, #128]	; (8009584 <pbuf_cat+0xa0>)
 8009504:	f008 fb94 	bl	8011c30 <iprintf>
 8009508:	e034      	b.n	8009574 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60fb      	str	r3, [r7, #12]
 800950e:	e00a      	b.n	8009526 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	891a      	ldrh	r2, [r3, #8]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	891b      	ldrh	r3, [r3, #8]
 8009518:	4413      	add	r3, r2
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f0      	bne.n	8009510 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	891a      	ldrh	r2, [r3, #8]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	895b      	ldrh	r3, [r3, #10]
 8009536:	429a      	cmp	r2, r3
 8009538:	d006      	beq.n	8009548 <pbuf_cat+0x64>
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <pbuf_cat+0x98>)
 800953c:	f240 3262 	movw	r2, #866	; 0x362
 8009540:	4911      	ldr	r1, [pc, #68]	; (8009588 <pbuf_cat+0xa4>)
 8009542:	4810      	ldr	r0, [pc, #64]	; (8009584 <pbuf_cat+0xa0>)
 8009544:	f008 fb74 	bl	8011c30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d006      	beq.n	800955e <pbuf_cat+0x7a>
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <pbuf_cat+0x98>)
 8009552:	f240 3263 	movw	r2, #867	; 0x363
 8009556:	490d      	ldr	r1, [pc, #52]	; (800958c <pbuf_cat+0xa8>)
 8009558:	480a      	ldr	r0, [pc, #40]	; (8009584 <pbuf_cat+0xa0>)
 800955a:	f008 fb69 	bl	8011c30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	891a      	ldrh	r2, [r3, #8]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	4413      	add	r3, r2
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	080131bc 	.word	0x080131bc
 8009580:	080133b0 	.word	0x080133b0
 8009584:	0801321c 	.word	0x0801321c
 8009588:	080133e8 	.word	0x080133e8
 800958c:	08013418 	.word	0x08013418

08009590 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <pbuf_copy+0x2a>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <pbuf_copy+0x2a>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	891a      	ldrh	r2, [r3, #8]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	891b      	ldrh	r3, [r3, #8]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d209      	bcs.n	80095ce <pbuf_copy+0x3e>
 80095ba:	4b57      	ldr	r3, [pc, #348]	; (8009718 <pbuf_copy+0x188>)
 80095bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80095c0:	4956      	ldr	r1, [pc, #344]	; (800971c <pbuf_copy+0x18c>)
 80095c2:	4857      	ldr	r0, [pc, #348]	; (8009720 <pbuf_copy+0x190>)
 80095c4:	f008 fb34 	bl	8011c30 <iprintf>
 80095c8:	f06f 030f 	mvn.w	r3, #15
 80095cc:	e09f      	b.n	800970e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	895b      	ldrh	r3, [r3, #10]
 80095d2:	461a      	mov	r2, r3
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	1ad2      	subs	r2, r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	895b      	ldrh	r3, [r3, #10]
 80095dc:	4619      	mov	r1, r3
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1acb      	subs	r3, r1, r3
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d306      	bcc.n	80095f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	895b      	ldrh	r3, [r3, #10]
 80095ea:	461a      	mov	r2, r3
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	e005      	b.n	8009600 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	895b      	ldrh	r3, [r3, #10]
 80095f8:	461a      	mov	r2, r3
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	18d0      	adds	r0, r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4413      	add	r3, r2
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4619      	mov	r1, r3
 8009614:	f008 fa9b 	bl	8011b4e <memcpy>
    offset_to += len;
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4413      	add	r3, r2
 8009626:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	895b      	ldrh	r3, [r3, #10]
 800962c:	461a      	mov	r2, r3
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4293      	cmp	r3, r2
 8009632:	d906      	bls.n	8009642 <pbuf_copy+0xb2>
 8009634:	4b38      	ldr	r3, [pc, #224]	; (8009718 <pbuf_copy+0x188>)
 8009636:	f240 32d9 	movw	r2, #985	; 0x3d9
 800963a:	493a      	ldr	r1, [pc, #232]	; (8009724 <pbuf_copy+0x194>)
 800963c:	4838      	ldr	r0, [pc, #224]	; (8009720 <pbuf_copy+0x190>)
 800963e:	f008 faf7 	bl	8011c30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	895b      	ldrh	r3, [r3, #10]
 8009646:	461a      	mov	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	4293      	cmp	r3, r2
 800964c:	d906      	bls.n	800965c <pbuf_copy+0xcc>
 800964e:	4b32      	ldr	r3, [pc, #200]	; (8009718 <pbuf_copy+0x188>)
 8009650:	f240 32da 	movw	r2, #986	; 0x3da
 8009654:	4934      	ldr	r1, [pc, #208]	; (8009728 <pbuf_copy+0x198>)
 8009656:	4832      	ldr	r0, [pc, #200]	; (8009720 <pbuf_copy+0x190>)
 8009658:	f008 faea 	bl	8011c30 <iprintf>
    if (offset_from >= p_from->len) {
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	895b      	ldrh	r3, [r3, #10]
 8009660:	461a      	mov	r2, r3
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	4293      	cmp	r3, r2
 8009666:	d304      	bcc.n	8009672 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	895b      	ldrh	r3, [r3, #10]
 8009676:	461a      	mov	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	4293      	cmp	r3, r2
 800967c:	d114      	bne.n	80096a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10c      	bne.n	80096a8 <pbuf_copy+0x118>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <pbuf_copy+0x118>
 8009694:	4b20      	ldr	r3, [pc, #128]	; (8009718 <pbuf_copy+0x188>)
 8009696:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800969a:	4924      	ldr	r1, [pc, #144]	; (800972c <pbuf_copy+0x19c>)
 800969c:	4820      	ldr	r0, [pc, #128]	; (8009720 <pbuf_copy+0x190>)
 800969e:	f008 fac7 	bl	8011c30 <iprintf>
 80096a2:	f06f 030f 	mvn.w	r3, #15
 80096a6:	e032      	b.n	800970e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d013      	beq.n	80096d6 <pbuf_copy+0x146>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	895a      	ldrh	r2, [r3, #10]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	891b      	ldrh	r3, [r3, #8]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d10d      	bne.n	80096d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d009      	beq.n	80096d6 <pbuf_copy+0x146>
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <pbuf_copy+0x188>)
 80096c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80096c8:	4919      	ldr	r1, [pc, #100]	; (8009730 <pbuf_copy+0x1a0>)
 80096ca:	4815      	ldr	r0, [pc, #84]	; (8009720 <pbuf_copy+0x190>)
 80096cc:	f008 fab0 	bl	8011c30 <iprintf>
 80096d0:	f06f 0305 	mvn.w	r3, #5
 80096d4:	e01b      	b.n	800970e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d013      	beq.n	8009704 <pbuf_copy+0x174>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	895a      	ldrh	r2, [r3, #10]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	891b      	ldrh	r3, [r3, #8]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d10d      	bne.n	8009704 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d009      	beq.n	8009704 <pbuf_copy+0x174>
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <pbuf_copy+0x188>)
 80096f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80096f6:	490e      	ldr	r1, [pc, #56]	; (8009730 <pbuf_copy+0x1a0>)
 80096f8:	4809      	ldr	r0, [pc, #36]	; (8009720 <pbuf_copy+0x190>)
 80096fa:	f008 fa99 	bl	8011c30 <iprintf>
 80096fe:	f06f 0305 	mvn.w	r3, #5
 8009702:	e004      	b.n	800970e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	f47f af61 	bne.w	80095ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	080131bc 	.word	0x080131bc
 800971c:	08013464 	.word	0x08013464
 8009720:	0801321c 	.word	0x0801321c
 8009724:	08013494 	.word	0x08013494
 8009728:	080134ac 	.word	0x080134ac
 800972c:	080134c8 	.word	0x080134c8
 8009730:	080134d8 	.word	0x080134d8

08009734 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4611      	mov	r1, r2
 8009740:	461a      	mov	r2, r3
 8009742:	460b      	mov	r3, r1
 8009744:	80fb      	strh	r3, [r7, #6]
 8009746:	4613      	mov	r3, r2
 8009748:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <pbuf_copy_partial+0x36>
 8009758:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <pbuf_copy_partial+0xd4>)
 800975a:	f240 420a 	movw	r2, #1034	; 0x40a
 800975e:	492b      	ldr	r1, [pc, #172]	; (800980c <pbuf_copy_partial+0xd8>)
 8009760:	482b      	ldr	r0, [pc, #172]	; (8009810 <pbuf_copy_partial+0xdc>)
 8009762:	f008 fa65 	bl	8011c30 <iprintf>
 8009766:	2300      	movs	r3, #0
 8009768:	e04a      	b.n	8009800 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d108      	bne.n	8009782 <pbuf_copy_partial+0x4e>
 8009770:	4b25      	ldr	r3, [pc, #148]	; (8009808 <pbuf_copy_partial+0xd4>)
 8009772:	f240 420b 	movw	r2, #1035	; 0x40b
 8009776:	4927      	ldr	r1, [pc, #156]	; (8009814 <pbuf_copy_partial+0xe0>)
 8009778:	4825      	ldr	r0, [pc, #148]	; (8009810 <pbuf_copy_partial+0xdc>)
 800977a:	f008 fa59 	bl	8011c30 <iprintf>
 800977e:	2300      	movs	r3, #0
 8009780:	e03e      	b.n	8009800 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	e034      	b.n	80097f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009788:	88bb      	ldrh	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <pbuf_copy_partial+0x70>
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	895b      	ldrh	r3, [r3, #10]
 8009792:	88ba      	ldrh	r2, [r7, #4]
 8009794:	429a      	cmp	r2, r3
 8009796:	d305      	bcc.n	80097a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	895b      	ldrh	r3, [r3, #10]
 800979c:	88ba      	ldrh	r2, [r7, #4]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	80bb      	strh	r3, [r7, #4]
 80097a2:	e023      	b.n	80097ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	895a      	ldrh	r2, [r3, #10]
 80097a8:	88bb      	ldrh	r3, [r7, #4]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80097ae:	8b3a      	ldrh	r2, [r7, #24]
 80097b0:	88fb      	ldrh	r3, [r7, #6]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d901      	bls.n	80097ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80097ba:	8b7b      	ldrh	r3, [r7, #26]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	18d0      	adds	r0, r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	88bb      	ldrh	r3, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	8b3a      	ldrh	r2, [r7, #24]
 80097ca:	4619      	mov	r1, r3
 80097cc:	f008 f9bf 	bl	8011b4e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80097d0:	8afa      	ldrh	r2, [r7, #22]
 80097d2:	8b3b      	ldrh	r3, [r7, #24]
 80097d4:	4413      	add	r3, r2
 80097d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80097d8:	8b7a      	ldrh	r2, [r7, #26]
 80097da:	8b3b      	ldrh	r3, [r7, #24]
 80097dc:	4413      	add	r3, r2
 80097de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	8b3b      	ldrh	r3, [r7, #24]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <pbuf_copy_partial+0xca>
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1c4      	bne.n	8009788 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80097fe:	8afb      	ldrh	r3, [r7, #22]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3720      	adds	r7, #32
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	080131bc 	.word	0x080131bc
 800980c:	08013504 	.word	0x08013504
 8009810:	0801321c 	.word	0x0801321c
 8009814:	08013524 	.word	0x08013524

08009818 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	603a      	str	r2, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
 8009824:	460b      	mov	r3, r1
 8009826:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	8919      	ldrh	r1, [r3, #8]
 800982c:	88ba      	ldrh	r2, [r7, #4]
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff faa5 	bl	8008d80 <pbuf_alloc>
 8009836:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <pbuf_clone+0x2a>
    return NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	e011      	b.n	8009866 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff fea3 	bl	8009590 <pbuf_copy>
 800984a:	4603      	mov	r3, r0
 800984c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800984e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d006      	beq.n	8009864 <pbuf_clone+0x4c>
 8009856:	4b06      	ldr	r3, [pc, #24]	; (8009870 <pbuf_clone+0x58>)
 8009858:	f240 5224 	movw	r2, #1316	; 0x524
 800985c:	4905      	ldr	r1, [pc, #20]	; (8009874 <pbuf_clone+0x5c>)
 800985e:	4806      	ldr	r0, [pc, #24]	; (8009878 <pbuf_clone+0x60>)
 8009860:	f008 f9e6 	bl	8011c30 <iprintf>
  return q;
 8009864:	68fb      	ldr	r3, [r7, #12]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	080131bc 	.word	0x080131bc
 8009874:	08013630 	.word	0x08013630
 8009878:	0801321c 	.word	0x0801321c

0800987c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009880:	f008 f9ee 	bl	8011c60 <rand>
 8009884:	4603      	mov	r3, r0
 8009886:	b29b      	uxth	r3, r3
 8009888:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800988c:	b29b      	uxth	r3, r3
 800988e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009892:	b29a      	uxth	r2, r3
 8009894:	4b01      	ldr	r3, [pc, #4]	; (800989c <tcp_init+0x20>)
 8009896:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009898:	bf00      	nop
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20000010 	.word	0x20000010

080098a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7d1b      	ldrb	r3, [r3, #20]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d105      	bne.n	80098bc <tcp_free+0x1c>
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <tcp_free+0x2c>)
 80098b2:	22d4      	movs	r2, #212	; 0xd4
 80098b4:	4906      	ldr	r1, [pc, #24]	; (80098d0 <tcp_free+0x30>)
 80098b6:	4807      	ldr	r0, [pc, #28]	; (80098d4 <tcp_free+0x34>)
 80098b8:	f008 f9ba 	bl	8011c30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	2001      	movs	r0, #1
 80098c0:	f7fe fe9e 	bl	8008600 <memp_free>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	080136bc 	.word	0x080136bc
 80098d0:	080136ec 	.word	0x080136ec
 80098d4:	08013700 	.word	0x08013700

080098d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7d1b      	ldrb	r3, [r3, #20]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d105      	bne.n	80098f4 <tcp_free_listen+0x1c>
 80098e8:	4b06      	ldr	r3, [pc, #24]	; (8009904 <tcp_free_listen+0x2c>)
 80098ea:	22df      	movs	r2, #223	; 0xdf
 80098ec:	4906      	ldr	r1, [pc, #24]	; (8009908 <tcp_free_listen+0x30>)
 80098ee:	4807      	ldr	r0, [pc, #28]	; (800990c <tcp_free_listen+0x34>)
 80098f0:	f008 f99e 	bl	8011c30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	2002      	movs	r0, #2
 80098f8:	f7fe fe82 	bl	8008600 <memp_free>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	080136bc 	.word	0x080136bc
 8009908:	08013728 	.word	0x08013728
 800990c:	08013700 	.word	0x08013700

08009910 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009914:	f000 fea2 	bl	800a65c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009918:	4b07      	ldr	r3, [pc, #28]	; (8009938 <tcp_tmr+0x28>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	3301      	adds	r3, #1
 800991e:	b2da      	uxtb	r2, r3
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <tcp_tmr+0x28>)
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <tcp_tmr+0x28>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009930:	f000 fb54 	bl	8009fdc <tcp_slowtmr>
  }
}
 8009934:	bf00      	nop
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20004ac1 	.word	0x20004ac1

0800993c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d105      	bne.n	8009958 <tcp_remove_listener+0x1c>
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <tcp_remove_listener+0x48>)
 800994e:	22ff      	movs	r2, #255	; 0xff
 8009950:	490d      	ldr	r1, [pc, #52]	; (8009988 <tcp_remove_listener+0x4c>)
 8009952:	480e      	ldr	r0, [pc, #56]	; (800998c <tcp_remove_listener+0x50>)
 8009954:	f008 f96c 	bl	8011c30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e00a      	b.n	8009974 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d102      	bne.n	800996e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1f1      	bne.n	800995e <tcp_remove_listener+0x22>
    }
  }
}
 800997a:	bf00      	nop
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	080136bc 	.word	0x080136bc
 8009988:	08013744 	.word	0x08013744
 800998c:	08013700 	.word	0x08013700

08009990 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <tcp_listen_closed+0x1c>
 800999e:	4b14      	ldr	r3, [pc, #80]	; (80099f0 <tcp_listen_closed+0x60>)
 80099a0:	f240 1211 	movw	r2, #273	; 0x111
 80099a4:	4913      	ldr	r1, [pc, #76]	; (80099f4 <tcp_listen_closed+0x64>)
 80099a6:	4814      	ldr	r0, [pc, #80]	; (80099f8 <tcp_listen_closed+0x68>)
 80099a8:	f008 f942 	bl	8011c30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7d1b      	ldrb	r3, [r3, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d006      	beq.n	80099c2 <tcp_listen_closed+0x32>
 80099b4:	4b0e      	ldr	r3, [pc, #56]	; (80099f0 <tcp_listen_closed+0x60>)
 80099b6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80099ba:	4910      	ldr	r1, [pc, #64]	; (80099fc <tcp_listen_closed+0x6c>)
 80099bc:	480e      	ldr	r0, [pc, #56]	; (80099f8 <tcp_listen_closed+0x68>)
 80099be:	f008 f937 	bl	8011c30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80099c2:	2301      	movs	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	e00b      	b.n	80099e0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80099c8:	4a0d      	ldr	r2, [pc, #52]	; (8009a00 <tcp_listen_closed+0x70>)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ffb1 	bl	800993c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d9f0      	bls.n	80099c8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	080136bc 	.word	0x080136bc
 80099f4:	0801376c 	.word	0x0801376c
 80099f8:	08013700 	.word	0x08013700
 80099fc:	08013778 	.word	0x08013778
 8009a00:	080156ec 	.word	0x080156ec

08009a04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009a04:	b5b0      	push	{r4, r5, r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af04      	add	r7, sp, #16
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <tcp_close_shutdown+0x20>
 8009a16:	4b63      	ldr	r3, [pc, #396]	; (8009ba4 <tcp_close_shutdown+0x1a0>)
 8009a18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009a1c:	4962      	ldr	r1, [pc, #392]	; (8009ba8 <tcp_close_shutdown+0x1a4>)
 8009a1e:	4863      	ldr	r0, [pc, #396]	; (8009bac <tcp_close_shutdown+0x1a8>)
 8009a20:	f008 f906 	bl	8011c30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d066      	beq.n	8009af8 <tcp_close_shutdown+0xf4>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7d1b      	ldrb	r3, [r3, #20]
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d003      	beq.n	8009a3a <tcp_close_shutdown+0x36>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7d1b      	ldrb	r3, [r3, #20]
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	d15e      	bne.n	8009af8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d104      	bne.n	8009a4c <tcp_close_shutdown+0x48>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a4a:	d055      	beq.n	8009af8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8b5b      	ldrh	r3, [r3, #26]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <tcp_close_shutdown+0x62>
 8009a58:	4b52      	ldr	r3, [pc, #328]	; (8009ba4 <tcp_close_shutdown+0x1a0>)
 8009a5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009a5e:	4954      	ldr	r1, [pc, #336]	; (8009bb0 <tcp_close_shutdown+0x1ac>)
 8009a60:	4852      	ldr	r0, [pc, #328]	; (8009bac <tcp_close_shutdown+0x1a8>)
 8009a62:	f008 f8e5 	bl	8011c30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009a6e:	687d      	ldr	r5, [r7, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	8ad2      	ldrh	r2, [r2, #22]
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	8b09      	ldrh	r1, [r1, #24]
 8009a7c:	9102      	str	r1, [sp, #8]
 8009a7e:	9201      	str	r2, [sp, #4]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	462b      	mov	r3, r5
 8009a84:	4622      	mov	r2, r4
 8009a86:	4601      	mov	r1, r0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f004 fe8d 	bl	800e7a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 f8c6 	bl	800ac20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009a94:	4b47      	ldr	r3, [pc, #284]	; (8009bb4 <tcp_close_shutdown+0x1b0>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d105      	bne.n	8009aaa <tcp_close_shutdown+0xa6>
 8009a9e:	4b45      	ldr	r3, [pc, #276]	; (8009bb4 <tcp_close_shutdown+0x1b0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	4a43      	ldr	r2, [pc, #268]	; (8009bb4 <tcp_close_shutdown+0x1b0>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	e013      	b.n	8009ad2 <tcp_close_shutdown+0xce>
 8009aaa:	4b42      	ldr	r3, [pc, #264]	; (8009bb4 <tcp_close_shutdown+0x1b0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e00c      	b.n	8009acc <tcp_close_shutdown+0xc8>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d104      	bne.n	8009ac6 <tcp_close_shutdown+0xc2>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	60da      	str	r2, [r3, #12]
 8009ac4:	e005      	b.n	8009ad2 <tcp_close_shutdown+0xce>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1ef      	bne.n	8009ab2 <tcp_close_shutdown+0xae>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	60da      	str	r2, [r3, #12]
 8009ad8:	4b37      	ldr	r3, [pc, #220]	; (8009bb8 <tcp_close_shutdown+0x1b4>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009ade:	4b37      	ldr	r3, [pc, #220]	; (8009bbc <tcp_close_shutdown+0x1b8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d102      	bne.n	8009aee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009ae8:	f003 fd5a 	bl	800d5a0 <tcp_trigger_input_pcb_close>
 8009aec:	e002      	b.n	8009af4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fed6 	bl	80098a0 <tcp_free>
      }
      return ERR_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	e050      	b.n	8009b9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7d1b      	ldrb	r3, [r3, #20]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d03b      	beq.n	8009b78 <tcp_close_shutdown+0x174>
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	dc44      	bgt.n	8009b8e <tcp_close_shutdown+0x18a>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <tcp_close_shutdown+0x10a>
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d02a      	beq.n	8009b62 <tcp_close_shutdown+0x15e>
 8009b0c:	e03f      	b.n	8009b8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8adb      	ldrh	r3, [r3, #22]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d021      	beq.n	8009b5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b16:	4b2a      	ldr	r3, [pc, #168]	; (8009bc0 <tcp_close_shutdown+0x1bc>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d105      	bne.n	8009b2c <tcp_close_shutdown+0x128>
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <tcp_close_shutdown+0x1bc>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	4a26      	ldr	r2, [pc, #152]	; (8009bc0 <tcp_close_shutdown+0x1bc>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e013      	b.n	8009b54 <tcp_close_shutdown+0x150>
 8009b2c:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <tcp_close_shutdown+0x1bc>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	e00c      	b.n	8009b4e <tcp_close_shutdown+0x14a>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d104      	bne.n	8009b48 <tcp_close_shutdown+0x144>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	e005      	b.n	8009b54 <tcp_close_shutdown+0x150>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ef      	bne.n	8009b34 <tcp_close_shutdown+0x130>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fea0 	bl	80098a0 <tcp_free>
      break;
 8009b60:	e01a      	b.n	8009b98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ff14 	bl	8009990 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4816      	ldr	r0, [pc, #88]	; (8009bc4 <tcp_close_shutdown+0x1c0>)
 8009b6c:	f001 f8a8 	bl	800acc0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff feb1 	bl	80098d8 <tcp_free_listen>
      break;
 8009b76:	e00f      	b.n	8009b98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	480e      	ldr	r0, [pc, #56]	; (8009bb4 <tcp_close_shutdown+0x1b0>)
 8009b7c:	f001 f8a0 	bl	800acc0 <tcp_pcb_remove>
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <tcp_close_shutdown+0x1b4>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fe8a 	bl	80098a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009b8c:	e004      	b.n	8009b98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f81a 	bl	8009bc8 <tcp_close_shutdown_fin>
 8009b94:	4603      	mov	r3, r0
 8009b96:	e000      	b.n	8009b9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	080136bc 	.word	0x080136bc
 8009ba8:	08013790 	.word	0x08013790
 8009bac:	08013700 	.word	0x08013700
 8009bb0:	080137b0 	.word	0x080137b0
 8009bb4:	2000b4c8 	.word	0x2000b4c8
 8009bb8:	2000b4c4 	.word	0x2000b4c4
 8009bbc:	2000b4dc 	.word	0x2000b4dc
 8009bc0:	2000b4d4 	.word	0x2000b4d4
 8009bc4:	2000b4d0 	.word	0x2000b4d0

08009bc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <tcp_close_shutdown_fin+0x1c>
 8009bd6:	4b2e      	ldr	r3, [pc, #184]	; (8009c90 <tcp_close_shutdown_fin+0xc8>)
 8009bd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009bdc:	492d      	ldr	r1, [pc, #180]	; (8009c94 <tcp_close_shutdown_fin+0xcc>)
 8009bde:	482e      	ldr	r0, [pc, #184]	; (8009c98 <tcp_close_shutdown_fin+0xd0>)
 8009be0:	f008 f826 	bl	8011c30 <iprintf>

  switch (pcb->state) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	7d1b      	ldrb	r3, [r3, #20]
 8009be8:	2b07      	cmp	r3, #7
 8009bea:	d020      	beq.n	8009c2e <tcp_close_shutdown_fin+0x66>
 8009bec:	2b07      	cmp	r3, #7
 8009bee:	dc2b      	bgt.n	8009c48 <tcp_close_shutdown_fin+0x80>
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d002      	beq.n	8009bfa <tcp_close_shutdown_fin+0x32>
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d00d      	beq.n	8009c14 <tcp_close_shutdown_fin+0x4c>
 8009bf8:	e026      	b.n	8009c48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f003 fee2 	bl	800d9c4 <tcp_send_fin>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11f      	bne.n	8009c4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2205      	movs	r2, #5
 8009c10:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c12:	e01b      	b.n	8009c4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f003 fed5 	bl	800d9c4 <tcp_send_fin>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d114      	bne.n	8009c50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2205      	movs	r2, #5
 8009c2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c2c:	e010      	b.n	8009c50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f003 fec8 	bl	800d9c4 <tcp_send_fin>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2209      	movs	r2, #9
 8009c44:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c46:	e005      	b.n	8009c54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e01c      	b.n	8009c86 <tcp_close_shutdown_fin+0xbe>
      break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <tcp_close_shutdown_fin+0x8e>
      break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <tcp_close_shutdown_fin+0x8e>
      break;
 8009c54:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d103      	bne.n	8009c66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f003 ffee 	bl	800dc40 <tcp_output>
 8009c64:	e00d      	b.n	8009c82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6e:	d108      	bne.n	8009c82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8b5b      	ldrh	r3, [r3, #26]
 8009c74:	f043 0308 	orr.w	r3, r3, #8
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e001      	b.n	8009c86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	080136bc 	.word	0x080136bc
 8009c94:	0801376c 	.word	0x0801376c
 8009c98:	08013700 	.word	0x08013700

08009c9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <tcp_close+0x22>
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <tcp_close+0x4c>)
 8009cac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009cb0:	490e      	ldr	r1, [pc, #56]	; (8009cec <tcp_close+0x50>)
 8009cb2:	480f      	ldr	r0, [pc, #60]	; (8009cf0 <tcp_close+0x54>)
 8009cb4:	f007 ffbc 	bl	8011c30 <iprintf>
 8009cb8:	f06f 030f 	mvn.w	r3, #15
 8009cbc:	e00f      	b.n	8009cde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7d1b      	ldrb	r3, [r3, #20]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d006      	beq.n	8009cd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8b5b      	ldrh	r3, [r3, #26]
 8009cca:	f043 0310 	orr.w	r3, r3, #16
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fe94 	bl	8009a04 <tcp_close_shutdown>
 8009cdc:	4603      	mov	r3, r0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	080136bc 	.word	0x080136bc
 8009cec:	080137cc 	.word	0x080137cc
 8009cf0:	08013700 	.word	0x08013700

08009cf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08e      	sub	sp, #56	; 0x38
 8009cf8:	af04      	add	r7, sp, #16
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d107      	bne.n	8009d14 <tcp_abandon+0x20>
 8009d04:	4b52      	ldr	r3, [pc, #328]	; (8009e50 <tcp_abandon+0x15c>)
 8009d06:	f240 223d 	movw	r2, #573	; 0x23d
 8009d0a:	4952      	ldr	r1, [pc, #328]	; (8009e54 <tcp_abandon+0x160>)
 8009d0c:	4852      	ldr	r0, [pc, #328]	; (8009e58 <tcp_abandon+0x164>)
 8009d0e:	f007 ff8f 	bl	8011c30 <iprintf>
 8009d12:	e099      	b.n	8009e48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7d1b      	ldrb	r3, [r3, #20]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d106      	bne.n	8009d2a <tcp_abandon+0x36>
 8009d1c:	4b4c      	ldr	r3, [pc, #304]	; (8009e50 <tcp_abandon+0x15c>)
 8009d1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d22:	494e      	ldr	r1, [pc, #312]	; (8009e5c <tcp_abandon+0x168>)
 8009d24:	484c      	ldr	r0, [pc, #304]	; (8009e58 <tcp_abandon+0x164>)
 8009d26:	f007 ff83 	bl	8011c30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	7d1b      	ldrb	r3, [r3, #20]
 8009d2e:	2b0a      	cmp	r3, #10
 8009d30:	d107      	bne.n	8009d42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	484a      	ldr	r0, [pc, #296]	; (8009e60 <tcp_abandon+0x16c>)
 8009d36:	f000 ffc3 	bl	800acc0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fdb0 	bl	80098a0 <tcp_free>
 8009d40:	e082      	b.n	8009e48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	7d1b      	ldrb	r3, [r3, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d126      	bne.n	8009dba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8adb      	ldrh	r3, [r3, #22]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02e      	beq.n	8009dd2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d74:	4b3b      	ldr	r3, [pc, #236]	; (8009e64 <tcp_abandon+0x170>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d105      	bne.n	8009d8a <tcp_abandon+0x96>
 8009d7e:	4b39      	ldr	r3, [pc, #228]	; (8009e64 <tcp_abandon+0x170>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	4a37      	ldr	r2, [pc, #220]	; (8009e64 <tcp_abandon+0x170>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	e013      	b.n	8009db2 <tcp_abandon+0xbe>
 8009d8a:	4b36      	ldr	r3, [pc, #216]	; (8009e64 <tcp_abandon+0x170>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e00c      	b.n	8009dac <tcp_abandon+0xb8>
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d104      	bne.n	8009da6 <tcp_abandon+0xb2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	e005      	b.n	8009db2 <tcp_abandon+0xbe>
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	61fb      	str	r3, [r7, #28]
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1ef      	bne.n	8009d92 <tcp_abandon+0x9e>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	60da      	str	r2, [r3, #12]
 8009db8:	e00b      	b.n	8009dd2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8adb      	ldrh	r3, [r3, #22]
 8009dc2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	4828      	ldr	r0, [pc, #160]	; (8009e68 <tcp_abandon+0x174>)
 8009dc8:	f000 ff7a 	bl	800acc0 <tcp_pcb_remove>
 8009dcc:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <tcp_abandon+0x178>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d004      	beq.n	8009de4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fd1c 	bl	800a81c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 fd13 	bl	800a81c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fd0a 	bl	800a81c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00e      	beq.n	8009e2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3304      	adds	r3, #4
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	8b12      	ldrh	r2, [r2, #24]
 8009e18:	9202      	str	r2, [sp, #8]
 8009e1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e1c:	9201      	str	r2, [sp, #4]
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	460b      	mov	r3, r1
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	69b9      	ldr	r1, [r7, #24]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f004 fcbe 	bl	800e7a8 <tcp_rst>
    }
    last_state = pcb->state;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7d1b      	ldrb	r3, [r3, #20]
 8009e30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fd34 	bl	80098a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <tcp_abandon+0x154>
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f06f 010c 	mvn.w	r1, #12
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	4798      	blx	r3
  }
}
 8009e48:	3728      	adds	r7, #40	; 0x28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	080136bc 	.word	0x080136bc
 8009e54:	08013800 	.word	0x08013800
 8009e58:	08013700 	.word	0x08013700
 8009e5c:	0801381c 	.word	0x0801381c
 8009e60:	2000b4d8 	.word	0x2000b4d8
 8009e64:	2000b4d4 	.word	0x2000b4d4
 8009e68:	2000b4c8 	.word	0x2000b4c8
 8009e6c:	2000b4c4 	.word	0x2000b4c4

08009e70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009e78:	2101      	movs	r1, #1
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff3a 	bl	8009cf4 <tcp_abandon>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <tcp_update_rcv_ann_wnd+0x1c>
 8009e96:	4b25      	ldr	r3, [pc, #148]	; (8009f2c <tcp_update_rcv_ann_wnd+0xa4>)
 8009e98:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009e9c:	4924      	ldr	r1, [pc, #144]	; (8009f30 <tcp_update_rcv_ann_wnd+0xa8>)
 8009e9e:	4825      	ldr	r0, [pc, #148]	; (8009f34 <tcp_update_rcv_ann_wnd+0xac>)
 8009ea0:	f007 fec6 	bl	8011c30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009eac:	4413      	add	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009eb8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009ebc:	bf28      	it	cs
 8009ebe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009ec2:	b292      	uxth	r2, r2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	db08      	blt.n	8009ee0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	e020      	b.n	8009f22 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd03      	ble.n	8009ef6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ef4:	e014      	b.n	8009f20 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f08:	d306      	bcc.n	8009f18 <tcp_update_rcv_ann_wnd+0x90>
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <tcp_update_rcv_ann_wnd+0xa4>)
 8009f0c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f10:	4909      	ldr	r1, [pc, #36]	; (8009f38 <tcp_update_rcv_ann_wnd+0xb0>)
 8009f12:	4808      	ldr	r0, [pc, #32]	; (8009f34 <tcp_update_rcv_ann_wnd+0xac>)
 8009f14:	f007 fe8c 	bl	8011c30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f20:	2300      	movs	r3, #0
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	080136bc 	.word	0x080136bc
 8009f30:	08013918 	.word	0x08013918
 8009f34:	08013700 	.word	0x08013700
 8009f38:	0801393c 	.word	0x0801393c

08009f3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d107      	bne.n	8009f5e <tcp_recved+0x22>
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	; (8009fcc <tcp_recved+0x90>)
 8009f50:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009f54:	491e      	ldr	r1, [pc, #120]	; (8009fd0 <tcp_recved+0x94>)
 8009f56:	481f      	ldr	r0, [pc, #124]	; (8009fd4 <tcp_recved+0x98>)
 8009f58:	f007 fe6a 	bl	8011c30 <iprintf>
 8009f5c:	e032      	b.n	8009fc4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7d1b      	ldrb	r3, [r3, #20]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d106      	bne.n	8009f74 <tcp_recved+0x38>
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <tcp_recved+0x90>)
 8009f68:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009f6c:	491a      	ldr	r1, [pc, #104]	; (8009fd8 <tcp_recved+0x9c>)
 8009f6e:	4819      	ldr	r0, [pc, #100]	; (8009fd4 <tcp_recved+0x98>)
 8009f70:	f007 fe5e 	bl	8011c30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009f7e:	89fb      	ldrh	r3, [r7, #14]
 8009f80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009f84:	d804      	bhi.n	8009f90 <tcp_recved+0x54>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f8a:	89fa      	ldrh	r2, [r7, #14]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d204      	bcs.n	8009f9a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009f96:	851a      	strh	r2, [r3, #40]	; 0x28
 8009f98:	e002      	b.n	8009fa0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	89fa      	ldrh	r2, [r7, #14]
 8009f9e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ff71 	bl	8009e88 <tcp_update_rcv_ann_wnd>
 8009fa6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009fae:	d309      	bcc.n	8009fc4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8b5b      	ldrh	r3, [r3, #26]
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f003 fe3e 	bl	800dc40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	080136bc 	.word	0x080136bc
 8009fd0:	08013958 	.word	0x08013958
 8009fd4:	08013700 	.word	0x08013700
 8009fd8:	08013970 	.word	0x08013970

08009fdc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009fdc:	b5b0      	push	{r4, r5, r7, lr}
 8009fde:	b090      	sub	sp, #64	; 0x40
 8009fe0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009fe8:	4b94      	ldr	r3, [pc, #592]	; (800a23c <tcp_slowtmr+0x260>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3301      	adds	r3, #1
 8009fee:	4a93      	ldr	r2, [pc, #588]	; (800a23c <tcp_slowtmr+0x260>)
 8009ff0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009ff2:	4b93      	ldr	r3, [pc, #588]	; (800a240 <tcp_slowtmr+0x264>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	4b91      	ldr	r3, [pc, #580]	; (800a240 <tcp_slowtmr+0x264>)
 8009ffc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a002:	4b90      	ldr	r3, [pc, #576]	; (800a244 <tcp_slowtmr+0x268>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a008:	e29d      	b.n	800a546 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	7d1b      	ldrb	r3, [r3, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <tcp_slowtmr+0x44>
 800a012:	4b8d      	ldr	r3, [pc, #564]	; (800a248 <tcp_slowtmr+0x26c>)
 800a014:	f240 42be 	movw	r2, #1214	; 0x4be
 800a018:	498c      	ldr	r1, [pc, #560]	; (800a24c <tcp_slowtmr+0x270>)
 800a01a:	488d      	ldr	r0, [pc, #564]	; (800a250 <tcp_slowtmr+0x274>)
 800a01c:	f007 fe08 	bl	8011c30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d106      	bne.n	800a036 <tcp_slowtmr+0x5a>
 800a028:	4b87      	ldr	r3, [pc, #540]	; (800a248 <tcp_slowtmr+0x26c>)
 800a02a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a02e:	4989      	ldr	r1, [pc, #548]	; (800a254 <tcp_slowtmr+0x278>)
 800a030:	4887      	ldr	r0, [pc, #540]	; (800a250 <tcp_slowtmr+0x274>)
 800a032:	f007 fdfd 	bl	8011c30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	7d1b      	ldrb	r3, [r3, #20]
 800a03a:	2b0a      	cmp	r3, #10
 800a03c:	d106      	bne.n	800a04c <tcp_slowtmr+0x70>
 800a03e:	4b82      	ldr	r3, [pc, #520]	; (800a248 <tcp_slowtmr+0x26c>)
 800a040:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a044:	4984      	ldr	r1, [pc, #528]	; (800a258 <tcp_slowtmr+0x27c>)
 800a046:	4882      	ldr	r0, [pc, #520]	; (800a250 <tcp_slowtmr+0x274>)
 800a048:	f007 fdf2 	bl	8011c30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	7f9a      	ldrb	r2, [r3, #30]
 800a050:	4b7b      	ldr	r3, [pc, #492]	; (800a240 <tcp_slowtmr+0x264>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d105      	bne.n	800a064 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a062:	e270      	b.n	800a546 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a064:	4b76      	ldr	r3, [pc, #472]	; (800a240 <tcp_slowtmr+0x264>)
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	7d1b      	ldrb	r3, [r3, #20]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d10a      	bne.n	800a096 <tcp_slowtmr+0xba>
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a086:	2b05      	cmp	r3, #5
 800a088:	d905      	bls.n	800a096 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a08e:	3301      	adds	r3, #1
 800a090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a094:	e11e      	b.n	800a2d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a09c:	2b0b      	cmp	r3, #11
 800a09e:	d905      	bls.n	800a0ac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0aa:	e113      	b.n	800a2d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d075      	beq.n	800a1a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <tcp_slowtmr+0xf0>
 800a0be:	4b62      	ldr	r3, [pc, #392]	; (800a248 <tcp_slowtmr+0x26c>)
 800a0c0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a0c4:	4965      	ldr	r1, [pc, #404]	; (800a25c <tcp_slowtmr+0x280>)
 800a0c6:	4862      	ldr	r0, [pc, #392]	; (800a250 <tcp_slowtmr+0x274>)
 800a0c8:	f007 fdb2 	bl	8011c30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <tcp_slowtmr+0x106>
 800a0d4:	4b5c      	ldr	r3, [pc, #368]	; (800a248 <tcp_slowtmr+0x26c>)
 800a0d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a0da:	4961      	ldr	r1, [pc, #388]	; (800a260 <tcp_slowtmr+0x284>)
 800a0dc:	485c      	ldr	r0, [pc, #368]	; (800a250 <tcp_slowtmr+0x274>)
 800a0de:	f007 fda7 	bl	8011c30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a0e8:	2b0b      	cmp	r3, #11
 800a0ea:	d905      	bls.n	800a0f8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0f6:	e0ed      	b.n	800a2d4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0fe:	3b01      	subs	r3, #1
 800a100:	4a58      	ldr	r2, [pc, #352]	; (800a264 <tcp_slowtmr+0x288>)
 800a102:	5cd3      	ldrb	r3, [r2, r3]
 800a104:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a10c:	7c7a      	ldrb	r2, [r7, #17]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d907      	bls.n	800a122 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a118:	3301      	adds	r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a128:	7c7a      	ldrb	r2, [r7, #17]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f200 80d2 	bhi.w	800a2d4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a130:	2301      	movs	r3, #1
 800a132:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d108      	bne.n	800a150 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a140:	f004 fc26 	bl	800e990 <tcp_zero_window_probe>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d014      	beq.n	800a174 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a14a:	2300      	movs	r3, #0
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	e011      	b.n	800a174 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a156:	4619      	mov	r1, r3
 800a158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a15a:	f003 faeb 	bl	800d734 <tcp_split_unsent_seg>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a166:	f003 fd6b 	bl	800dc40 <tcp_output>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80ac 	beq.w	800a2d4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	f200 80a2 	bhi.w	800a2d4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a196:	3301      	adds	r3, #1
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a1a0:	e098      	b.n	800a2d4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	db0f      	blt.n	800a1cc <tcp_slowtmr+0x1f0>
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d008      	beq.n	800a1cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	b21a      	sxth	r2, r3
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	db7b      	blt.n	800a2d4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a1dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1de:	f004 f821 	bl	800e224 <tcp_rexmit_rto_prepare>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <tcp_slowtmr+0x21c>
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d171      	bne.n	800a2d4 <tcp_slowtmr+0x2f8>
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d06d      	beq.n	800a2d4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	7d1b      	ldrb	r3, [r3, #20]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d03a      	beq.n	800a276 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a206:	2b0c      	cmp	r3, #12
 800a208:	bf28      	it	cs
 800a20a:	230c      	movcs	r3, #12
 800a20c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a214:	10db      	asrs	r3, r3, #3
 800a216:	b21b      	sxth	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a220:	4413      	add	r3, r2
 800a222:	7efa      	ldrb	r2, [r7, #27]
 800a224:	4910      	ldr	r1, [pc, #64]	; (800a268 <tcp_slowtmr+0x28c>)
 800a226:	5c8a      	ldrb	r2, [r1, r2]
 800a228:	4093      	lsls	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a232:	4293      	cmp	r3, r2
 800a234:	dc1a      	bgt.n	800a26c <tcp_slowtmr+0x290>
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	b21a      	sxth	r2, r3
 800a23a:	e019      	b.n	800a270 <tcp_slowtmr+0x294>
 800a23c:	2000b4cc 	.word	0x2000b4cc
 800a240:	20004ac2 	.word	0x20004ac2
 800a244:	2000b4c8 	.word	0x2000b4c8
 800a248:	080136bc 	.word	0x080136bc
 800a24c:	08013a00 	.word	0x08013a00
 800a250:	08013700 	.word	0x08013700
 800a254:	08013a2c 	.word	0x08013a2c
 800a258:	08013a58 	.word	0x08013a58
 800a25c:	08013a88 	.word	0x08013a88
 800a260:	08013abc 	.word	0x08013abc
 800a264:	080156e4 	.word	0x080156e4
 800a268:	080156d4 	.word	0x080156d4
 800a26c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	2200      	movs	r2, #0
 800a27a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a288:	4293      	cmp	r3, r2
 800a28a:	bf28      	it	cs
 800a28c:	4613      	movcs	r3, r2
 800a28e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a290:	8a7b      	ldrh	r3, [r7, #18]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	b29a      	uxth	r2, r3
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d206      	bcs.n	800a2bc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2d0:	f004 f818 	bl	800e304 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	7d1b      	ldrb	r3, [r3, #20]
 800a2d8:	2b06      	cmp	r3, #6
 800a2da:	d111      	bne.n	800a300 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	8b5b      	ldrh	r3, [r3, #26]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2e8:	4b9c      	ldr	r3, [pc, #624]	; (800a55c <tcp_slowtmr+0x580>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b28      	cmp	r3, #40	; 0x28
 800a2f4:	d904      	bls.n	800a300 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a2f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	7a5b      	ldrb	r3, [r3, #9]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d04a      	beq.n	800a3a2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a310:	2b04      	cmp	r3, #4
 800a312:	d003      	beq.n	800a31c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a318:	2b07      	cmp	r3, #7
 800a31a:	d142      	bne.n	800a3a2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a31c:	4b8f      	ldr	r3, [pc, #572]	; (800a55c <tcp_slowtmr+0x580>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a32c:	4b8c      	ldr	r3, [pc, #560]	; (800a560 <tcp_slowtmr+0x584>)
 800a32e:	440b      	add	r3, r1
 800a330:	498c      	ldr	r1, [pc, #560]	; (800a564 <tcp_slowtmr+0x588>)
 800a332:	fba1 1303 	umull	r1, r3, r1, r3
 800a336:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a338:	429a      	cmp	r2, r3
 800a33a:	d90a      	bls.n	800a352 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a340:	3301      	adds	r3, #1
 800a342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a34a:	3301      	adds	r3, #1
 800a34c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a350:	e027      	b.n	800a3a2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a352:	4b82      	ldr	r3, [pc, #520]	; (800a55c <tcp_slowtmr+0x580>)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a368:	4618      	mov	r0, r3
 800a36a:	4b7f      	ldr	r3, [pc, #508]	; (800a568 <tcp_slowtmr+0x58c>)
 800a36c:	fb03 f300 	mul.w	r3, r3, r0
 800a370:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a372:	497c      	ldr	r1, [pc, #496]	; (800a564 <tcp_slowtmr+0x588>)
 800a374:	fba1 1303 	umull	r1, r3, r1, r3
 800a378:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d911      	bls.n	800a3a2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a37e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a380:	f004 fac6 	bl	800e910 <tcp_keepalive>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a38a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d107      	bne.n	800a3a2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a398:	3301      	adds	r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d011      	beq.n	800a3ce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a3aa:	4b6c      	ldr	r3, [pc, #432]	; (800a55c <tcp_slowtmr+0x580>)
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	1ad2      	subs	r2, r2, r3
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	460b      	mov	r3, r1
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	440b      	add	r3, r1
 800a3c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a3c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ca:	f000 fddd 	bl	800af88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	7d1b      	ldrb	r3, [r3, #20]
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d10b      	bne.n	800a3ee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3d6:	4b61      	ldr	r3, [pc, #388]	; (800a55c <tcp_slowtmr+0x580>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b28      	cmp	r3, #40	; 0x28
 800a3e2:	d904      	bls.n	800a3ee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	7d1b      	ldrb	r3, [r3, #20]
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	d10b      	bne.n	800a40e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a3f6:	4b59      	ldr	r3, [pc, #356]	; (800a55c <tcp_slowtmr+0x580>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2bf0      	cmp	r3, #240	; 0xf0
 800a402:	d904      	bls.n	800a40e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a408:	3301      	adds	r3, #1
 800a40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a412:	2b00      	cmp	r3, #0
 800a414:	d060      	beq.n	800a4d8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a420:	f000 fbfe 	bl	800ac20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	2b00      	cmp	r3, #0
 800a428:	d010      	beq.n	800a44c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a42a:	4b50      	ldr	r3, [pc, #320]	; (800a56c <tcp_slowtmr+0x590>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a430:	429a      	cmp	r2, r3
 800a432:	d106      	bne.n	800a442 <tcp_slowtmr+0x466>
 800a434:	4b4e      	ldr	r3, [pc, #312]	; (800a570 <tcp_slowtmr+0x594>)
 800a436:	f240 526d 	movw	r2, #1389	; 0x56d
 800a43a:	494e      	ldr	r1, [pc, #312]	; (800a574 <tcp_slowtmr+0x598>)
 800a43c:	484e      	ldr	r0, [pc, #312]	; (800a578 <tcp_slowtmr+0x59c>)
 800a43e:	f007 fbf7 	bl	8011c30 <iprintf>
        prev->next = pcb->next;
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e00f      	b.n	800a46c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a44c:	4b47      	ldr	r3, [pc, #284]	; (800a56c <tcp_slowtmr+0x590>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a452:	429a      	cmp	r2, r3
 800a454:	d006      	beq.n	800a464 <tcp_slowtmr+0x488>
 800a456:	4b46      	ldr	r3, [pc, #280]	; (800a570 <tcp_slowtmr+0x594>)
 800a458:	f240 5271 	movw	r2, #1393	; 0x571
 800a45c:	4947      	ldr	r1, [pc, #284]	; (800a57c <tcp_slowtmr+0x5a0>)
 800a45e:	4846      	ldr	r0, [pc, #280]	; (800a578 <tcp_slowtmr+0x59c>)
 800a460:	f007 fbe6 	bl	8011c30 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	4a40      	ldr	r2, [pc, #256]	; (800a56c <tcp_slowtmr+0x590>)
 800a46a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a46c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a470:	2b00      	cmp	r3, #0
 800a472:	d013      	beq.n	800a49c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a47c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	3304      	adds	r3, #4
 800a482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a484:	8ad2      	ldrh	r2, [r2, #22]
 800a486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a488:	8b09      	ldrh	r1, [r1, #24]
 800a48a:	9102      	str	r1, [sp, #8]
 800a48c:	9201      	str	r2, [sp, #4]
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	462b      	mov	r3, r5
 800a492:	4622      	mov	r2, r4
 800a494:	4601      	mov	r1, r0
 800a496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a498:	f004 f986 	bl	800e7a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	7d1b      	ldrb	r3, [r3, #20]
 800a4a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a4b2:	6838      	ldr	r0, [r7, #0]
 800a4b4:	f7ff f9f4 	bl	80098a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a4b8:	4b31      	ldr	r3, [pc, #196]	; (800a580 <tcp_slowtmr+0x5a4>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <tcp_slowtmr+0x4f2>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f06f 010c 	mvn.w	r1, #12
 800a4ca:	68b8      	ldr	r0, [r7, #8]
 800a4cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a4ce:	4b2c      	ldr	r3, [pc, #176]	; (800a580 <tcp_slowtmr+0x5a4>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d037      	beq.n	800a546 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a4d6:	e592      	b.n	8009ffe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	7f1b      	ldrb	r3, [r3, #28]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	7f1a      	ldrb	r2, [r3, #28]
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	7f5b      	ldrb	r3, [r3, #29]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d325      	bcc.n	800a546 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a500:	4b1f      	ldr	r3, [pc, #124]	; (800a580 <tcp_slowtmr+0x5a4>)
 800a502:	2200      	movs	r2, #0
 800a504:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <tcp_slowtmr+0x54c>
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a518:	6912      	ldr	r2, [r2, #16]
 800a51a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	4603      	mov	r3, r0
 800a522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a526:	e002      	b.n	800a52e <tcp_slowtmr+0x552>
 800a528:	2300      	movs	r3, #0
 800a52a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <tcp_slowtmr+0x5a4>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d000      	beq.n	800a538 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a536:	e562      	b.n	8009ffe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a538:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f003 fb7d 	bl	800dc40 <tcp_output>
  while (pcb != NULL) {
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f47f ad5e 	bne.w	800a00a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a552:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <tcp_slowtmr+0x5a8>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a558:	e069      	b.n	800a62e <tcp_slowtmr+0x652>
 800a55a:	bf00      	nop
 800a55c:	2000b4cc 	.word	0x2000b4cc
 800a560:	000a4cb8 	.word	0x000a4cb8
 800a564:	10624dd3 	.word	0x10624dd3
 800a568:	000124f8 	.word	0x000124f8
 800a56c:	2000b4c8 	.word	0x2000b4c8
 800a570:	080136bc 	.word	0x080136bc
 800a574:	08013af4 	.word	0x08013af4
 800a578:	08013700 	.word	0x08013700
 800a57c:	08013b20 	.word	0x08013b20
 800a580:	2000b4c4 	.word	0x2000b4c4
 800a584:	2000b4d8 	.word	0x2000b4d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	7d1b      	ldrb	r3, [r3, #20]
 800a58c:	2b0a      	cmp	r3, #10
 800a58e:	d006      	beq.n	800a59e <tcp_slowtmr+0x5c2>
 800a590:	4b2b      	ldr	r3, [pc, #172]	; (800a640 <tcp_slowtmr+0x664>)
 800a592:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a596:	492b      	ldr	r1, [pc, #172]	; (800a644 <tcp_slowtmr+0x668>)
 800a598:	482b      	ldr	r0, [pc, #172]	; (800a648 <tcp_slowtmr+0x66c>)
 800a59a:	f007 fb49 	bl	8011c30 <iprintf>
    pcb_remove = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a5a4:	4b29      	ldr	r3, [pc, #164]	; (800a64c <tcp_slowtmr+0x670>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2bf0      	cmp	r3, #240	; 0xf0
 800a5b0:	d904      	bls.n	800a5bc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02f      	beq.n	800a624 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a5c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5c6:	f000 fb2b 	bl	800ac20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d010      	beq.n	800a5f2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a5d0:	4b1f      	ldr	r3, [pc, #124]	; (800a650 <tcp_slowtmr+0x674>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d106      	bne.n	800a5e8 <tcp_slowtmr+0x60c>
 800a5da:	4b19      	ldr	r3, [pc, #100]	; (800a640 <tcp_slowtmr+0x664>)
 800a5dc:	f240 52af 	movw	r2, #1455	; 0x5af
 800a5e0:	491c      	ldr	r1, [pc, #112]	; (800a654 <tcp_slowtmr+0x678>)
 800a5e2:	4819      	ldr	r0, [pc, #100]	; (800a648 <tcp_slowtmr+0x66c>)
 800a5e4:	f007 fb24 	bl	8011c30 <iprintf>
        prev->next = pcb->next;
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	60da      	str	r2, [r3, #12]
 800a5f0:	e00f      	b.n	800a612 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a5f2:	4b17      	ldr	r3, [pc, #92]	; (800a650 <tcp_slowtmr+0x674>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d006      	beq.n	800a60a <tcp_slowtmr+0x62e>
 800a5fc:	4b10      	ldr	r3, [pc, #64]	; (800a640 <tcp_slowtmr+0x664>)
 800a5fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a602:	4915      	ldr	r1, [pc, #84]	; (800a658 <tcp_slowtmr+0x67c>)
 800a604:	4810      	ldr	r0, [pc, #64]	; (800a648 <tcp_slowtmr+0x66c>)
 800a606:	f007 fb13 	bl	8011c30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <tcp_slowtmr+0x674>)
 800a610:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a61c:	69f8      	ldr	r0, [r7, #28]
 800a61e:	f7ff f93f 	bl	80098a0 <tcp_free>
 800a622:	e004      	b.n	800a62e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1a9      	bne.n	800a588 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	3730      	adds	r7, #48	; 0x30
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bdb0      	pop	{r4, r5, r7, pc}
 800a63e:	bf00      	nop
 800a640:	080136bc 	.word	0x080136bc
 800a644:	08013b4c 	.word	0x08013b4c
 800a648:	08013700 	.word	0x08013700
 800a64c:	2000b4cc 	.word	0x2000b4cc
 800a650:	2000b4d8 	.word	0x2000b4d8
 800a654:	08013b7c 	.word	0x08013b7c
 800a658:	08013ba4 	.word	0x08013ba4

0800a65c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a662:	4b2d      	ldr	r3, [pc, #180]	; (800a718 <tcp_fasttmr+0xbc>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4b2b      	ldr	r3, [pc, #172]	; (800a718 <tcp_fasttmr+0xbc>)
 800a66c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a66e:	4b2b      	ldr	r3, [pc, #172]	; (800a71c <tcp_fasttmr+0xc0>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a674:	e048      	b.n	800a708 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7f9a      	ldrb	r2, [r3, #30]
 800a67a:	4b27      	ldr	r3, [pc, #156]	; (800a718 <tcp_fasttmr+0xbc>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d03f      	beq.n	800a702 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a682:	4b25      	ldr	r3, [pc, #148]	; (800a718 <tcp_fasttmr+0xbc>)
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8b5b      	ldrh	r3, [r3, #26]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d010      	beq.n	800a6b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	8b5b      	ldrh	r3, [r3, #26]
 800a69a:	f043 0302 	orr.w	r3, r3, #2
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f003 facb 	bl	800dc40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	8b5b      	ldrh	r3, [r3, #26]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8b5b      	ldrh	r3, [r3, #26]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	8b5b      	ldrh	r3, [r3, #26]
 800a6c8:	f023 0308 	bic.w	r3, r3, #8
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fa78 	bl	8009bc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a6e6:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <tcp_fasttmr+0xc4>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f819 	bl	800a724 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a6f2:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <tcp_fasttmr+0xc4>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d000      	beq.n	800a6fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a6fa:	e7b8      	b.n	800a66e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	607b      	str	r3, [r7, #4]
 800a700:	e002      	b.n	800a708 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1b3      	bne.n	800a676 <tcp_fasttmr+0x1a>
    }
  }
}
 800a70e:	bf00      	nop
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20004ac2 	.word	0x20004ac2
 800a71c:	2000b4c8 	.word	0x2000b4c8
 800a720:	2000b4c4 	.word	0x2000b4c4

0800a724 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <tcp_process_refused_data+0x22>
 800a732:	4b37      	ldr	r3, [pc, #220]	; (800a810 <tcp_process_refused_data+0xec>)
 800a734:	f240 6209 	movw	r2, #1545	; 0x609
 800a738:	4936      	ldr	r1, [pc, #216]	; (800a814 <tcp_process_refused_data+0xf0>)
 800a73a:	4837      	ldr	r0, [pc, #220]	; (800a818 <tcp_process_refused_data+0xf4>)
 800a73c:	f007 fa78 	bl	8011c30 <iprintf>
 800a740:	f06f 030f 	mvn.w	r3, #15
 800a744:	e060      	b.n	800a808 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a74a:	7b5b      	ldrb	r3, [r3, #13]
 800a74c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a752:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <tcp_process_refused_data+0x58>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6918      	ldr	r0, [r3, #16]
 800a76e:	2300      	movs	r3, #0
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	47a0      	blx	r4
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]
 800a77a:	e007      	b.n	800a78c <tcp_process_refused_data+0x68>
 800a77c:	2300      	movs	r3, #0
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	2000      	movs	r0, #0
 800a784:	f000 f8a4 	bl	800a8d0 <tcp_recv_null>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d12a      	bne.n	800a7ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d033      	beq.n	800a806 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7a6:	d005      	beq.n	800a7b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <tcp_process_refused_data+0xb2>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6918      	ldr	r0, [r3, #16]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	47a0      	blx	r4
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
 800a7d4:	e001      	b.n	800a7da <tcp_process_refused_data+0xb6>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7de:	f113 0f0d 	cmn.w	r3, #13
 800a7e2:	d110      	bne.n	800a806 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a7e4:	f06f 030c 	mvn.w	r3, #12
 800a7e8:	e00e      	b.n	800a808 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ee:	f113 0f0d 	cmn.w	r3, #13
 800a7f2:	d102      	bne.n	800a7fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a7f4:	f06f 030c 	mvn.w	r3, #12
 800a7f8:	e006      	b.n	800a808 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a800:	f06f 0304 	mvn.w	r3, #4
 800a804:	e000      	b.n	800a808 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd90      	pop	{r4, r7, pc}
 800a810:	080136bc 	.word	0x080136bc
 800a814:	08013bcc 	.word	0x08013bcc
 800a818:	08013700 	.word	0x08013700

0800a81c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a824:	e007      	b.n	800a836 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f80a 	bl	800a846 <tcp_seg_free>
    seg = next;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f4      	bne.n	800a826 <tcp_segs_free+0xa>
  }
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b082      	sub	sp, #8
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00c      	beq.n	800a86e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fd71 	bl	8009348 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	2003      	movs	r0, #3
 800a86a:	f7fd fec9 	bl	8008600 <memp_free>
  }
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <tcp_seg_copy+0x1c>
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <tcp_seg_copy+0x4c>)
 800a888:	f240 6282 	movw	r2, #1666	; 0x682
 800a88c:	490e      	ldr	r1, [pc, #56]	; (800a8c8 <tcp_seg_copy+0x50>)
 800a88e:	480f      	ldr	r0, [pc, #60]	; (800a8cc <tcp_seg_copy+0x54>)
 800a890:	f007 f9ce 	bl	8011c30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a894:	2003      	movs	r0, #3
 800a896:	f7fd fe61 	bl	800855c <memp_malloc>
 800a89a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <tcp_seg_copy+0x2e>
    return NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e00a      	b.n	800a8bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a8a6:	2210      	movs	r2, #16
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f007 f94f 	bl	8011b4e <memcpy>
  pbuf_ref(cseg->p);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fded 	bl	8009494 <pbuf_ref>
  return cseg;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	080136bc 	.word	0x080136bc
 800a8c8:	08013c10 	.word	0x08013c10
 800a8cc:	08013700 	.word	0x08013700

0800a8d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d109      	bne.n	800a8f8 <tcp_recv_null+0x28>
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <tcp_recv_null+0x60>)
 800a8e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a8ea:	4912      	ldr	r1, [pc, #72]	; (800a934 <tcp_recv_null+0x64>)
 800a8ec:	4812      	ldr	r0, [pc, #72]	; (800a938 <tcp_recv_null+0x68>)
 800a8ee:	f007 f99f 	bl	8011c30 <iprintf>
 800a8f2:	f06f 030f 	mvn.w	r3, #15
 800a8f6:	e016      	b.n	800a926 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	891b      	ldrh	r3, [r3, #8]
 800a902:	4619      	mov	r1, r3
 800a904:	68b8      	ldr	r0, [r7, #8]
 800a906:	f7ff fb19 	bl	8009f3c <tcp_recved>
    pbuf_free(p);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7fe fd1c 	bl	8009348 <pbuf_free>
 800a910:	e008      	b.n	800a924 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d104      	bne.n	800a924 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a91a:	68b8      	ldr	r0, [r7, #8]
 800a91c:	f7ff f9be 	bl	8009c9c <tcp_close>
 800a920:	4603      	mov	r3, r0
 800a922:	e000      	b.n	800a926 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	080136bc 	.word	0x080136bc
 800a934:	08013c2c 	.word	0x08013c2c
 800a938:	08013700 	.word	0x08013700

0800a93c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	db01      	blt.n	800a952 <tcp_kill_prio+0x16>
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	e000      	b.n	800a954 <tcp_kill_prio+0x18>
 800a952:	237f      	movs	r3, #127	; 0x7f
 800a954:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d034      	beq.n	800a9c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a95c:	7afb      	ldrb	r3, [r7, #11]
 800a95e:	3b01      	subs	r3, #1
 800a960:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a96a:	4b19      	ldr	r3, [pc, #100]	; (800a9d0 <tcp_kill_prio+0x94>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e01f      	b.n	800a9b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	7d5b      	ldrb	r3, [r3, #21]
 800a976:	7afa      	ldrb	r2, [r7, #11]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d80c      	bhi.n	800a996 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a980:	7afa      	ldrb	r2, [r7, #11]
 800a982:	429a      	cmp	r2, r3
 800a984:	d112      	bne.n	800a9ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a986:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <tcp_kill_prio+0x98>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	429a      	cmp	r2, r3
 800a994:	d80a      	bhi.n	800a9ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a996:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <tcp_kill_prio+0x98>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	7d5b      	ldrb	r3, [r3, #21]
 800a9aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1dc      	bne.n	800a972 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a9be:	6938      	ldr	r0, [r7, #16]
 800a9c0:	f7ff fa56 	bl	8009e70 <tcp_abort>
 800a9c4:	e000      	b.n	800a9c8 <tcp_kill_prio+0x8c>
    return;
 800a9c6:	bf00      	nop
  }
}
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000b4c8 	.word	0x2000b4c8
 800a9d4:	2000b4cc 	.word	0x2000b4cc

0800a9d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d009      	beq.n	800a9fc <tcp_kill_state+0x24>
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d006      	beq.n	800a9fc <tcp_kill_state+0x24>
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <tcp_kill_state+0x80>)
 800a9f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a9f4:	4919      	ldr	r1, [pc, #100]	; (800aa5c <tcp_kill_state+0x84>)
 800a9f6:	481a      	ldr	r0, [pc, #104]	; (800aa60 <tcp_kill_state+0x88>)
 800a9f8:	f007 f91a 	bl	8011c30 <iprintf>

  inactivity = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aa00:	2300      	movs	r3, #0
 800aa02:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa04:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <tcp_kill_state+0x8c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	e017      	b.n	800aa3c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	7d1b      	ldrb	r3, [r3, #20]
 800aa10:	79fa      	ldrb	r2, [r7, #7]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d10f      	bne.n	800aa36 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <tcp_kill_state+0x90>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d807      	bhi.n	800aa36 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa26:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <tcp_kill_state+0x90>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e4      	bne.n	800aa0c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6938      	ldr	r0, [r7, #16]
 800aa4c:	f7ff f952 	bl	8009cf4 <tcp_abandon>
  }
}
 800aa50:	bf00      	nop
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	080136bc 	.word	0x080136bc
 800aa5c:	08013c48 	.word	0x08013c48
 800aa60:	08013700 	.word	0x08013700
 800aa64:	2000b4c8 	.word	0x2000b4c8
 800aa68:	2000b4cc 	.word	0x2000b4cc

0800aa6c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa7a:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <tcp_kill_timewait+0x58>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e012      	b.n	800aaa8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa82:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <tcp_kill_timewait+0x5c>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d807      	bhi.n	800aaa2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aa92:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <tcp_kill_timewait+0x5c>)
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e9      	bne.n	800aa82 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f7ff f9db 	bl	8009e70 <tcp_abort>
  }
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	2000b4d8 	.word	0x2000b4d8
 800aac8:	2000b4cc 	.word	0x2000b4cc

0800aacc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800aad2:	4b10      	ldr	r3, [pc, #64]	; (800ab14 <tcp_handle_closepend+0x48>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aad8:	e014      	b.n	800ab04 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	8b5b      	ldrh	r3, [r3, #26]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	8b5b      	ldrh	r3, [r3, #26]
 800aaf0:	f023 0308 	bic.w	r3, r3, #8
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff f864 	bl	8009bc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e7      	bne.n	800aada <tcp_handle_closepend+0xe>
  }
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	2000b4c8 	.word	0x2000b4c8

0800ab18 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab22:	2001      	movs	r0, #1
 800ab24:	f7fd fd1a 	bl	800855c <memp_malloc>
 800ab28:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d126      	bne.n	800ab7e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ab30:	f7ff ffcc 	bl	800aacc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ab34:	f7ff ff9a 	bl	800aa6c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7fd fd0f 	bl	800855c <memp_malloc>
 800ab3e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d11b      	bne.n	800ab7e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ab46:	2009      	movs	r0, #9
 800ab48:	f7ff ff46 	bl	800a9d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	f7fd fd05 	bl	800855c <memp_malloc>
 800ab52:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d111      	bne.n	800ab7e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ab5a:	2008      	movs	r0, #8
 800ab5c:	f7ff ff3c 	bl	800a9d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab60:	2001      	movs	r0, #1
 800ab62:	f7fd fcfb 	bl	800855c <memp_malloc>
 800ab66:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d107      	bne.n	800ab7e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fee3 	bl	800a93c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab76:	2001      	movs	r0, #1
 800ab78:	f7fd fcf0 	bl	800855c <memp_malloc>
 800ab7c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d03f      	beq.n	800ac04 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ab84:	229c      	movs	r2, #156	; 0x9c
 800ab86:	2100      	movs	r1, #0
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f006 ffee 	bl	8011b6a <memset>
    pcb->prio = prio;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	79fa      	ldrb	r2, [r7, #7]
 800ab92:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	22ff      	movs	r2, #255	; 0xff
 800abb2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800abba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2206      	movs	r2, #6
 800abc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2206      	movs	r2, #6
 800abc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800abda:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <tcp_alloc+0xf8>)
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <tcp_alloc+0xfc>)
 800abe4:	781a      	ldrb	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a08      	ldr	r2, [pc, #32]	; (800ac18 <tcp_alloc+0x100>)
 800abf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a07      	ldr	r2, [pc, #28]	; (800ac1c <tcp_alloc+0x104>)
 800ac00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ac04:	68fb      	ldr	r3, [r7, #12]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	2000b4cc 	.word	0x2000b4cc
 800ac14:	20004ac2 	.word	0x20004ac2
 800ac18:	0800a8d1 	.word	0x0800a8d1
 800ac1c:	006ddd00 	.word	0x006ddd00

0800ac20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d107      	bne.n	800ac3e <tcp_pcb_purge+0x1e>
 800ac2e:	4b21      	ldr	r3, [pc, #132]	; (800acb4 <tcp_pcb_purge+0x94>)
 800ac30:	f640 0251 	movw	r2, #2129	; 0x851
 800ac34:	4920      	ldr	r1, [pc, #128]	; (800acb8 <tcp_pcb_purge+0x98>)
 800ac36:	4821      	ldr	r0, [pc, #132]	; (800acbc <tcp_pcb_purge+0x9c>)
 800ac38:	f006 fffa 	bl	8011c30 <iprintf>
 800ac3c:	e037      	b.n	800acae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	7d1b      	ldrb	r3, [r3, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d033      	beq.n	800acae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ac4a:	2b0a      	cmp	r3, #10
 800ac4c:	d02f      	beq.n	800acae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d02b      	beq.n	800acae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fb70 	bl	8009348 <pbuf_free>
      pcb->refused_data = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f986 	bl	800af88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fdc7 	bl	800a81c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff fdc2 	bl	800a81c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	080136bc 	.word	0x080136bc
 800acb8:	08013d08 	.word	0x08013d08
 800acbc:	08013700 	.word	0x08013700

0800acc0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <tcp_pcb_remove+0x1e>
 800acd0:	4b3e      	ldr	r3, [pc, #248]	; (800adcc <tcp_pcb_remove+0x10c>)
 800acd2:	f640 0283 	movw	r2, #2179	; 0x883
 800acd6:	493e      	ldr	r1, [pc, #248]	; (800add0 <tcp_pcb_remove+0x110>)
 800acd8:	483e      	ldr	r0, [pc, #248]	; (800add4 <tcp_pcb_remove+0x114>)
 800acda:	f006 ffa9 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <tcp_pcb_remove+0x32>
 800ace4:	4b39      	ldr	r3, [pc, #228]	; (800adcc <tcp_pcb_remove+0x10c>)
 800ace6:	f640 0284 	movw	r2, #2180	; 0x884
 800acea:	493b      	ldr	r1, [pc, #236]	; (800add8 <tcp_pcb_remove+0x118>)
 800acec:	4839      	ldr	r0, [pc, #228]	; (800add4 <tcp_pcb_remove+0x114>)
 800acee:	f006 ff9f 	bl	8011c30 <iprintf>

  TCP_RMV(pcblist, pcb);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d105      	bne.n	800ad08 <tcp_pcb_remove+0x48>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	e013      	b.n	800ad30 <tcp_pcb_remove+0x70>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]
 800ad0e:	e00c      	b.n	800ad2a <tcp_pcb_remove+0x6a>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d104      	bne.n	800ad24 <tcp_pcb_remove+0x64>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	60da      	str	r2, [r3, #12]
 800ad22:	e005      	b.n	800ad30 <tcp_pcb_remove+0x70>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1ef      	bne.n	800ad10 <tcp_pcb_remove+0x50>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2200      	movs	r2, #0
 800ad34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ad36:	6838      	ldr	r0, [r7, #0]
 800ad38:	f7ff ff72 	bl	800ac20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	7d1b      	ldrb	r3, [r3, #20]
 800ad40:	2b0a      	cmp	r3, #10
 800ad42:	d013      	beq.n	800ad6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d00f      	beq.n	800ad6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	8b5b      	ldrh	r3, [r3, #26]
 800ad50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	8b5b      	ldrh	r3, [r3, #26]
 800ad5c:	f043 0302 	orr.w	r3, r3, #2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ad66:	6838      	ldr	r0, [r7, #0]
 800ad68:	f002 ff6a 	bl	800dc40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	7d1b      	ldrb	r3, [r3, #20]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d020      	beq.n	800adb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <tcp_pcb_remove+0xca>
 800ad7c:	4b13      	ldr	r3, [pc, #76]	; (800adcc <tcp_pcb_remove+0x10c>)
 800ad7e:	f640 0293 	movw	r2, #2195	; 0x893
 800ad82:	4916      	ldr	r1, [pc, #88]	; (800addc <tcp_pcb_remove+0x11c>)
 800ad84:	4813      	ldr	r0, [pc, #76]	; (800add4 <tcp_pcb_remove+0x114>)
 800ad86:	f006 ff53 	bl	8011c30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <tcp_pcb_remove+0xe0>
 800ad92:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <tcp_pcb_remove+0x10c>)
 800ad94:	f640 0294 	movw	r2, #2196	; 0x894
 800ad98:	4911      	ldr	r1, [pc, #68]	; (800ade0 <tcp_pcb_remove+0x120>)
 800ad9a:	480e      	ldr	r0, [pc, #56]	; (800add4 <tcp_pcb_remove+0x114>)
 800ad9c:	f006 ff48 	bl	8011c30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <tcp_pcb_remove+0xf6>
 800ada8:	4b08      	ldr	r3, [pc, #32]	; (800adcc <tcp_pcb_remove+0x10c>)
 800adaa:	f640 0296 	movw	r2, #2198	; 0x896
 800adae:	490d      	ldr	r1, [pc, #52]	; (800ade4 <tcp_pcb_remove+0x124>)
 800adb0:	4808      	ldr	r0, [pc, #32]	; (800add4 <tcp_pcb_remove+0x114>)
 800adb2:	f006 ff3d 	bl	8011c30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2200      	movs	r2, #0
 800adba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2200      	movs	r2, #0
 800adc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	080136bc 	.word	0x080136bc
 800add0:	08013d24 	.word	0x08013d24
 800add4:	08013700 	.word	0x08013700
 800add8:	08013d40 	.word	0x08013d40
 800addc:	08013d60 	.word	0x08013d60
 800ade0:	08013d78 	.word	0x08013d78
 800ade4:	08013d94 	.word	0x08013d94

0800ade8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <tcp_next_iss+0x1c>
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <tcp_next_iss+0x38>)
 800adf8:	f640 02af 	movw	r2, #2223	; 0x8af
 800adfc:	4909      	ldr	r1, [pc, #36]	; (800ae24 <tcp_next_iss+0x3c>)
 800adfe:	480a      	ldr	r0, [pc, #40]	; (800ae28 <tcp_next_iss+0x40>)
 800ae00:	f006 ff16 	bl	8011c30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <tcp_next_iss+0x44>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <tcp_next_iss+0x48>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4a07      	ldr	r2, [pc, #28]	; (800ae2c <tcp_next_iss+0x44>)
 800ae10:	6013      	str	r3, [r2, #0]
  return iss;
 800ae12:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <tcp_next_iss+0x44>)
 800ae14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	080136bc 	.word	0x080136bc
 800ae24:	08013dac 	.word	0x08013dac
 800ae28:	08013700 	.word	0x08013700
 800ae2c:	20000014 	.word	0x20000014
 800ae30:	2000b4cc 	.word	0x2000b4cc

0800ae34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <tcp_eff_send_mss_netif+0x22>
 800ae48:	4b14      	ldr	r3, [pc, #80]	; (800ae9c <tcp_eff_send_mss_netif+0x68>)
 800ae4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ae4e:	4914      	ldr	r1, [pc, #80]	; (800aea0 <tcp_eff_send_mss_netif+0x6c>)
 800ae50:	4814      	ldr	r0, [pc, #80]	; (800aea4 <tcp_eff_send_mss_netif+0x70>)
 800ae52:	f006 feed 	bl	8011c30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ae5c:	89fb      	ldrh	r3, [r7, #14]
 800ae5e:	e019      	b.n	800ae94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ae66:	8afb      	ldrh	r3, [r7, #22]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d012      	beq.n	800ae92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ae6c:	2328      	movs	r3, #40	; 0x28
 800ae6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ae70:	8afa      	ldrh	r2, [r7, #22]
 800ae72:	8abb      	ldrh	r3, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d904      	bls.n	800ae82 <tcp_eff_send_mss_netif+0x4e>
 800ae78:	8afa      	ldrh	r2, [r7, #22]
 800ae7a:	8abb      	ldrh	r3, [r7, #20]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	e000      	b.n	800ae84 <tcp_eff_send_mss_netif+0x50>
 800ae82:	2300      	movs	r3, #0
 800ae84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ae86:	8a7a      	ldrh	r2, [r7, #18]
 800ae88:	89fb      	ldrh	r3, [r7, #14]
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	bf28      	it	cs
 800ae8e:	4613      	movcs	r3, r2
 800ae90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ae92:	89fb      	ldrh	r3, [r7, #14]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	080136bc 	.word	0x080136bc
 800aea0:	08013dc8 	.word	0x08013dc8
 800aea4:	08013700 	.word	0x08013700

0800aea8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d119      	bne.n	800aef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800aebc:	4b10      	ldr	r3, [pc, #64]	; (800af00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800aebe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800aec2:	4910      	ldr	r1, [pc, #64]	; (800af04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800aec4:	4810      	ldr	r0, [pc, #64]	; (800af08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800aec6:	f006 feb3 	bl	8011c30 <iprintf>

  while (pcb != NULL) {
 800aeca:	e011      	b.n	800aef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d108      	bne.n	800aeea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7fe ffc6 	bl	8009e70 <tcp_abort>
      pcb = next;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	e002      	b.n	800aef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1ea      	bne.n	800aecc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	080136bc 	.word	0x080136bc
 800af04:	08013df0 	.word	0x08013df0
 800af08:	08013700 	.word	0x08013700

0800af0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d02a      	beq.n	800af72 <tcp_netif_ip_addr_changed+0x66>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d026      	beq.n	800af72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af24:	4b15      	ldr	r3, [pc, #84]	; (800af7c <tcp_netif_ip_addr_changed+0x70>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff ffbc 	bl	800aea8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af30:	4b13      	ldr	r3, [pc, #76]	; (800af80 <tcp_netif_ip_addr_changed+0x74>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff ffb6 	bl	800aea8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d017      	beq.n	800af72 <tcp_netif_ip_addr_changed+0x66>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d013      	beq.n	800af72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af4a:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <tcp_netif_ip_addr_changed+0x78>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	e00c      	b.n	800af6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d103      	bne.n	800af66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1ef      	bne.n	800af52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	2000b4c8 	.word	0x2000b4c8
 800af80:	2000b4d4 	.word	0x2000b4d4
 800af84:	2000b4d0 	.word	0x2000b4d0

0800af88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7ff fc3d 	bl	800a81c <tcp_segs_free>
    pcb->ooseq = NULL;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800afb0:	b590      	push	{r4, r7, lr}
 800afb2:	b08d      	sub	sp, #52	; 0x34
 800afb4:	af04      	add	r7, sp, #16
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <tcp_input+0x1c>
 800afc0:	4b9b      	ldr	r3, [pc, #620]	; (800b230 <tcp_input+0x280>)
 800afc2:	2283      	movs	r2, #131	; 0x83
 800afc4:	499b      	ldr	r1, [pc, #620]	; (800b234 <tcp_input+0x284>)
 800afc6:	489c      	ldr	r0, [pc, #624]	; (800b238 <tcp_input+0x288>)
 800afc8:	f006 fe32 	bl	8011c30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	4a9a      	ldr	r2, [pc, #616]	; (800b23c <tcp_input+0x28c>)
 800afd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	895b      	ldrh	r3, [r3, #10]
 800afd8:	2b13      	cmp	r3, #19
 800afda:	f240 83c4 	bls.w	800b766 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800afde:	4b98      	ldr	r3, [pc, #608]	; (800b240 <tcp_input+0x290>)
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	4a97      	ldr	r2, [pc, #604]	; (800b240 <tcp_input+0x290>)
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	4611      	mov	r1, r2
 800afe8:	4618      	mov	r0, r3
 800afea:	f005 fc43 	bl	8010874 <ip4_addr_isbroadcast_u32>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 83ba 	bne.w	800b76a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800aff6:	4b92      	ldr	r3, [pc, #584]	; (800b240 <tcp_input+0x290>)
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800affe:	2be0      	cmp	r3, #224	; 0xe0
 800b000:	f000 83b3 	beq.w	800b76a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b004:	4b8d      	ldr	r3, [pc, #564]	; (800b23c <tcp_input+0x28c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	899b      	ldrh	r3, [r3, #12]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fc fdef 	bl	8007bf0 <lwip_htons>
 800b012:	4603      	mov	r3, r0
 800b014:	0b1b      	lsrs	r3, r3, #12
 800b016:	b29b      	uxth	r3, r3
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b01e:	7cbb      	ldrb	r3, [r7, #18]
 800b020:	2b13      	cmp	r3, #19
 800b022:	f240 83a4 	bls.w	800b76e <tcp_input+0x7be>
 800b026:	7cbb      	ldrb	r3, [r7, #18]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	891b      	ldrh	r3, [r3, #8]
 800b02e:	429a      	cmp	r2, r3
 800b030:	f200 839d 	bhi.w	800b76e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b034:	7cbb      	ldrb	r3, [r7, #18]
 800b036:	b29b      	uxth	r3, r3
 800b038:	3b14      	subs	r3, #20
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	4b81      	ldr	r3, [pc, #516]	; (800b244 <tcp_input+0x294>)
 800b03e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b040:	4b81      	ldr	r3, [pc, #516]	; (800b248 <tcp_input+0x298>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	895a      	ldrh	r2, [r3, #10]
 800b04a:	7cbb      	ldrb	r3, [r7, #18]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	429a      	cmp	r2, r3
 800b050:	d309      	bcc.n	800b066 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b052:	4b7c      	ldr	r3, [pc, #496]	; (800b244 <tcp_input+0x294>)
 800b054:	881a      	ldrh	r2, [r3, #0]
 800b056:	4b7d      	ldr	r3, [pc, #500]	; (800b24c <tcp_input+0x29c>)
 800b058:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b05a:	7cbb      	ldrb	r3, [r7, #18]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7fe f8ec 	bl	800923c <pbuf_remove_header>
 800b064:	e04e      	b.n	800b104 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <tcp_input+0xca>
 800b06e:	4b70      	ldr	r3, [pc, #448]	; (800b230 <tcp_input+0x280>)
 800b070:	22c2      	movs	r2, #194	; 0xc2
 800b072:	4977      	ldr	r1, [pc, #476]	; (800b250 <tcp_input+0x2a0>)
 800b074:	4870      	ldr	r0, [pc, #448]	; (800b238 <tcp_input+0x288>)
 800b076:	f006 fddb 	bl	8011c30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b07a:	2114      	movs	r1, #20
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7fe f8dd 	bl	800923c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	895a      	ldrh	r2, [r3, #10]
 800b086:	4b71      	ldr	r3, [pc, #452]	; (800b24c <tcp_input+0x29c>)
 800b088:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b08a:	4b6e      	ldr	r3, [pc, #440]	; (800b244 <tcp_input+0x294>)
 800b08c:	881a      	ldrh	r2, [r3, #0]
 800b08e:	4b6f      	ldr	r3, [pc, #444]	; (800b24c <tcp_input+0x29c>)
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b096:	4b6d      	ldr	r3, [pc, #436]	; (800b24c <tcp_input+0x29c>)
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7fe f8cd 	bl	800923c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	895b      	ldrh	r3, [r3, #10]
 800b0a8:	8a3a      	ldrh	r2, [r7, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	f200 8361 	bhi.w	800b772 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	4a64      	ldr	r2, [pc, #400]	; (800b248 <tcp_input+0x298>)
 800b0b8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	8a3a      	ldrh	r2, [r7, #16]
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe f8ba 	bl	800923c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	891a      	ldrh	r2, [r3, #8]
 800b0cc:	8a3b      	ldrh	r3, [r7, #16]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	895b      	ldrh	r3, [r3, #10]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <tcp_input+0x13a>
 800b0de:	4b54      	ldr	r3, [pc, #336]	; (800b230 <tcp_input+0x280>)
 800b0e0:	22df      	movs	r2, #223	; 0xdf
 800b0e2:	495c      	ldr	r1, [pc, #368]	; (800b254 <tcp_input+0x2a4>)
 800b0e4:	4854      	ldr	r0, [pc, #336]	; (800b238 <tcp_input+0x288>)
 800b0e6:	f006 fda3 	bl	8011c30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	891a      	ldrh	r2, [r3, #8]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	891b      	ldrh	r3, [r3, #8]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d005      	beq.n	800b104 <tcp_input+0x154>
 800b0f8:	4b4d      	ldr	r3, [pc, #308]	; (800b230 <tcp_input+0x280>)
 800b0fa:	22e0      	movs	r2, #224	; 0xe0
 800b0fc:	4956      	ldr	r1, [pc, #344]	; (800b258 <tcp_input+0x2a8>)
 800b0fe:	484e      	ldr	r0, [pc, #312]	; (800b238 <tcp_input+0x288>)
 800b100:	f006 fd96 	bl	8011c30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b104:	4b4d      	ldr	r3, [pc, #308]	; (800b23c <tcp_input+0x28c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4a4b      	ldr	r2, [pc, #300]	; (800b23c <tcp_input+0x28c>)
 800b10e:	6814      	ldr	r4, [r2, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f7fc fd6d 	bl	8007bf0 <lwip_htons>
 800b116:	4603      	mov	r3, r0
 800b118:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b11a:	4b48      	ldr	r3, [pc, #288]	; (800b23c <tcp_input+0x28c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	885b      	ldrh	r3, [r3, #2]
 800b120:	b29b      	uxth	r3, r3
 800b122:	4a46      	ldr	r2, [pc, #280]	; (800b23c <tcp_input+0x28c>)
 800b124:	6814      	ldr	r4, [r2, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7fc fd62 	bl	8007bf0 <lwip_htons>
 800b12c:	4603      	mov	r3, r0
 800b12e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b130:	4b42      	ldr	r3, [pc, #264]	; (800b23c <tcp_input+0x28c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	4a41      	ldr	r2, [pc, #260]	; (800b23c <tcp_input+0x28c>)
 800b138:	6814      	ldr	r4, [r2, #0]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fc fd6d 	bl	8007c1a <lwip_htonl>
 800b140:	4603      	mov	r3, r0
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	6863      	ldr	r3, [r4, #4]
 800b146:	4a45      	ldr	r2, [pc, #276]	; (800b25c <tcp_input+0x2ac>)
 800b148:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b14a:	4b3c      	ldr	r3, [pc, #240]	; (800b23c <tcp_input+0x28c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	4a3a      	ldr	r2, [pc, #232]	; (800b23c <tcp_input+0x28c>)
 800b152:	6814      	ldr	r4, [r2, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f7fc fd60 	bl	8007c1a <lwip_htonl>
 800b15a:	4603      	mov	r3, r0
 800b15c:	60a3      	str	r3, [r4, #8]
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	4a3f      	ldr	r2, [pc, #252]	; (800b260 <tcp_input+0x2b0>)
 800b162:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b164:	4b35      	ldr	r3, [pc, #212]	; (800b23c <tcp_input+0x28c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	89db      	ldrh	r3, [r3, #14]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4a33      	ldr	r2, [pc, #204]	; (800b23c <tcp_input+0x28c>)
 800b16e:	6814      	ldr	r4, [r2, #0]
 800b170:	4618      	mov	r0, r3
 800b172:	f7fc fd3d 	bl	8007bf0 <lwip_htons>
 800b176:	4603      	mov	r3, r0
 800b178:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b17a:	4b30      	ldr	r3, [pc, #192]	; (800b23c <tcp_input+0x28c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	899b      	ldrh	r3, [r3, #12]
 800b180:	b29b      	uxth	r3, r3
 800b182:	4618      	mov	r0, r3
 800b184:	f7fc fd34 	bl	8007bf0 <lwip_htons>
 800b188:	4603      	mov	r3, r0
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b190:	b2da      	uxtb	r2, r3
 800b192:	4b34      	ldr	r3, [pc, #208]	; (800b264 <tcp_input+0x2b4>)
 800b194:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	891a      	ldrh	r2, [r3, #8]
 800b19a:	4b33      	ldr	r3, [pc, #204]	; (800b268 <tcp_input+0x2b8>)
 800b19c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b19e:	4b31      	ldr	r3, [pc, #196]	; (800b264 <tcp_input+0x2b4>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	f003 0303 	and.w	r3, r3, #3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00c      	beq.n	800b1c4 <tcp_input+0x214>
    tcplen++;
 800b1aa:	4b2f      	ldr	r3, [pc, #188]	; (800b268 <tcp_input+0x2b8>)
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	4b2d      	ldr	r3, [pc, #180]	; (800b268 <tcp_input+0x2b8>)
 800b1b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	891a      	ldrh	r2, [r3, #8]
 800b1ba:	4b2b      	ldr	r3, [pc, #172]	; (800b268 <tcp_input+0x2b8>)
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	f200 82d9 	bhi.w	800b776 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1c8:	4b28      	ldr	r3, [pc, #160]	; (800b26c <tcp_input+0x2bc>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	e09d      	b.n	800b30c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	7d1b      	ldrb	r3, [r3, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <tcp_input+0x234>
 800b1d8:	4b15      	ldr	r3, [pc, #84]	; (800b230 <tcp_input+0x280>)
 800b1da:	22fb      	movs	r2, #251	; 0xfb
 800b1dc:	4924      	ldr	r1, [pc, #144]	; (800b270 <tcp_input+0x2c0>)
 800b1de:	4816      	ldr	r0, [pc, #88]	; (800b238 <tcp_input+0x288>)
 800b1e0:	f006 fd26 	bl	8011c30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	7d1b      	ldrb	r3, [r3, #20]
 800b1e8:	2b0a      	cmp	r3, #10
 800b1ea:	d105      	bne.n	800b1f8 <tcp_input+0x248>
 800b1ec:	4b10      	ldr	r3, [pc, #64]	; (800b230 <tcp_input+0x280>)
 800b1ee:	22fc      	movs	r2, #252	; 0xfc
 800b1f0:	4920      	ldr	r1, [pc, #128]	; (800b274 <tcp_input+0x2c4>)
 800b1f2:	4811      	ldr	r0, [pc, #68]	; (800b238 <tcp_input+0x288>)
 800b1f4:	f006 fd1c 	bl	8011c30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	7d1b      	ldrb	r3, [r3, #20]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d105      	bne.n	800b20c <tcp_input+0x25c>
 800b200:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <tcp_input+0x280>)
 800b202:	22fd      	movs	r2, #253	; 0xfd
 800b204:	491c      	ldr	r1, [pc, #112]	; (800b278 <tcp_input+0x2c8>)
 800b206:	480c      	ldr	r0, [pc, #48]	; (800b238 <tcp_input+0x288>)
 800b208:	f006 fd12 	bl	8011c30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	7a1b      	ldrb	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d033      	beq.n	800b27c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	7a1a      	ldrb	r2, [r3, #8]
 800b218:	4b09      	ldr	r3, [pc, #36]	; (800b240 <tcp_input+0x290>)
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b220:	3301      	adds	r3, #1
 800b222:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b224:	429a      	cmp	r2, r3
 800b226:	d029      	beq.n	800b27c <tcp_input+0x2cc>
      prev = pcb;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	61bb      	str	r3, [r7, #24]
      continue;
 800b22c:	e06b      	b.n	800b306 <tcp_input+0x356>
 800b22e:	bf00      	nop
 800b230:	08013e24 	.word	0x08013e24
 800b234:	08013e58 	.word	0x08013e58
 800b238:	08013e70 	.word	0x08013e70
 800b23c:	20004ad4 	.word	0x20004ad4
 800b240:	20007db4 	.word	0x20007db4
 800b244:	20004ad8 	.word	0x20004ad8
 800b248:	20004adc 	.word	0x20004adc
 800b24c:	20004ada 	.word	0x20004ada
 800b250:	08013e98 	.word	0x08013e98
 800b254:	08013ea8 	.word	0x08013ea8
 800b258:	08013eb4 	.word	0x08013eb4
 800b25c:	20004ae4 	.word	0x20004ae4
 800b260:	20004ae8 	.word	0x20004ae8
 800b264:	20004af0 	.word	0x20004af0
 800b268:	20004aee 	.word	0x20004aee
 800b26c:	2000b4c8 	.word	0x2000b4c8
 800b270:	08013ed4 	.word	0x08013ed4
 800b274:	08013efc 	.word	0x08013efc
 800b278:	08013f28 	.word	0x08013f28
    }

    if (pcb->remote_port == tcphdr->src &&
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	8b1a      	ldrh	r2, [r3, #24]
 800b280:	4b94      	ldr	r3, [pc, #592]	; (800b4d4 <tcp_input+0x524>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	b29b      	uxth	r3, r3
 800b288:	429a      	cmp	r2, r3
 800b28a:	d13a      	bne.n	800b302 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	8ada      	ldrh	r2, [r3, #22]
 800b290:	4b90      	ldr	r3, [pc, #576]	; (800b4d4 <tcp_input+0x524>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	885b      	ldrh	r3, [r3, #2]
 800b296:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b298:	429a      	cmp	r2, r3
 800b29a:	d132      	bne.n	800b302 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	4b8d      	ldr	r3, [pc, #564]	; (800b4d8 <tcp_input+0x528>)
 800b2a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d12c      	bne.n	800b302 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	4b8a      	ldr	r3, [pc, #552]	; (800b4d8 <tcp_input+0x528>)
 800b2ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d126      	bne.n	800b302 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d106      	bne.n	800b2cc <tcp_input+0x31c>
 800b2be:	4b87      	ldr	r3, [pc, #540]	; (800b4dc <tcp_input+0x52c>)
 800b2c0:	f240 120d 	movw	r2, #269	; 0x10d
 800b2c4:	4986      	ldr	r1, [pc, #536]	; (800b4e0 <tcp_input+0x530>)
 800b2c6:	4887      	ldr	r0, [pc, #540]	; (800b4e4 <tcp_input+0x534>)
 800b2c8:	f006 fcb2 	bl	8011c30 <iprintf>
      if (prev != NULL) {
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00a      	beq.n	800b2e8 <tcp_input+0x338>
        prev->next = pcb->next;
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b2da:	4b83      	ldr	r3, [pc, #524]	; (800b4e8 <tcp_input+0x538>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b2e2:	4a81      	ldr	r2, [pc, #516]	; (800b4e8 <tcp_input+0x538>)
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d111      	bne.n	800b316 <tcp_input+0x366>
 800b2f2:	4b7a      	ldr	r3, [pc, #488]	; (800b4dc <tcp_input+0x52c>)
 800b2f4:	f240 1215 	movw	r2, #277	; 0x115
 800b2f8:	497c      	ldr	r1, [pc, #496]	; (800b4ec <tcp_input+0x53c>)
 800b2fa:	487a      	ldr	r0, [pc, #488]	; (800b4e4 <tcp_input+0x534>)
 800b2fc:	f006 fc98 	bl	8011c30 <iprintf>
      break;
 800b300:	e009      	b.n	800b316 <tcp_input+0x366>
    }
    prev = pcb;
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	61fb      	str	r3, [r7, #28]
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af5e 	bne.w	800b1d0 <tcp_input+0x220>
 800b314:	e000      	b.n	800b318 <tcp_input+0x368>
      break;
 800b316:	bf00      	nop
  }

  if (pcb == NULL) {
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f040 8095 	bne.w	800b44a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b320:	4b73      	ldr	r3, [pc, #460]	; (800b4f0 <tcp_input+0x540>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	61fb      	str	r3, [r7, #28]
 800b326:	e03f      	b.n	800b3a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	7d1b      	ldrb	r3, [r3, #20]
 800b32c:	2b0a      	cmp	r3, #10
 800b32e:	d006      	beq.n	800b33e <tcp_input+0x38e>
 800b330:	4b6a      	ldr	r3, [pc, #424]	; (800b4dc <tcp_input+0x52c>)
 800b332:	f240 121f 	movw	r2, #287	; 0x11f
 800b336:	496f      	ldr	r1, [pc, #444]	; (800b4f4 <tcp_input+0x544>)
 800b338:	486a      	ldr	r0, [pc, #424]	; (800b4e4 <tcp_input+0x534>)
 800b33a:	f006 fc79 	bl	8011c30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	7a1b      	ldrb	r3, [r3, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	7a1a      	ldrb	r2, [r3, #8]
 800b34a:	4b63      	ldr	r3, [pc, #396]	; (800b4d8 <tcp_input+0x528>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b352:	3301      	adds	r3, #1
 800b354:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b356:	429a      	cmp	r2, r3
 800b358:	d122      	bne.n	800b3a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	8b1a      	ldrh	r2, [r3, #24]
 800b35e:	4b5d      	ldr	r3, [pc, #372]	; (800b4d4 <tcp_input+0x524>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	b29b      	uxth	r3, r3
 800b366:	429a      	cmp	r2, r3
 800b368:	d11b      	bne.n	800b3a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	8ada      	ldrh	r2, [r3, #22]
 800b36e:	4b59      	ldr	r3, [pc, #356]	; (800b4d4 <tcp_input+0x524>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	885b      	ldrh	r3, [r3, #2]
 800b374:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b376:	429a      	cmp	r2, r3
 800b378:	d113      	bne.n	800b3a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	4b56      	ldr	r3, [pc, #344]	; (800b4d8 <tcp_input+0x528>)
 800b380:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b382:	429a      	cmp	r2, r3
 800b384:	d10d      	bne.n	800b3a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b53      	ldr	r3, [pc, #332]	; (800b4d8 <tcp_input+0x528>)
 800b38c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b38e:	429a      	cmp	r2, r3
 800b390:	d107      	bne.n	800b3a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b392:	69f8      	ldr	r0, [r7, #28]
 800b394:	f000 fb54 	bl	800ba40 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7fd ffd5 	bl	8009348 <pbuf_free>
        return;
 800b39e:	e1f0      	b.n	800b782 <tcp_input+0x7d2>
        continue;
 800b3a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	61fb      	str	r3, [r7, #28]
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1bc      	bne.n	800b328 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b3b2:	4b51      	ldr	r3, [pc, #324]	; (800b4f8 <tcp_input+0x548>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	617b      	str	r3, [r7, #20]
 800b3b8:	e02a      	b.n	800b410 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	7a1b      	ldrb	r3, [r3, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00c      	beq.n	800b3dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	7a1a      	ldrb	r2, [r3, #8]
 800b3c6:	4b44      	ldr	r3, [pc, #272]	; (800b4d8 <tcp_input+0x528>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d002      	beq.n	800b3dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	61bb      	str	r3, [r7, #24]
        continue;
 800b3da:	e016      	b.n	800b40a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	8ada      	ldrh	r2, [r3, #22]
 800b3e0:	4b3c      	ldr	r3, [pc, #240]	; (800b4d4 <tcp_input+0x524>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d10c      	bne.n	800b406 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b39      	ldr	r3, [pc, #228]	; (800b4d8 <tcp_input+0x528>)
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d00f      	beq.n	800b418 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00d      	beq.n	800b41a <tcp_input+0x46a>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d009      	beq.n	800b41a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1d1      	bne.n	800b3ba <tcp_input+0x40a>
 800b416:	e000      	b.n	800b41a <tcp_input+0x46a>
            break;
 800b418:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d014      	beq.n	800b44a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b42e:	4b32      	ldr	r3, [pc, #200]	; (800b4f8 <tcp_input+0x548>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b436:	4a30      	ldr	r2, [pc, #192]	; (800b4f8 <tcp_input+0x548>)
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b43c:	6978      	ldr	r0, [r7, #20]
 800b43e:	f000 fa01 	bl	800b844 <tcp_listen_input>
      }
      pbuf_free(p);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7fd ff80 	bl	8009348 <pbuf_free>
      return;
 800b448:	e19b      	b.n	800b782 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 8160 	beq.w	800b712 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b452:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <tcp_input+0x54c>)
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	891a      	ldrh	r2, [r3, #8]
 800b45c:	4b27      	ldr	r3, [pc, #156]	; (800b4fc <tcp_input+0x54c>)
 800b45e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b460:	4a26      	ldr	r2, [pc, #152]	; (800b4fc <tcp_input+0x54c>)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b466:	4b1b      	ldr	r3, [pc, #108]	; (800b4d4 <tcp_input+0x524>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a24      	ldr	r2, [pc, #144]	; (800b4fc <tcp_input+0x54c>)
 800b46c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b46e:	4b24      	ldr	r3, [pc, #144]	; (800b500 <tcp_input+0x550>)
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b474:	4b23      	ldr	r3, [pc, #140]	; (800b504 <tcp_input+0x554>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <tcp_input+0x558>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b480:	4b22      	ldr	r3, [pc, #136]	; (800b50c <tcp_input+0x55c>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d006      	beq.n	800b49a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7b5b      	ldrb	r3, [r3, #13]
 800b490:	f043 0301 	orr.w	r3, r3, #1
 800b494:	b2da      	uxtb	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d038      	beq.n	800b514 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b4a2:	69f8      	ldr	r0, [r7, #28]
 800b4a4:	f7ff f93e 	bl	800a724 <tcp_process_refused_data>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f113 0f0d 	cmn.w	r3, #13
 800b4ae:	d007      	beq.n	800b4c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d02d      	beq.n	800b514 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b4b8:	4b15      	ldr	r3, [pc, #84]	; (800b510 <tcp_input+0x560>)
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d029      	beq.n	800b514 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 8104 	bne.w	800b6d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b4ca:	69f8      	ldr	r0, [r7, #28]
 800b4cc:	f003 f9be 	bl	800e84c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b4d0:	e0ff      	b.n	800b6d2 <tcp_input+0x722>
 800b4d2:	bf00      	nop
 800b4d4:	20004ad4 	.word	0x20004ad4
 800b4d8:	20007db4 	.word	0x20007db4
 800b4dc:	08013e24 	.word	0x08013e24
 800b4e0:	08013f50 	.word	0x08013f50
 800b4e4:	08013e70 	.word	0x08013e70
 800b4e8:	2000b4c8 	.word	0x2000b4c8
 800b4ec:	08013f7c 	.word	0x08013f7c
 800b4f0:	2000b4d8 	.word	0x2000b4d8
 800b4f4:	08013fa8 	.word	0x08013fa8
 800b4f8:	2000b4d0 	.word	0x2000b4d0
 800b4fc:	20004ac4 	.word	0x20004ac4
 800b500:	20004af4 	.word	0x20004af4
 800b504:	20004af1 	.word	0x20004af1
 800b508:	20004aec 	.word	0x20004aec
 800b50c:	20004af0 	.word	0x20004af0
 800b510:	20004aee 	.word	0x20004aee
      }
    }
    tcp_input_pcb = pcb;
 800b514:	4a9c      	ldr	r2, [pc, #624]	; (800b788 <tcp_input+0x7d8>)
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b51a:	69f8      	ldr	r0, [r7, #28]
 800b51c:	f000 fb0a 	bl	800bb34 <tcp_process>
 800b520:	4603      	mov	r3, r0
 800b522:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b528:	f113 0f0d 	cmn.w	r3, #13
 800b52c:	f000 80d3 	beq.w	800b6d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b530:	4b96      	ldr	r3, [pc, #600]	; (800b78c <tcp_input+0x7dc>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 0308 	and.w	r3, r3, #8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d015      	beq.n	800b568 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b542:	2b00      	cmp	r3, #0
 800b544:	d008      	beq.n	800b558 <tcp_input+0x5a8>
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54c:	69fa      	ldr	r2, [r7, #28]
 800b54e:	6912      	ldr	r2, [r2, #16]
 800b550:	f06f 010d 	mvn.w	r1, #13
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b558:	69f9      	ldr	r1, [r7, #28]
 800b55a:	488d      	ldr	r0, [pc, #564]	; (800b790 <tcp_input+0x7e0>)
 800b55c:	f7ff fbb0 	bl	800acc0 <tcp_pcb_remove>
        tcp_free(pcb);
 800b560:	69f8      	ldr	r0, [r7, #28]
 800b562:	f7fe f99d 	bl	80098a0 <tcp_free>
 800b566:	e0c1      	b.n	800b6ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b56c:	4b89      	ldr	r3, [pc, #548]	; (800b794 <tcp_input+0x7e4>)
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d01d      	beq.n	800b5b0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b574:	4b87      	ldr	r3, [pc, #540]	; (800b794 <tcp_input+0x7e4>)
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00a      	beq.n	800b59a <tcp_input+0x5ea>
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	6910      	ldr	r0, [r2, #16]
 800b58e:	89fa      	ldrh	r2, [r7, #14]
 800b590:	69f9      	ldr	r1, [r7, #28]
 800b592:	4798      	blx	r3
 800b594:	4603      	mov	r3, r0
 800b596:	74fb      	strb	r3, [r7, #19]
 800b598:	e001      	b.n	800b59e <tcp_input+0x5ee>
 800b59a:	2300      	movs	r3, #0
 800b59c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b59e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5a2:	f113 0f0d 	cmn.w	r3, #13
 800b5a6:	f000 8098 	beq.w	800b6da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b5aa:	4b7a      	ldr	r3, [pc, #488]	; (800b794 <tcp_input+0x7e4>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b5b0:	69f8      	ldr	r0, [r7, #28]
 800b5b2:	f000 f907 	bl	800b7c4 <tcp_input_delayed_close>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f040 8090 	bne.w	800b6de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b5be:	4b76      	ldr	r3, [pc, #472]	; (800b798 <tcp_input+0x7e8>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d041      	beq.n	800b64a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d006      	beq.n	800b5dc <tcp_input+0x62c>
 800b5ce:	4b73      	ldr	r3, [pc, #460]	; (800b79c <tcp_input+0x7ec>)
 800b5d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b5d4:	4972      	ldr	r1, [pc, #456]	; (800b7a0 <tcp_input+0x7f0>)
 800b5d6:	4873      	ldr	r0, [pc, #460]	; (800b7a4 <tcp_input+0x7f4>)
 800b5d8:	f006 fb2a 	bl	8011c30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	8b5b      	ldrh	r3, [r3, #26]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d008      	beq.n	800b5fa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b5e8:	4b6b      	ldr	r3, [pc, #428]	; (800b798 <tcp_input+0x7e8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fd feab 	bl	8009348 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b5f2:	69f8      	ldr	r0, [r7, #28]
 800b5f4:	f7fe fc3c 	bl	8009e70 <tcp_abort>
            goto aborted;
 800b5f8:	e078      	b.n	800b6ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00c      	beq.n	800b61e <tcp_input+0x66e>
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	6918      	ldr	r0, [r3, #16]
 800b60e:	4b62      	ldr	r3, [pc, #392]	; (800b798 <tcp_input+0x7e8>)
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	69f9      	ldr	r1, [r7, #28]
 800b616:	47a0      	blx	r4
 800b618:	4603      	mov	r3, r0
 800b61a:	74fb      	strb	r3, [r7, #19]
 800b61c:	e008      	b.n	800b630 <tcp_input+0x680>
 800b61e:	4b5e      	ldr	r3, [pc, #376]	; (800b798 <tcp_input+0x7e8>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	69f9      	ldr	r1, [r7, #28]
 800b626:	2000      	movs	r0, #0
 800b628:	f7ff f952 	bl	800a8d0 <tcp_recv_null>
 800b62c:	4603      	mov	r3, r0
 800b62e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b634:	f113 0f0d 	cmn.w	r3, #13
 800b638:	d053      	beq.n	800b6e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b63a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b642:	4b55      	ldr	r3, [pc, #340]	; (800b798 <tcp_input+0x7e8>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b64a:	4b50      	ldr	r3, [pc, #320]	; (800b78c <tcp_input+0x7dc>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	d030      	beq.n	800b6b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d009      	beq.n	800b672 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b662:	7b5a      	ldrb	r2, [r3, #13]
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b668:	f042 0220 	orr.w	r2, r2, #32
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	735a      	strb	r2, [r3, #13]
 800b670:	e022      	b.n	800b6b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b676:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b67a:	d005      	beq.n	800b688 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b680:	3301      	adds	r3, #1
 800b682:	b29a      	uxth	r2, r3
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00b      	beq.n	800b6aa <tcp_input+0x6fa>
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	6918      	ldr	r0, [r3, #16]
 800b69c:	2300      	movs	r3, #0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	69f9      	ldr	r1, [r7, #28]
 800b6a2:	47a0      	blx	r4
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	74fb      	strb	r3, [r7, #19]
 800b6a8:	e001      	b.n	800b6ae <tcp_input+0x6fe>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b6ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6b2:	f113 0f0d 	cmn.w	r3, #13
 800b6b6:	d016      	beq.n	800b6e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b6b8:	4b33      	ldr	r3, [pc, #204]	; (800b788 <tcp_input+0x7d8>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b6be:	69f8      	ldr	r0, [r7, #28]
 800b6c0:	f000 f880 	bl	800b7c4 <tcp_input_delayed_close>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10f      	bne.n	800b6ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b6ca:	69f8      	ldr	r0, [r7, #28]
 800b6cc:	f002 fab8 	bl	800dc40 <tcp_output>
 800b6d0:	e00c      	b.n	800b6ec <tcp_input+0x73c>
        goto aborted;
 800b6d2:	bf00      	nop
 800b6d4:	e00a      	b.n	800b6ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b6d6:	bf00      	nop
 800b6d8:	e008      	b.n	800b6ec <tcp_input+0x73c>
              goto aborted;
 800b6da:	bf00      	nop
 800b6dc:	e006      	b.n	800b6ec <tcp_input+0x73c>
          goto aborted;
 800b6de:	bf00      	nop
 800b6e0:	e004      	b.n	800b6ec <tcp_input+0x73c>
            goto aborted;
 800b6e2:	bf00      	nop
 800b6e4:	e002      	b.n	800b6ec <tcp_input+0x73c>
              goto aborted;
 800b6e6:	bf00      	nop
 800b6e8:	e000      	b.n	800b6ec <tcp_input+0x73c>
          goto aborted;
 800b6ea:	bf00      	nop
    tcp_input_pcb = NULL;
 800b6ec:	4b26      	ldr	r3, [pc, #152]	; (800b788 <tcp_input+0x7d8>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b6f2:	4b29      	ldr	r3, [pc, #164]	; (800b798 <tcp_input+0x7e8>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b6f8:	4b2b      	ldr	r3, [pc, #172]	; (800b7a8 <tcp_input+0x7f8>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d03f      	beq.n	800b780 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800b700:	4b29      	ldr	r3, [pc, #164]	; (800b7a8 <tcp_input+0x7f8>)
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd fe1f 	bl	8009348 <pbuf_free>
      inseg.p = NULL;
 800b70a:	4b27      	ldr	r3, [pc, #156]	; (800b7a8 <tcp_input+0x7f8>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b710:	e036      	b.n	800b780 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b712:	4b26      	ldr	r3, [pc, #152]	; (800b7ac <tcp_input+0x7fc>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	899b      	ldrh	r3, [r3, #12]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fc fa68 	bl	8007bf0 <lwip_htons>
 800b720:	4603      	mov	r3, r0
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d118      	bne.n	800b75e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b72c:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <tcp_input+0x800>)
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	4b20      	ldr	r3, [pc, #128]	; (800b7b4 <tcp_input+0x804>)
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	4b20      	ldr	r3, [pc, #128]	; (800b7b8 <tcp_input+0x808>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b73c:	4b1b      	ldr	r3, [pc, #108]	; (800b7ac <tcp_input+0x7fc>)
 800b73e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b740:	885b      	ldrh	r3, [r3, #2]
 800b742:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b744:	4a19      	ldr	r2, [pc, #100]	; (800b7ac <tcp_input+0x7fc>)
 800b746:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b748:	8812      	ldrh	r2, [r2, #0]
 800b74a:	b292      	uxth	r2, r2
 800b74c:	9202      	str	r2, [sp, #8]
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	4b1a      	ldr	r3, [pc, #104]	; (800b7bc <tcp_input+0x80c>)
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <tcp_input+0x810>)
 800b756:	4602      	mov	r2, r0
 800b758:	2000      	movs	r0, #0
 800b75a:	f003 f825 	bl	800e7a8 <tcp_rst>
    pbuf_free(p);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7fd fdf2 	bl	8009348 <pbuf_free>
  return;
 800b764:	e00c      	b.n	800b780 <tcp_input+0x7d0>
    goto dropped;
 800b766:	bf00      	nop
 800b768:	e006      	b.n	800b778 <tcp_input+0x7c8>
    goto dropped;
 800b76a:	bf00      	nop
 800b76c:	e004      	b.n	800b778 <tcp_input+0x7c8>
    goto dropped;
 800b76e:	bf00      	nop
 800b770:	e002      	b.n	800b778 <tcp_input+0x7c8>
      goto dropped;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <tcp_input+0x7c8>
      goto dropped;
 800b776:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7fd fde5 	bl	8009348 <pbuf_free>
 800b77e:	e000      	b.n	800b782 <tcp_input+0x7d2>
  return;
 800b780:	bf00      	nop
}
 800b782:	3724      	adds	r7, #36	; 0x24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd90      	pop	{r4, r7, pc}
 800b788:	2000b4dc 	.word	0x2000b4dc
 800b78c:	20004af1 	.word	0x20004af1
 800b790:	2000b4c8 	.word	0x2000b4c8
 800b794:	20004aec 	.word	0x20004aec
 800b798:	20004af4 	.word	0x20004af4
 800b79c:	08013e24 	.word	0x08013e24
 800b7a0:	08013fd8 	.word	0x08013fd8
 800b7a4:	08013e70 	.word	0x08013e70
 800b7a8:	20004ac4 	.word	0x20004ac4
 800b7ac:	20004ad4 	.word	0x20004ad4
 800b7b0:	20004ae8 	.word	0x20004ae8
 800b7b4:	20004aee 	.word	0x20004aee
 800b7b8:	20004ae4 	.word	0x20004ae4
 800b7bc:	20007dc4 	.word	0x20007dc4
 800b7c0:	20007dc8 	.word	0x20007dc8

0800b7c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <tcp_input_delayed_close+0x1c>
 800b7d2:	4b17      	ldr	r3, [pc, #92]	; (800b830 <tcp_input_delayed_close+0x6c>)
 800b7d4:	f240 225a 	movw	r2, #602	; 0x25a
 800b7d8:	4916      	ldr	r1, [pc, #88]	; (800b834 <tcp_input_delayed_close+0x70>)
 800b7da:	4817      	ldr	r0, [pc, #92]	; (800b838 <tcp_input_delayed_close+0x74>)
 800b7dc:	f006 fa28 	bl	8011c30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b7e0:	4b16      	ldr	r3, [pc, #88]	; (800b83c <tcp_input_delayed_close+0x78>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 0310 	and.w	r3, r3, #16
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01c      	beq.n	800b826 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	8b5b      	ldrh	r3, [r3, #26]
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10d      	bne.n	800b814 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d008      	beq.n	800b814 <tcp_input_delayed_close+0x50>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6912      	ldr	r2, [r2, #16]
 800b80c:	f06f 010e 	mvn.w	r1, #14
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b814:	6879      	ldr	r1, [r7, #4]
 800b816:	480a      	ldr	r0, [pc, #40]	; (800b840 <tcp_input_delayed_close+0x7c>)
 800b818:	f7ff fa52 	bl	800acc0 <tcp_pcb_remove>
    tcp_free(pcb);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7fe f83f 	bl	80098a0 <tcp_free>
    return 1;
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	08013e24 	.word	0x08013e24
 800b834:	08013ff4 	.word	0x08013ff4
 800b838:	08013e70 	.word	0x08013e70
 800b83c:	20004af1 	.word	0x20004af1
 800b840:	2000b4c8 	.word	0x2000b4c8

0800b844 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b844:	b590      	push	{r4, r7, lr}
 800b846:	b08b      	sub	sp, #44	; 0x2c
 800b848:	af04      	add	r7, sp, #16
 800b84a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b84c:	4b6f      	ldr	r3, [pc, #444]	; (800ba0c <tcp_listen_input+0x1c8>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	f040 80d2 	bne.w	800b9fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <tcp_listen_input+0x2a>
 800b860:	4b6b      	ldr	r3, [pc, #428]	; (800ba10 <tcp_listen_input+0x1cc>)
 800b862:	f240 2281 	movw	r2, #641	; 0x281
 800b866:	496b      	ldr	r1, [pc, #428]	; (800ba14 <tcp_listen_input+0x1d0>)
 800b868:	486b      	ldr	r0, [pc, #428]	; (800ba18 <tcp_listen_input+0x1d4>)
 800b86a:	f006 f9e1 	bl	8011c30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b86e:	4b67      	ldr	r3, [pc, #412]	; (800ba0c <tcp_listen_input+0x1c8>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	f003 0310 	and.w	r3, r3, #16
 800b876:	2b00      	cmp	r3, #0
 800b878:	d019      	beq.n	800b8ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b87a:	4b68      	ldr	r3, [pc, #416]	; (800ba1c <tcp_listen_input+0x1d8>)
 800b87c:	6819      	ldr	r1, [r3, #0]
 800b87e:	4b68      	ldr	r3, [pc, #416]	; (800ba20 <tcp_listen_input+0x1dc>)
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	4b67      	ldr	r3, [pc, #412]	; (800ba24 <tcp_listen_input+0x1e0>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b88a:	4b67      	ldr	r3, [pc, #412]	; (800ba28 <tcp_listen_input+0x1e4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b88e:	885b      	ldrh	r3, [r3, #2]
 800b890:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b892:	4a65      	ldr	r2, [pc, #404]	; (800ba28 <tcp_listen_input+0x1e4>)
 800b894:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b896:	8812      	ldrh	r2, [r2, #0]
 800b898:	b292      	uxth	r2, r2
 800b89a:	9202      	str	r2, [sp, #8]
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	4b63      	ldr	r3, [pc, #396]	; (800ba2c <tcp_listen_input+0x1e8>)
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	4b63      	ldr	r3, [pc, #396]	; (800ba30 <tcp_listen_input+0x1ec>)
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f002 ff7e 	bl	800e7a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b8ac:	e0a9      	b.n	800ba02 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b8ae:	4b57      	ldr	r3, [pc, #348]	; (800ba0c <tcp_listen_input+0x1c8>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f003 0302 	and.w	r3, r3, #2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 80a3 	beq.w	800ba02 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	7d5b      	ldrb	r3, [r3, #21]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff f929 	bl	800ab18 <tcp_alloc>
 800b8c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d111      	bne.n	800b8f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <tcp_listen_input+0xa8>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6910      	ldr	r0, [r2, #16]
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73bb      	strb	r3, [r7, #14]
      return;
 800b8ea:	e08b      	b.n	800ba04 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b8ec:	23f0      	movs	r3, #240	; 0xf0
 800b8ee:	73bb      	strb	r3, [r7, #14]
      return;
 800b8f0:	e088      	b.n	800ba04 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b8f2:	4b50      	ldr	r3, [pc, #320]	; (800ba34 <tcp_listen_input+0x1f0>)
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b8fa:	4b4e      	ldr	r3, [pc, #312]	; (800ba34 <tcp_listen_input+0x1f0>)
 800b8fc:	691a      	ldr	r2, [r3, #16]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	8ada      	ldrh	r2, [r3, #22]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b90a:	4b47      	ldr	r3, [pc, #284]	; (800ba28 <tcp_listen_input+0x1e4>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	b29a      	uxth	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2203      	movs	r2, #3
 800b91a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b91c:	4b41      	ldr	r3, [pc, #260]	; (800ba24 <tcp_listen_input+0x1e0>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b92e:	6978      	ldr	r0, [r7, #20]
 800b930:	f7ff fa5a 	bl	800ade8 <tcp_next_iss>
 800b934:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b94e:	4b35      	ldr	r3, [pc, #212]	; (800ba24 <tcp_listen_input+0x1e0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	1e5a      	subs	r2, r3, #1
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691a      	ldr	r2, [r3, #16]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	7a5b      	ldrb	r3, [r3, #9]
 800b96a:	f003 030c 	and.w	r3, r3, #12
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7a1a      	ldrb	r2, [r3, #8]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b97c:	4b2e      	ldr	r3, [pc, #184]	; (800ba38 <tcp_listen_input+0x1f4>)
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	60da      	str	r2, [r3, #12]
 800b984:	4a2c      	ldr	r2, [pc, #176]	; (800ba38 <tcp_listen_input+0x1f4>)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	f003 f8cf 	bl	800eb2c <tcp_timer_needed>
 800b98e:	4b2b      	ldr	r3, [pc, #172]	; (800ba3c <tcp_listen_input+0x1f8>)
 800b990:	2201      	movs	r2, #1
 800b992:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b994:	6978      	ldr	r0, [r7, #20]
 800b996:	f001 fd8d 	bl	800d4b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b99a:	4b23      	ldr	r3, [pc, #140]	; (800ba28 <tcp_listen_input+0x1e4>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	89db      	ldrh	r3, [r3, #14]
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f004 fcc3 	bl	8010348 <ip4_route>
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff fa32 	bl	800ae34 <tcp_eff_send_mss_netif>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b9d8:	2112      	movs	r1, #18
 800b9da:	6978      	ldr	r0, [r7, #20]
 800b9dc:	f002 f842 	bl	800da64 <tcp_enqueue_flags>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7fe f980 	bl	8009cf4 <tcp_abandon>
      return;
 800b9f4:	e006      	b.n	800ba04 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b9f6:	6978      	ldr	r0, [r7, #20]
 800b9f8:	f002 f922 	bl	800dc40 <tcp_output>
  return;
 800b9fc:	e001      	b.n	800ba02 <tcp_listen_input+0x1be>
    return;
 800b9fe:	bf00      	nop
 800ba00:	e000      	b.n	800ba04 <tcp_listen_input+0x1c0>
  return;
 800ba02:	bf00      	nop
}
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd90      	pop	{r4, r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20004af0 	.word	0x20004af0
 800ba10:	08013e24 	.word	0x08013e24
 800ba14:	0801401c 	.word	0x0801401c
 800ba18:	08013e70 	.word	0x08013e70
 800ba1c:	20004ae8 	.word	0x20004ae8
 800ba20:	20004aee 	.word	0x20004aee
 800ba24:	20004ae4 	.word	0x20004ae4
 800ba28:	20004ad4 	.word	0x20004ad4
 800ba2c:	20007dc4 	.word	0x20007dc4
 800ba30:	20007dc8 	.word	0x20007dc8
 800ba34:	20007db4 	.word	0x20007db4
 800ba38:	2000b4c8 	.word	0x2000b4c8
 800ba3c:	2000b4c4 	.word	0x2000b4c4

0800ba40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af04      	add	r7, sp, #16
 800ba46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ba48:	4b2f      	ldr	r3, [pc, #188]	; (800bb08 <tcp_timewait_input+0xc8>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d153      	bne.n	800bafc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <tcp_timewait_input+0x28>
 800ba5a:	4b2c      	ldr	r3, [pc, #176]	; (800bb0c <tcp_timewait_input+0xcc>)
 800ba5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ba60:	492b      	ldr	r1, [pc, #172]	; (800bb10 <tcp_timewait_input+0xd0>)
 800ba62:	482c      	ldr	r0, [pc, #176]	; (800bb14 <tcp_timewait_input+0xd4>)
 800ba64:	f006 f8e4 	bl	8011c30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ba68:	4b27      	ldr	r3, [pc, #156]	; (800bb08 <tcp_timewait_input+0xc8>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d02a      	beq.n	800baca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ba74:	4b28      	ldr	r3, [pc, #160]	; (800bb18 <tcp_timewait_input+0xd8>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	db2d      	blt.n	800bade <tcp_timewait_input+0x9e>
 800ba82:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <tcp_timewait_input+0xd8>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	6879      	ldr	r1, [r7, #4]
 800ba8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ba8e:	440b      	add	r3, r1
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dc23      	bgt.n	800bade <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba96:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <tcp_timewait_input+0xdc>)
 800ba98:	6819      	ldr	r1, [r3, #0]
 800ba9a:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <tcp_timewait_input+0xe0>)
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4b1d      	ldr	r3, [pc, #116]	; (800bb18 <tcp_timewait_input+0xd8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baa6:	4b1f      	ldr	r3, [pc, #124]	; (800bb24 <tcp_timewait_input+0xe4>)
 800baa8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baaa:	885b      	ldrh	r3, [r3, #2]
 800baac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baae:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <tcp_timewait_input+0xe4>)
 800bab0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bab2:	8812      	ldrh	r2, [r2, #0]
 800bab4:	b292      	uxth	r2, r2
 800bab6:	9202      	str	r2, [sp, #8]
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	4b1b      	ldr	r3, [pc, #108]	; (800bb28 <tcp_timewait_input+0xe8>)
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4b1b      	ldr	r3, [pc, #108]	; (800bb2c <tcp_timewait_input+0xec>)
 800bac0:	4602      	mov	r2, r0
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f002 fe70 	bl	800e7a8 <tcp_rst>
      return;
 800bac8:	e01b      	b.n	800bb02 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <tcp_timewait_input+0xc8>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bad6:	4b16      	ldr	r3, [pc, #88]	; (800bb30 <tcp_timewait_input+0xf0>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bade:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <tcp_timewait_input+0xe0>)
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00c      	beq.n	800bb00 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	8b5b      	ldrh	r3, [r3, #26]
 800baea:	f043 0302 	orr.w	r3, r3, #2
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 f8a3 	bl	800dc40 <tcp_output>
  }
  return;
 800bafa:	e001      	b.n	800bb00 <tcp_timewait_input+0xc0>
    return;
 800bafc:	bf00      	nop
 800bafe:	e000      	b.n	800bb02 <tcp_timewait_input+0xc2>
  return;
 800bb00:	bf00      	nop
}
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20004af0 	.word	0x20004af0
 800bb0c:	08013e24 	.word	0x08013e24
 800bb10:	0801403c 	.word	0x0801403c
 800bb14:	08013e70 	.word	0x08013e70
 800bb18:	20004ae4 	.word	0x20004ae4
 800bb1c:	20004ae8 	.word	0x20004ae8
 800bb20:	20004aee 	.word	0x20004aee
 800bb24:	20004ad4 	.word	0x20004ad4
 800bb28:	20007dc4 	.word	0x20007dc4
 800bb2c:	20007dc8 	.word	0x20007dc8
 800bb30:	2000b4cc 	.word	0x2000b4cc

0800bb34 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bb34:	b590      	push	{r4, r7, lr}
 800bb36:	b08d      	sub	sp, #52	; 0x34
 800bb38:	af04      	add	r7, sp, #16
 800bb3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <tcp_process+0x24>
 800bb4a:	4ba5      	ldr	r3, [pc, #660]	; (800bde0 <tcp_process+0x2ac>)
 800bb4c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bb50:	49a4      	ldr	r1, [pc, #656]	; (800bde4 <tcp_process+0x2b0>)
 800bb52:	48a5      	ldr	r0, [pc, #660]	; (800bde8 <tcp_process+0x2b4>)
 800bb54:	f006 f86c 	bl	8011c30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bb58:	4ba4      	ldr	r3, [pc, #656]	; (800bdec <tcp_process+0x2b8>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d04e      	beq.n	800bc02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	7d1b      	ldrb	r3, [r3, #20]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d108      	bne.n	800bb7e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb70:	4b9f      	ldr	r3, [pc, #636]	; (800bdf0 <tcp_process+0x2bc>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d123      	bne.n	800bbc0 <tcp_process+0x8c>
        acceptable = 1;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	76fb      	strb	r3, [r7, #27]
 800bb7c:	e020      	b.n	800bbc0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb82:	4b9c      	ldr	r3, [pc, #624]	; (800bdf4 <tcp_process+0x2c0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d102      	bne.n	800bb90 <tcp_process+0x5c>
        acceptable = 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	76fb      	strb	r3, [r7, #27]
 800bb8e:	e017      	b.n	800bbc0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bb90:	4b98      	ldr	r3, [pc, #608]	; (800bdf4 <tcp_process+0x2c0>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	db10      	blt.n	800bbc0 <tcp_process+0x8c>
 800bb9e:	4b95      	ldr	r3, [pc, #596]	; (800bdf4 <tcp_process+0x2c0>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbaa:	440b      	add	r3, r1
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dc06      	bgt.n	800bbc0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8b5b      	ldrh	r3, [r3, #26]
 800bbb6:	f043 0302 	orr.w	r3, r3, #2
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bbc0:	7efb      	ldrb	r3, [r7, #27]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01b      	beq.n	800bbfe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	7d1b      	ldrb	r3, [r3, #20]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <tcp_process+0xa8>
 800bbce:	4b84      	ldr	r3, [pc, #528]	; (800bde0 <tcp_process+0x2ac>)
 800bbd0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bbd4:	4988      	ldr	r1, [pc, #544]	; (800bdf8 <tcp_process+0x2c4>)
 800bbd6:	4884      	ldr	r0, [pc, #528]	; (800bde8 <tcp_process+0x2b4>)
 800bbd8:	f006 f82a 	bl	8011c30 <iprintf>
      recv_flags |= TF_RESET;
 800bbdc:	4b87      	ldr	r3, [pc, #540]	; (800bdfc <tcp_process+0x2c8>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	f043 0308 	orr.w	r3, r3, #8
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	4b85      	ldr	r3, [pc, #532]	; (800bdfc <tcp_process+0x2c8>)
 800bbe8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8b5b      	ldrh	r3, [r3, #26]
 800bbee:	f023 0301 	bic.w	r3, r3, #1
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bbf8:	f06f 030d 	mvn.w	r3, #13
 800bbfc:	e37a      	b.n	800c2f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e378      	b.n	800c2f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc02:	4b7a      	ldr	r3, [pc, #488]	; (800bdec <tcp_process+0x2b8>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	f003 0302 	and.w	r3, r3, #2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d010      	beq.n	800bc30 <tcp_process+0xfc>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d00c      	beq.n	800bc30 <tcp_process+0xfc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	7d1b      	ldrb	r3, [r3, #20]
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d008      	beq.n	800bc30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	8b5b      	ldrh	r3, [r3, #26]
 800bc22:	f043 0302 	orr.w	r3, r3, #2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e361      	b.n	800c2f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	8b5b      	ldrh	r3, [r3, #26]
 800bc34:	f003 0310 	and.w	r3, r3, #16
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bc3c:	4b70      	ldr	r3, [pc, #448]	; (800be00 <tcp_process+0x2cc>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 fc2d 	bl	800d4b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	7d1b      	ldrb	r3, [r3, #20]
 800bc5e:	3b02      	subs	r3, #2
 800bc60:	2b07      	cmp	r3, #7
 800bc62:	f200 8337 	bhi.w	800c2d4 <tcp_process+0x7a0>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <tcp_process+0x138>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bebd 	.word	0x0800bebd
 800bc74:	0800c035 	.word	0x0800c035
 800bc78:	0800c05f 	.word	0x0800c05f
 800bc7c:	0800c183 	.word	0x0800c183
 800bc80:	0800c035 	.word	0x0800c035
 800bc84:	0800c20f 	.word	0x0800c20f
 800bc88:	0800c29f 	.word	0x0800c29f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bc8c:	4b57      	ldr	r3, [pc, #348]	; (800bdec <tcp_process+0x2b8>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 0310 	and.w	r3, r3, #16
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 80e4 	beq.w	800be62 <tcp_process+0x32e>
 800bc9a:	4b54      	ldr	r3, [pc, #336]	; (800bdec <tcp_process+0x2b8>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 80dd 	beq.w	800be62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	4b50      	ldr	r3, [pc, #320]	; (800bdf0 <tcp_process+0x2bc>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	f040 80d5 	bne.w	800be62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bcb8:	4b4e      	ldr	r3, [pc, #312]	; (800bdf4 <tcp_process+0x2c0>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bcca:	4b49      	ldr	r3, [pc, #292]	; (800bdf0 <tcp_process+0x2bc>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bcd2:	4b4c      	ldr	r3, [pc, #304]	; (800be04 <tcp_process+0x2d0>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	89db      	ldrh	r3, [r3, #14]
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bcec:	4b41      	ldr	r3, [pc, #260]	; (800bdf4 <tcp_process+0x2c0>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4618      	mov	r0, r3
 800bd06:	f004 fb1f 	bl	8010348 <ip4_route>
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	461a      	mov	r2, r3
 800bd12:	4620      	mov	r0, r4
 800bd14:	f7ff f88e 	bl	800ae34 <tcp_eff_send_mss_netif>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd24:	009a      	lsls	r2, r3, #2
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd30:	428b      	cmp	r3, r1
 800bd32:	bf38      	it	cc
 800bd34:	460b      	movcc	r3, r1
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d204      	bcs.n	800bd44 <tcp_process+0x210>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	e00d      	b.n	800bd60 <tcp_process+0x22c>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d904      	bls.n	800bd5c <tcp_process+0x228>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	e001      	b.n	800bd60 <tcp_process+0x22c>
 800bd5c:	f241 131c 	movw	r3, #4380	; 0x111c
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d106      	bne.n	800bd7e <tcp_process+0x24a>
 800bd70:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <tcp_process+0x2ac>)
 800bd72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bd76:	4924      	ldr	r1, [pc, #144]	; (800be08 <tcp_process+0x2d4>)
 800bd78:	481b      	ldr	r0, [pc, #108]	; (800bde8 <tcp_process+0x2b4>)
 800bd7a:	f005 ff59 	bl	8011c30 <iprintf>
        --pcb->snd_queuelen;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d111      	bne.n	800bdbe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d106      	bne.n	800bdb4 <tcp_process+0x280>
 800bda6:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <tcp_process+0x2ac>)
 800bda8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bdac:	4917      	ldr	r1, [pc, #92]	; (800be0c <tcp_process+0x2d8>)
 800bdae:	480e      	ldr	r0, [pc, #56]	; (800bde8 <tcp_process+0x2b4>)
 800bdb0:	f005 ff3e 	bl	8011c30 <iprintf>
          pcb->unsent = rseg->next;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdbc:	e003      	b.n	800bdc6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bdc6:	69f8      	ldr	r0, [r7, #28]
 800bdc8:	f7fe fd3d 	bl	800a846 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d11d      	bne.n	800be10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdda:	861a      	strh	r2, [r3, #48]	; 0x30
 800bddc:	e01f      	b.n	800be1e <tcp_process+0x2ea>
 800bdde:	bf00      	nop
 800bde0:	08013e24 	.word	0x08013e24
 800bde4:	0801405c 	.word	0x0801405c
 800bde8:	08013e70 	.word	0x08013e70
 800bdec:	20004af0 	.word	0x20004af0
 800bdf0:	20004ae8 	.word	0x20004ae8
 800bdf4:	20004ae4 	.word	0x20004ae4
 800bdf8:	08014078 	.word	0x08014078
 800bdfc:	20004af1 	.word	0x20004af1
 800be00:	2000b4cc 	.word	0x2000b4cc
 800be04:	20004ad4 	.word	0x20004ad4
 800be08:	08014098 	.word	0x08014098
 800be0c:	080140b0 	.word	0x080140b0
        } else {
          pcb->rtime = 0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <tcp_process+0x30a>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	6910      	ldr	r0, [r2, #16]
 800be32:	2200      	movs	r2, #0
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	4798      	blx	r3
 800be38:	4603      	mov	r3, r0
 800be3a:	76bb      	strb	r3, [r7, #26]
 800be3c:	e001      	b.n	800be42 <tcp_process+0x30e>
 800be3e:	2300      	movs	r3, #0
 800be40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800be42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be46:	f113 0f0d 	cmn.w	r3, #13
 800be4a:	d102      	bne.n	800be52 <tcp_process+0x31e>
          return ERR_ABRT;
 800be4c:	f06f 030c 	mvn.w	r3, #12
 800be50:	e250      	b.n	800c2f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	8b5b      	ldrh	r3, [r3, #26]
 800be56:	f043 0302 	orr.w	r3, r3, #2
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800be60:	e23a      	b.n	800c2d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800be62:	4b9d      	ldr	r3, [pc, #628]	; (800c0d8 <tcp_process+0x5a4>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f003 0310 	and.w	r3, r3, #16
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 8234 	beq.w	800c2d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be70:	4b9a      	ldr	r3, [pc, #616]	; (800c0dc <tcp_process+0x5a8>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	4b9a      	ldr	r3, [pc, #616]	; (800c0e0 <tcp_process+0x5ac>)
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	461a      	mov	r2, r3
 800be7a:	4b9a      	ldr	r3, [pc, #616]	; (800c0e4 <tcp_process+0x5b0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be80:	4b99      	ldr	r3, [pc, #612]	; (800c0e8 <tcp_process+0x5b4>)
 800be82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be84:	885b      	ldrh	r3, [r3, #2]
 800be86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be88:	4a97      	ldr	r2, [pc, #604]	; (800c0e8 <tcp_process+0x5b4>)
 800be8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be8c:	8812      	ldrh	r2, [r2, #0]
 800be8e:	b292      	uxth	r2, r2
 800be90:	9202      	str	r2, [sp, #8]
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	4b95      	ldr	r3, [pc, #596]	; (800c0ec <tcp_process+0x5b8>)
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	4b95      	ldr	r3, [pc, #596]	; (800c0f0 <tcp_process+0x5bc>)
 800be9a:	4602      	mov	r2, r0
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f002 fc83 	bl	800e7a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bea8:	2b05      	cmp	r3, #5
 800beaa:	f200 8215 	bhi.w	800c2d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f002 fa4d 	bl	800e354 <tcp_rexmit_rto>
      break;
 800beba:	e20d      	b.n	800c2d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bebc:	4b86      	ldr	r3, [pc, #536]	; (800c0d8 <tcp_process+0x5a4>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80a1 	beq.w	800c00c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beca:	4b84      	ldr	r3, [pc, #528]	; (800c0dc <tcp_process+0x5a8>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	3b01      	subs	r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	db7e      	blt.n	800bfd8 <tcp_process+0x4a4>
 800beda:	4b80      	ldr	r3, [pc, #512]	; (800c0dc <tcp_process+0x5a8>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dc77      	bgt.n	800bfd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2204      	movs	r2, #4
 800beec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d102      	bne.n	800befc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bef6:	23fa      	movs	r3, #250	; 0xfa
 800bef8:	76bb      	strb	r3, [r7, #26]
 800befa:	e01d      	b.n	800bf38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <tcp_process+0x3e0>
 800bf06:	4b7b      	ldr	r3, [pc, #492]	; (800c0f4 <tcp_process+0x5c0>)
 800bf08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bf0c:	497a      	ldr	r1, [pc, #488]	; (800c0f8 <tcp_process+0x5c4>)
 800bf0e:	487b      	ldr	r0, [pc, #492]	; (800c0fc <tcp_process+0x5c8>)
 800bf10:	f005 fe8e 	bl	8011c30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <tcp_process+0x400>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6910      	ldr	r0, [r2, #16]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	76bb      	strb	r3, [r7, #26]
 800bf32:	e001      	b.n	800bf38 <tcp_process+0x404>
 800bf34:	23f0      	movs	r3, #240	; 0xf0
 800bf36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bf38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bf40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf44:	f113 0f0d 	cmn.w	r3, #13
 800bf48:	d002      	beq.n	800bf50 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7fd ff90 	bl	8009e70 <tcp_abort>
            }
            return ERR_ABRT;
 800bf50:	f06f 030c 	mvn.w	r3, #12
 800bf54:	e1ce      	b.n	800c2f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fae0 	bl	800c51c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bf5c:	4b68      	ldr	r3, [pc, #416]	; (800c100 <tcp_process+0x5cc>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d005      	beq.n	800bf70 <tcp_process+0x43c>
            recv_acked--;
 800bf64:	4b66      	ldr	r3, [pc, #408]	; (800c100 <tcp_process+0x5cc>)
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	4b64      	ldr	r3, [pc, #400]	; (800c100 <tcp_process+0x5cc>)
 800bf6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf74:	009a      	lsls	r2, r3, #2
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800bf80:	428b      	cmp	r3, r1
 800bf82:	bf38      	it	cc
 800bf84:	460b      	movcc	r3, r1
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d204      	bcs.n	800bf94 <tcp_process+0x460>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	e00d      	b.n	800bfb0 <tcp_process+0x47c>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d904      	bls.n	800bfac <tcp_process+0x478>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	e001      	b.n	800bfb0 <tcp_process+0x47c>
 800bfac:	f241 131c 	movw	r3, #4380	; 0x111c
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bfb6:	4b53      	ldr	r3, [pc, #332]	; (800c104 <tcp_process+0x5d0>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f003 0320 	and.w	r3, r3, #32
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d037      	beq.n	800c032 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	8b5b      	ldrh	r3, [r3, #26]
 800bfc6:	f043 0302 	orr.w	r3, r3, #2
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2207      	movs	r2, #7
 800bfd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bfd6:	e02c      	b.n	800c032 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfd8:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <tcp_process+0x5a8>)
 800bfda:	6819      	ldr	r1, [r3, #0]
 800bfdc:	4b40      	ldr	r3, [pc, #256]	; (800c0e0 <tcp_process+0x5ac>)
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4b40      	ldr	r3, [pc, #256]	; (800c0e4 <tcp_process+0x5b0>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfe8:	4b3f      	ldr	r3, [pc, #252]	; (800c0e8 <tcp_process+0x5b4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bff0:	4a3d      	ldr	r2, [pc, #244]	; (800c0e8 <tcp_process+0x5b4>)
 800bff2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bff4:	8812      	ldrh	r2, [r2, #0]
 800bff6:	b292      	uxth	r2, r2
 800bff8:	9202      	str	r2, [sp, #8]
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	4b3b      	ldr	r3, [pc, #236]	; (800c0ec <tcp_process+0x5b8>)
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	4b3b      	ldr	r3, [pc, #236]	; (800c0f0 <tcp_process+0x5bc>)
 800c002:	4602      	mov	r2, r0
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f002 fbcf 	bl	800e7a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c00a:	e167      	b.n	800c2dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c00c:	4b32      	ldr	r3, [pc, #200]	; (800c0d8 <tcp_process+0x5a4>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 8161 	beq.w	800c2dc <tcp_process+0x7a8>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	1e5a      	subs	r2, r3, #1
 800c020:	4b30      	ldr	r3, [pc, #192]	; (800c0e4 <tcp_process+0x5b0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	f040 8159 	bne.w	800c2dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f002 f9b4 	bl	800e398 <tcp_rexmit>
      break;
 800c030:	e154      	b.n	800c2dc <tcp_process+0x7a8>
 800c032:	e153      	b.n	800c2dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fa71 	bl	800c51c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c03a:	4b32      	ldr	r3, [pc, #200]	; (800c104 <tcp_process+0x5d0>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 814c 	beq.w	800c2e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	8b5b      	ldrh	r3, [r3, #26]
 800c04c:	f043 0302 	orr.w	r3, r3, #2
 800c050:	b29a      	uxth	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2207      	movs	r2, #7
 800c05a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c05c:	e140      	b.n	800c2e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fa5c 	bl	800c51c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c064:	4b27      	ldr	r3, [pc, #156]	; (800c104 <tcp_process+0x5d0>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 0320 	and.w	r3, r3, #32
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d071      	beq.n	800c154 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c070:	4b19      	ldr	r3, [pc, #100]	; (800c0d8 <tcp_process+0x5a4>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d060      	beq.n	800c13e <tcp_process+0x60a>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <tcp_process+0x5a8>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d15a      	bne.n	800c13e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d156      	bne.n	800c13e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8b5b      	ldrh	r3, [r3, #26]
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7fe fdbe 	bl	800ac20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c0a4:	4b18      	ldr	r3, [pc, #96]	; (800c108 <tcp_process+0x5d4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d105      	bne.n	800c0ba <tcp_process+0x586>
 800c0ae:	4b16      	ldr	r3, [pc, #88]	; (800c108 <tcp_process+0x5d4>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	4a14      	ldr	r2, [pc, #80]	; (800c108 <tcp_process+0x5d4>)
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	e02e      	b.n	800c118 <tcp_process+0x5e4>
 800c0ba:	4b13      	ldr	r3, [pc, #76]	; (800c108 <tcp_process+0x5d4>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	e027      	b.n	800c112 <tcp_process+0x5de>
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d11f      	bne.n	800c10c <tcp_process+0x5d8>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	60da      	str	r2, [r3, #12]
 800c0d4:	e020      	b.n	800c118 <tcp_process+0x5e4>
 800c0d6:	bf00      	nop
 800c0d8:	20004af0 	.word	0x20004af0
 800c0dc:	20004ae8 	.word	0x20004ae8
 800c0e0:	20004aee 	.word	0x20004aee
 800c0e4:	20004ae4 	.word	0x20004ae4
 800c0e8:	20004ad4 	.word	0x20004ad4
 800c0ec:	20007dc4 	.word	0x20007dc4
 800c0f0:	20007dc8 	.word	0x20007dc8
 800c0f4:	08013e24 	.word	0x08013e24
 800c0f8:	080140c4 	.word	0x080140c4
 800c0fc:	08013e70 	.word	0x08013e70
 800c100:	20004aec 	.word	0x20004aec
 800c104:	20004af1 	.word	0x20004af1
 800c108:	2000b4c8 	.word	0x2000b4c8
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1d4      	bne.n	800c0c2 <tcp_process+0x58e>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	4b77      	ldr	r3, [pc, #476]	; (800c2fc <tcp_process+0x7c8>)
 800c120:	2201      	movs	r2, #1
 800c122:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	220a      	movs	r2, #10
 800c128:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c12a:	4b75      	ldr	r3, [pc, #468]	; (800c300 <tcp_process+0x7cc>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	4a73      	ldr	r2, [pc, #460]	; (800c300 <tcp_process+0x7cc>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	f002 fcf8 	bl	800eb2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c13c:	e0d2      	b.n	800c2e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	8b5b      	ldrh	r3, [r3, #26]
 800c142:	f043 0302 	orr.w	r3, r3, #2
 800c146:	b29a      	uxth	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2208      	movs	r2, #8
 800c150:	751a      	strb	r2, [r3, #20]
      break;
 800c152:	e0c7      	b.n	800c2e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c154:	4b6b      	ldr	r3, [pc, #428]	; (800c304 <tcp_process+0x7d0>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	f003 0310 	and.w	r3, r3, #16
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80c1 	beq.w	800c2e4 <tcp_process+0x7b0>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c166:	4b68      	ldr	r3, [pc, #416]	; (800c308 <tcp_process+0x7d4>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	f040 80ba 	bne.w	800c2e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 80b5 	bne.w	800c2e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2206      	movs	r2, #6
 800c17e:	751a      	strb	r2, [r3, #20]
      break;
 800c180:	e0b0      	b.n	800c2e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f9ca 	bl	800c51c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c188:	4b60      	ldr	r3, [pc, #384]	; (800c30c <tcp_process+0x7d8>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	f003 0320 	and.w	r3, r3, #32
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80a9 	beq.w	800c2e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8b5b      	ldrh	r3, [r3, #26]
 800c19a:	f043 0302 	orr.w	r3, r3, #2
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7fe fd3b 	bl	800ac20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c1aa:	4b59      	ldr	r3, [pc, #356]	; (800c310 <tcp_process+0x7dc>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d105      	bne.n	800c1c0 <tcp_process+0x68c>
 800c1b4:	4b56      	ldr	r3, [pc, #344]	; (800c310 <tcp_process+0x7dc>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	4a55      	ldr	r2, [pc, #340]	; (800c310 <tcp_process+0x7dc>)
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	e013      	b.n	800c1e8 <tcp_process+0x6b4>
 800c1c0:	4b53      	ldr	r3, [pc, #332]	; (800c310 <tcp_process+0x7dc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	e00c      	b.n	800c1e2 <tcp_process+0x6ae>
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d104      	bne.n	800c1dc <tcp_process+0x6a8>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	e005      	b.n	800c1e8 <tcp_process+0x6b4>
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	613b      	str	r3, [r7, #16]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1ef      	bne.n	800c1c8 <tcp_process+0x694>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	60da      	str	r2, [r3, #12]
 800c1ee:	4b43      	ldr	r3, [pc, #268]	; (800c2fc <tcp_process+0x7c8>)
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	220a      	movs	r2, #10
 800c1f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c1fa:	4b41      	ldr	r3, [pc, #260]	; (800c300 <tcp_process+0x7cc>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	60da      	str	r2, [r3, #12]
 800c202:	4a3f      	ldr	r2, [pc, #252]	; (800c300 <tcp_process+0x7cc>)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	f002 fc90 	bl	800eb2c <tcp_timer_needed>
      }
      break;
 800c20c:	e06c      	b.n	800c2e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f984 	bl	800c51c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c214:	4b3b      	ldr	r3, [pc, #236]	; (800c304 <tcp_process+0x7d0>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f003 0310 	and.w	r3, r3, #16
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d065      	beq.n	800c2ec <tcp_process+0x7b8>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c224:	4b38      	ldr	r3, [pc, #224]	; (800c308 <tcp_process+0x7d4>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d15f      	bne.n	800c2ec <tcp_process+0x7b8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d15b      	bne.n	800c2ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7fe fcf3 	bl	800ac20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c23a:	4b35      	ldr	r3, [pc, #212]	; (800c310 <tcp_process+0x7dc>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	d105      	bne.n	800c250 <tcp_process+0x71c>
 800c244:	4b32      	ldr	r3, [pc, #200]	; (800c310 <tcp_process+0x7dc>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	4a31      	ldr	r2, [pc, #196]	; (800c310 <tcp_process+0x7dc>)
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	e013      	b.n	800c278 <tcp_process+0x744>
 800c250:	4b2f      	ldr	r3, [pc, #188]	; (800c310 <tcp_process+0x7dc>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e00c      	b.n	800c272 <tcp_process+0x73e>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d104      	bne.n	800c26c <tcp_process+0x738>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	e005      	b.n	800c278 <tcp_process+0x744>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ef      	bne.n	800c258 <tcp_process+0x724>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	4b1f      	ldr	r3, [pc, #124]	; (800c2fc <tcp_process+0x7c8>)
 800c280:	2201      	movs	r2, #1
 800c282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	220a      	movs	r2, #10
 800c288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c28a:	4b1d      	ldr	r3, [pc, #116]	; (800c300 <tcp_process+0x7cc>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60da      	str	r2, [r3, #12]
 800c292:	4a1b      	ldr	r2, [pc, #108]	; (800c300 <tcp_process+0x7cc>)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	f002 fc48 	bl	800eb2c <tcp_timer_needed>
      }
      break;
 800c29c:	e026      	b.n	800c2ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f93c 	bl	800c51c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c2a4:	4b17      	ldr	r3, [pc, #92]	; (800c304 <tcp_process+0x7d0>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	f003 0310 	and.w	r3, r3, #16
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01f      	beq.n	800c2f0 <tcp_process+0x7bc>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2b4:	4b14      	ldr	r3, [pc, #80]	; (800c308 <tcp_process+0x7d4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d119      	bne.n	800c2f0 <tcp_process+0x7bc>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d115      	bne.n	800c2f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <tcp_process+0x7d8>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	f043 0310 	orr.w	r3, r3, #16
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <tcp_process+0x7d8>)
 800c2d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c2d2:	e00d      	b.n	800c2f0 <tcp_process+0x7bc>
    default:
      break;
 800c2d4:	bf00      	nop
 800c2d6:	e00c      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2d8:	bf00      	nop
 800c2da:	e00a      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2dc:	bf00      	nop
 800c2de:	e008      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2e0:	bf00      	nop
 800c2e2:	e006      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2e4:	bf00      	nop
 800c2e6:	e004      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2e8:	bf00      	nop
 800c2ea:	e002      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2ec:	bf00      	nop
 800c2ee:	e000      	b.n	800c2f2 <tcp_process+0x7be>
      break;
 800c2f0:	bf00      	nop
  }
  return ERR_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3724      	adds	r7, #36	; 0x24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd90      	pop	{r4, r7, pc}
 800c2fc:	2000b4c4 	.word	0x2000b4c4
 800c300:	2000b4d8 	.word	0x2000b4d8
 800c304:	20004af0 	.word	0x20004af0
 800c308:	20004ae8 	.word	0x20004ae8
 800c30c:	20004af1 	.word	0x20004af1
 800c310:	2000b4c8 	.word	0x2000b4c8

0800c314 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c314:	b590      	push	{r4, r7, lr}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <tcp_oos_insert_segment+0x1e>
 800c324:	4b3b      	ldr	r3, [pc, #236]	; (800c414 <tcp_oos_insert_segment+0x100>)
 800c326:	f240 421f 	movw	r2, #1055	; 0x41f
 800c32a:	493b      	ldr	r1, [pc, #236]	; (800c418 <tcp_oos_insert_segment+0x104>)
 800c32c:	483b      	ldr	r0, [pc, #236]	; (800c41c <tcp_oos_insert_segment+0x108>)
 800c32e:	f005 fc7f 	bl	8011c30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	899b      	ldrh	r3, [r3, #12]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fb fc58 	bl	8007bf0 <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d028      	beq.n	800c39e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c34c:	6838      	ldr	r0, [r7, #0]
 800c34e:	f7fe fa65 	bl	800a81c <tcp_segs_free>
    next = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	603b      	str	r3, [r7, #0]
 800c356:	e056      	b.n	800c406 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	899b      	ldrh	r3, [r3, #12]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	4618      	mov	r0, r3
 800c362:	f7fb fc45 	bl	8007bf0 <lwip_htons>
 800c366:	4603      	mov	r3, r0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00d      	beq.n	800c38e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	899b      	ldrh	r3, [r3, #12]
 800c378:	b29c      	uxth	r4, r3
 800c37a:	2001      	movs	r0, #1
 800c37c:	f7fb fc38 	bl	8007bf0 <lwip_htons>
 800c380:	4603      	mov	r3, r0
 800c382:	461a      	mov	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	4322      	orrs	r2, r4
 800c38a:	b292      	uxth	r2, r2
 800c38c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7fe fa54 	bl	800a846 <tcp_seg_free>
    while (next &&
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00e      	beq.n	800c3c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	891b      	ldrh	r3, [r3, #8]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	4b1d      	ldr	r3, [pc, #116]	; (800c420 <tcp_oos_insert_segment+0x10c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	441a      	add	r2, r3
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	6839      	ldr	r1, [r7, #0]
 800c3b8:	8909      	ldrh	r1, [r1, #8]
 800c3ba:	440b      	add	r3, r1
 800c3bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	daca      	bge.n	800c358 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d01e      	beq.n	800c406 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	891b      	ldrh	r3, [r3, #8]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	4b14      	ldr	r3, [pc, #80]	; (800c420 <tcp_oos_insert_segment+0x10c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	441a      	add	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd12      	ble.n	800c406 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <tcp_oos_insert_segment+0x10c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	891b      	ldrh	r3, [r3, #8]
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f7fc fe1b 	bl	800903c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	601a      	str	r2, [r3, #0]
}
 800c40c:	bf00      	nop
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	bd90      	pop	{r4, r7, pc}
 800c414:	08013e24 	.word	0x08013e24
 800c418:	080140e4 	.word	0x080140e4
 800c41c:	08013e70 	.word	0x08013e70
 800c420:	20004ae4 	.word	0x20004ae4

0800c424 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c424:	b5b0      	push	{r4, r5, r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c432:	e03e      	b.n	800c4b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd f80e 	bl	8009464 <pbuf_clen>
 800c448:	4603      	mov	r3, r0
 800c44a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c452:	8a7a      	ldrh	r2, [r7, #18]
 800c454:	429a      	cmp	r2, r3
 800c456:	d906      	bls.n	800c466 <tcp_free_acked_segments+0x42>
 800c458:	4b2a      	ldr	r3, [pc, #168]	; (800c504 <tcp_free_acked_segments+0xe0>)
 800c45a:	f240 4257 	movw	r2, #1111	; 0x457
 800c45e:	492a      	ldr	r1, [pc, #168]	; (800c508 <tcp_free_acked_segments+0xe4>)
 800c460:	482a      	ldr	r0, [pc, #168]	; (800c50c <tcp_free_acked_segments+0xe8>)
 800c462:	f005 fbe5 	bl	8011c30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c46c:	8a7b      	ldrh	r3, [r7, #18]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	b29a      	uxth	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	891a      	ldrh	r2, [r3, #8]
 800c47c:	4b24      	ldr	r3, [pc, #144]	; (800c510 <tcp_free_acked_segments+0xec>)
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	4413      	add	r3, r2
 800c482:	b29a      	uxth	r2, r3
 800c484:	4b22      	ldr	r3, [pc, #136]	; (800c510 <tcp_free_acked_segments+0xec>)
 800c486:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c488:	6978      	ldr	r0, [r7, #20]
 800c48a:	f7fe f9dc 	bl	800a846 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00c      	beq.n	800c4b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <tcp_free_acked_segments+0x8e>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <tcp_free_acked_segments+0x8e>
 800c4a4:	4b17      	ldr	r3, [pc, #92]	; (800c504 <tcp_free_acked_segments+0xe0>)
 800c4a6:	f240 4261 	movw	r2, #1121	; 0x461
 800c4aa:	491a      	ldr	r1, [pc, #104]	; (800c514 <tcp_free_acked_segments+0xf0>)
 800c4ac:	4817      	ldr	r0, [pc, #92]	; (800c50c <tcp_free_acked_segments+0xe8>)
 800c4ae:	f005 fbbf 	bl	8011c30 <iprintf>
  while (seg_list != NULL &&
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d020      	beq.n	800c4fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fb fbab 	bl	8007c1a <lwip_htonl>
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	891b      	ldrh	r3, [r3, #8]
 800c4ca:	461d      	mov	r5, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	899b      	ldrh	r3, [r3, #12]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fb fb8b 	bl	8007bf0 <lwip_htons>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0303 	and.w	r3, r3, #3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <tcp_free_acked_segments+0xc6>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e000      	b.n	800c4ec <tcp_free_acked_segments+0xc8>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	442b      	add	r3, r5
 800c4ee:	18e2      	adds	r2, r4, r3
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <tcp_free_acked_segments+0xf4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	dd9c      	ble.n	800c434 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bdb0      	pop	{r4, r5, r7, pc}
 800c504:	08013e24 	.word	0x08013e24
 800c508:	0801410c 	.word	0x0801410c
 800c50c:	08013e70 	.word	0x08013e70
 800c510:	20004aec 	.word	0x20004aec
 800c514:	08014134 	.word	0x08014134
 800c518:	20004ae8 	.word	0x20004ae8

0800c51c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c51c:	b5b0      	push	{r4, r5, r7, lr}
 800c51e:	b094      	sub	sp, #80	; 0x50
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <tcp_receive+0x20>
 800c52e:	4ba6      	ldr	r3, [pc, #664]	; (800c7c8 <tcp_receive+0x2ac>)
 800c530:	f240 427b 	movw	r2, #1147	; 0x47b
 800c534:	49a5      	ldr	r1, [pc, #660]	; (800c7cc <tcp_receive+0x2b0>)
 800c536:	48a6      	ldr	r0, [pc, #664]	; (800c7d0 <tcp_receive+0x2b4>)
 800c538:	f005 fb7a 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7d1b      	ldrb	r3, [r3, #20]
 800c540:	2b03      	cmp	r3, #3
 800c542:	d806      	bhi.n	800c552 <tcp_receive+0x36>
 800c544:	4ba0      	ldr	r3, [pc, #640]	; (800c7c8 <tcp_receive+0x2ac>)
 800c546:	f240 427c 	movw	r2, #1148	; 0x47c
 800c54a:	49a2      	ldr	r1, [pc, #648]	; (800c7d4 <tcp_receive+0x2b8>)
 800c54c:	48a0      	ldr	r0, [pc, #640]	; (800c7d0 <tcp_receive+0x2b4>)
 800c54e:	f005 fb6f 	bl	8011c30 <iprintf>

  if (flags & TCP_ACK) {
 800c552:	4ba1      	ldr	r3, [pc, #644]	; (800c7d8 <tcp_receive+0x2bc>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f003 0310 	and.w	r3, r3, #16
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 8263 	beq.w	800ca26 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c566:	461a      	mov	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56c:	4413      	add	r3, r2
 800c56e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c574:	4b99      	ldr	r3, [pc, #612]	; (800c7dc <tcp_receive+0x2c0>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	db1b      	blt.n	800c5b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c582:	4b96      	ldr	r3, [pc, #600]	; (800c7dc <tcp_receive+0x2c0>)
 800c584:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c586:	429a      	cmp	r2, r3
 800c588:	d106      	bne.n	800c598 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c58e:	4b94      	ldr	r3, [pc, #592]	; (800c7e0 <tcp_receive+0x2c4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	db0e      	blt.n	800c5b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c59c:	4b90      	ldr	r3, [pc, #576]	; (800c7e0 <tcp_receive+0x2c4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d125      	bne.n	800c5f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5a4:	4b8f      	ldr	r3, [pc, #572]	; (800c7e4 <tcp_receive+0x2c8>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	89db      	ldrh	r3, [r3, #14]
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d91c      	bls.n	800c5f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5b6:	4b8b      	ldr	r3, [pc, #556]	; (800c7e4 <tcp_receive+0x2c8>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	89db      	ldrh	r3, [r3, #14]
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d205      	bcs.n	800c5e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c5e0:	4b7e      	ldr	r3, [pc, #504]	; (800c7dc <tcp_receive+0x2c0>)
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c5e8:	4b7d      	ldr	r3, [pc, #500]	; (800c7e0 <tcp_receive+0x2c4>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5f0:	4b7b      	ldr	r3, [pc, #492]	; (800c7e0 <tcp_receive+0x2c4>)
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dc58      	bgt.n	800c6b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c5fe:	4b7a      	ldr	r3, [pc, #488]	; (800c7e8 <tcp_receive+0x2cc>)
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d14b      	bne.n	800c69e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c610:	4413      	add	r3, r2
 800c612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c614:	429a      	cmp	r2, r3
 800c616:	d142      	bne.n	800c69e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c61e:	2b00      	cmp	r3, #0
 800c620:	db3d      	blt.n	800c69e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c626:	4b6e      	ldr	r3, [pc, #440]	; (800c7e0 <tcp_receive+0x2c4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d137      	bne.n	800c69e <tcp_receive+0x182>
              found_dupack = 1;
 800c62e:	2301      	movs	r3, #1
 800c630:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c638:	2bff      	cmp	r3, #255	; 0xff
 800c63a:	d007      	beq.n	800c64c <tcp_receive+0x130>
                ++pcb->dupacks;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c642:	3301      	adds	r3, #1
 800c644:	b2da      	uxtb	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c652:	2b03      	cmp	r3, #3
 800c654:	d91b      	bls.n	800c68e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c660:	4413      	add	r3, r2
 800c662:	b29a      	uxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d30a      	bcc.n	800c684 <tcp_receive+0x168>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c678:	4413      	add	r3, r2
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c682:	e004      	b.n	800c68e <tcp_receive+0x172>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c68a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c694:	2b02      	cmp	r3, #2
 800c696:	d902      	bls.n	800c69e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fee9 	bl	800e470 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f040 8160 	bne.w	800c966 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6ae:	e15a      	b.n	800c966 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6b0:	4b4b      	ldr	r3, [pc, #300]	; (800c7e0 <tcp_receive+0x2c4>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f2c0 814d 	blt.w	800c95c <tcp_receive+0x440>
 800c6c2:	4b47      	ldr	r3, [pc, #284]	; (800c7e0 <tcp_receive+0x2c4>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f300 8145 	bgt.w	800c95c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	8b5b      	ldrh	r3, [r3, #26]
 800c6d6:	f003 0304 	and.w	r3, r3, #4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d010      	beq.n	800c700 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	8b5b      	ldrh	r3, [r3, #26]
 800c6e2:	f023 0304 	bic.w	r3, r3, #4
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c70e:	10db      	asrs	r3, r3, #3
 800c710:	b21b      	sxth	r3, r3
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	4413      	add	r3, r2
 800c71e:	b29b      	uxth	r3, r3
 800c720:	b21a      	sxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c728:	4b2d      	ldr	r3, [pc, #180]	; (800c7e0 <tcp_receive+0x2c4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c732:	b29b      	uxth	r3, r3
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c740:	4b27      	ldr	r3, [pc, #156]	; (800c7e0 <tcp_receive+0x2c4>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7d1b      	ldrb	r3, [r3, #20]
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	f240 8096 	bls.w	800c87e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c75e:	429a      	cmp	r2, r3
 800c760:	d244      	bcs.n	800c7ec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	8b5b      	ldrh	r3, [r3, #26]
 800c766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <tcp_receive+0x256>
 800c76e:	2301      	movs	r3, #1
 800c770:	e000      	b.n	800c774 <tcp_receive+0x258>
 800c772:	2302      	movs	r3, #2
 800c774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c778:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c782:	fb12 f303 	smulbb	r3, r2, r3
 800c786:	b29b      	uxth	r3, r3
 800c788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c78a:	4293      	cmp	r3, r2
 800c78c:	bf28      	it	cs
 800c78e:	4613      	movcs	r3, r2
 800c790:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c798:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c79a:	4413      	add	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d309      	bcc.n	800c7bc <tcp_receive+0x2a0>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c7b0:	4413      	add	r3, r2
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7ba:	e060      	b.n	800c87e <tcp_receive+0x362>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7c6:	e05a      	b.n	800c87e <tcp_receive+0x362>
 800c7c8:	08013e24 	.word	0x08013e24
 800c7cc:	08014154 	.word	0x08014154
 800c7d0:	08013e70 	.word	0x08013e70
 800c7d4:	08014170 	.word	0x08014170
 800c7d8:	20004af0 	.word	0x20004af0
 800c7dc:	20004ae4 	.word	0x20004ae4
 800c7e0:	20004ae8 	.word	0x20004ae8
 800c7e4:	20004ad4 	.word	0x20004ad4
 800c7e8:	20004aee 	.word	0x20004aee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c7f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7f4:	4413      	add	r3, r2
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d309      	bcc.n	800c816 <tcp_receive+0x2fa>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c808:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c80a:	4413      	add	r3, r2
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c814:	e004      	b.n	800c820 <tcp_receive+0x304>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d326      	bcc.n	800c87e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	b29a      	uxth	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c850:	4413      	add	r3, r2
 800c852:	b29a      	uxth	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d30a      	bcc.n	800c874 <tcp_receive+0x358>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c868:	4413      	add	r3, r2
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c872:	e004      	b.n	800c87e <tcp_receive+0x362>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c87a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c886:	4a98      	ldr	r2, [pc, #608]	; (800cae8 <tcp_receive+0x5cc>)
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7ff fdcb 	bl	800c424 <tcp_free_acked_segments>
 800c88e:	4602      	mov	r2, r0
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c89c:	4a93      	ldr	r2, [pc, #588]	; (800caec <tcp_receive+0x5d0>)
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff fdc0 	bl	800c424 <tcp_free_acked_segments>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d104      	bne.n	800c8bc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8b8:	861a      	strh	r2, [r3, #48]	; 0x30
 800c8ba:	e002      	b.n	800c8c2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d103      	bne.n	800c8d8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c8de:	4b84      	ldr	r3, [pc, #528]	; (800caf0 <tcp_receive+0x5d4>)
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	8b5b      	ldrh	r3, [r3, #26]
 800c8f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d035      	beq.n	800c964 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d118      	bne.n	800c932 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00c      	beq.n	800c922 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	4618      	mov	r0, r3
 800c916:	f7fb f980 	bl	8007c1a <lwip_htonl>
 800c91a:	4603      	mov	r3, r0
 800c91c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dc20      	bgt.n	800c964 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	8b5b      	ldrh	r3, [r3, #26]
 800c926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c930:	e018      	b.n	800c964 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fb f96b 	bl	8007c1a <lwip_htonl>
 800c944:	4603      	mov	r3, r0
 800c946:	1ae3      	subs	r3, r4, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc0b      	bgt.n	800c964 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	8b5b      	ldrh	r3, [r3, #26]
 800c950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c95a:	e003      	b.n	800c964 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 ff75 	bl	800e84c <tcp_send_empty_ack>
 800c962:	e000      	b.n	800c966 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c964:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d05b      	beq.n	800ca26 <tcp_receive+0x50a>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c972:	4b60      	ldr	r3, [pc, #384]	; (800caf4 <tcp_receive+0x5d8>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	da54      	bge.n	800ca26 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c97c:	4b5e      	ldr	r3, [pc, #376]	; (800caf8 <tcp_receive+0x5dc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	b29a      	uxth	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c986:	b29b      	uxth	r3, r3
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c990:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c99a:	10db      	asrs	r3, r3, #3
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9b4:	4413      	add	r3, r2
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	b21a      	sxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c9be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	da05      	bge.n	800c9d2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c9c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9ca:	425b      	negs	r3, r3
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c9d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9dc:	109b      	asrs	r3, r3, #2
 800c9de:	b21b      	sxth	r3, r3
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9f6:	4413      	add	r3, r2
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	b21a      	sxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca06:	10db      	asrs	r3, r3, #3
 800ca08:	b21b      	sxth	r3, r3
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	4413      	add	r3, r2
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	b21a      	sxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ca26:	4b35      	ldr	r3, [pc, #212]	; (800cafc <tcp_receive+0x5e0>)
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 84e1 	beq.w	800d3f2 <tcp_receive+0xed6>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7d1b      	ldrb	r3, [r3, #20]
 800ca34:	2b06      	cmp	r3, #6
 800ca36:	f200 84dc 	bhi.w	800d3f2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca3e:	4b30      	ldr	r3, [pc, #192]	; (800cb00 <tcp_receive+0x5e4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	3b01      	subs	r3, #1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f2c0 808e 	blt.w	800cb68 <tcp_receive+0x64c>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca50:	4b2a      	ldr	r3, [pc, #168]	; (800cafc <tcp_receive+0x5e0>)
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	4619      	mov	r1, r3
 800ca56:	4b2a      	ldr	r3, [pc, #168]	; (800cb00 <tcp_receive+0x5e4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	440b      	add	r3, r1
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	3301      	adds	r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f300 8081 	bgt.w	800cb68 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ca66:	4b27      	ldr	r3, [pc, #156]	; (800cb04 <tcp_receive+0x5e8>)
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca70:	4b23      	ldr	r3, [pc, #140]	; (800cb00 <tcp_receive+0x5e4>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ca78:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <tcp_receive+0x5e8>)
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <tcp_receive+0x572>
 800ca80:	4b21      	ldr	r3, [pc, #132]	; (800cb08 <tcp_receive+0x5ec>)
 800ca82:	f240 5294 	movw	r2, #1428	; 0x594
 800ca86:	4921      	ldr	r1, [pc, #132]	; (800cb0c <tcp_receive+0x5f0>)
 800ca88:	4821      	ldr	r0, [pc, #132]	; (800cb10 <tcp_receive+0x5f4>)
 800ca8a:	f005 f8d1 	bl	8011c30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d906      	bls.n	800caa6 <tcp_receive+0x58a>
 800ca98:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <tcp_receive+0x5ec>)
 800ca9a:	f240 5295 	movw	r2, #1429	; 0x595
 800ca9e:	491d      	ldr	r1, [pc, #116]	; (800cb14 <tcp_receive+0x5f8>)
 800caa0:	481b      	ldr	r0, [pc, #108]	; (800cb10 <tcp_receive+0x5f4>)
 800caa2:	f005 f8c5 	bl	8011c30 <iprintf>
      off = (u16_t)off32;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800caac:	4b15      	ldr	r3, [pc, #84]	; (800cb04 <tcp_receive+0x5e8>)
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	891b      	ldrh	r3, [r3, #8]
 800cab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d906      	bls.n	800cac8 <tcp_receive+0x5ac>
 800caba:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <tcp_receive+0x5ec>)
 800cabc:	f240 5297 	movw	r2, #1431	; 0x597
 800cac0:	4915      	ldr	r1, [pc, #84]	; (800cb18 <tcp_receive+0x5fc>)
 800cac2:	4813      	ldr	r0, [pc, #76]	; (800cb10 <tcp_receive+0x5f4>)
 800cac4:	f005 f8b4 	bl	8011c30 <iprintf>
      inseg.len -= off;
 800cac8:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <tcp_receive+0x5e8>)
 800caca:	891a      	ldrh	r2, [r3, #8]
 800cacc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <tcp_receive+0x5e8>)
 800cad6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cad8:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <tcp_receive+0x5e8>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	891a      	ldrh	r2, [r3, #8]
 800cade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cae6:	e029      	b.n	800cb3c <tcp_receive+0x620>
 800cae8:	0801418c 	.word	0x0801418c
 800caec:	08014194 	.word	0x08014194
 800caf0:	20004aec 	.word	0x20004aec
 800caf4:	20004ae8 	.word	0x20004ae8
 800caf8:	2000b4cc 	.word	0x2000b4cc
 800cafc:	20004aee 	.word	0x20004aee
 800cb00:	20004ae4 	.word	0x20004ae4
 800cb04:	20004ac4 	.word	0x20004ac4
 800cb08:	08013e24 	.word	0x08013e24
 800cb0c:	0801419c 	.word	0x0801419c
 800cb10:	08013e70 	.word	0x08013e70
 800cb14:	080141ac 	.word	0x080141ac
 800cb18:	080141bc 	.word	0x080141bc
        off -= p->len;
 800cb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb1e:	895b      	ldrh	r3, [r3, #10]
 800cb20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cb2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cb30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb32:	2200      	movs	r2, #0
 800cb34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb3e:	895b      	ldrh	r3, [r3, #10]
 800cb40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d8e9      	bhi.n	800cb1c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cb48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb50:	f7fc fb74 	bl	800923c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	4a91      	ldr	r2, [pc, #580]	; (800cda0 <tcp_receive+0x884>)
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	4b91      	ldr	r3, [pc, #580]	; (800cda4 <tcp_receive+0x888>)
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	4a8f      	ldr	r2, [pc, #572]	; (800cda0 <tcp_receive+0x884>)
 800cb62:	6812      	ldr	r2, [r2, #0]
 800cb64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cb66:	e00d      	b.n	800cb84 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cb68:	4b8d      	ldr	r3, [pc, #564]	; (800cda0 <tcp_receive+0x884>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da06      	bge.n	800cb84 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	8b5b      	ldrh	r3, [r3, #26]
 800cb7a:	f043 0302 	orr.w	r3, r3, #2
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cb84:	4b86      	ldr	r3, [pc, #536]	; (800cda0 <tcp_receive+0x884>)
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f2c0 842a 	blt.w	800d3e8 <tcp_receive+0xecc>
 800cb94:	4b82      	ldr	r3, [pc, #520]	; (800cda0 <tcp_receive+0x884>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	6879      	ldr	r1, [r7, #4]
 800cb9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cba0:	440b      	add	r3, r1
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	3301      	adds	r3, #1
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f300 841e 	bgt.w	800d3e8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbb0:	4b7b      	ldr	r3, [pc, #492]	; (800cda0 <tcp_receive+0x884>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	f040 829a 	bne.w	800d0ee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cbba:	4b7a      	ldr	r3, [pc, #488]	; (800cda4 <tcp_receive+0x888>)
 800cbbc:	891c      	ldrh	r4, [r3, #8]
 800cbbe:	4b79      	ldr	r3, [pc, #484]	; (800cda4 <tcp_receive+0x888>)
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	899b      	ldrh	r3, [r3, #12]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fb f812 	bl	8007bf0 <lwip_htons>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 0303 	and.w	r3, r3, #3
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d001      	beq.n	800cbdc <tcp_receive+0x6c0>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e000      	b.n	800cbde <tcp_receive+0x6c2>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4423      	add	r3, r4
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	4b71      	ldr	r3, [pc, #452]	; (800cda8 <tcp_receive+0x88c>)
 800cbe4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cbea:	4b6f      	ldr	r3, [pc, #444]	; (800cda8 <tcp_receive+0x88c>)
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d275      	bcs.n	800ccde <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cbf2:	4b6c      	ldr	r3, [pc, #432]	; (800cda4 <tcp_receive+0x888>)
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	899b      	ldrh	r3, [r3, #12]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fa fff8 	bl	8007bf0 <lwip_htons>
 800cc00:	4603      	mov	r3, r0
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d01f      	beq.n	800cc4c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc0c:	4b65      	ldr	r3, [pc, #404]	; (800cda4 <tcp_receive+0x888>)
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	899b      	ldrh	r3, [r3, #12]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	b21b      	sxth	r3, r3
 800cc16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc1a:	b21c      	sxth	r4, r3
 800cc1c:	4b61      	ldr	r3, [pc, #388]	; (800cda4 <tcp_receive+0x888>)
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	899b      	ldrh	r3, [r3, #12]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fa ffe3 	bl	8007bf0 <lwip_htons>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fa ffda 	bl	8007bf0 <lwip_htons>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	b21b      	sxth	r3, r3
 800cc40:	4323      	orrs	r3, r4
 800cc42:	b21a      	sxth	r2, r3
 800cc44:	4b57      	ldr	r3, [pc, #348]	; (800cda4 <tcp_receive+0x888>)
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	b292      	uxth	r2, r2
 800cc4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc50:	4b54      	ldr	r3, [pc, #336]	; (800cda4 <tcp_receive+0x888>)
 800cc52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc54:	4b53      	ldr	r3, [pc, #332]	; (800cda4 <tcp_receive+0x888>)
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	899b      	ldrh	r3, [r3, #12]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fa ffc7 	bl	8007bf0 <lwip_htons>
 800cc62:	4603      	mov	r3, r0
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <tcp_receive+0x75e>
            inseg.len -= 1;
 800cc6e:	4b4d      	ldr	r3, [pc, #308]	; (800cda4 <tcp_receive+0x888>)
 800cc70:	891b      	ldrh	r3, [r3, #8]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	4b4b      	ldr	r3, [pc, #300]	; (800cda4 <tcp_receive+0x888>)
 800cc78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cc7a:	4b4a      	ldr	r3, [pc, #296]	; (800cda4 <tcp_receive+0x888>)
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	4a49      	ldr	r2, [pc, #292]	; (800cda4 <tcp_receive+0x888>)
 800cc80:	8912      	ldrh	r2, [r2, #8]
 800cc82:	4611      	mov	r1, r2
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fc f9d9 	bl	800903c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cc8a:	4b46      	ldr	r3, [pc, #280]	; (800cda4 <tcp_receive+0x888>)
 800cc8c:	891c      	ldrh	r4, [r3, #8]
 800cc8e:	4b45      	ldr	r3, [pc, #276]	; (800cda4 <tcp_receive+0x888>)
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	899b      	ldrh	r3, [r3, #12]
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fa ffaa 	bl	8007bf0 <lwip_htons>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0303 	and.w	r3, r3, #3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <tcp_receive+0x790>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <tcp_receive+0x792>
 800ccac:	2300      	movs	r3, #0
 800ccae:	4423      	add	r3, r4
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	4b3d      	ldr	r3, [pc, #244]	; (800cda8 <tcp_receive+0x88c>)
 800ccb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ccb6:	4b3c      	ldr	r3, [pc, #240]	; (800cda8 <tcp_receive+0x88c>)
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	4b38      	ldr	r3, [pc, #224]	; (800cda0 <tcp_receive+0x884>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	441a      	add	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccca:	440b      	add	r3, r1
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d006      	beq.n	800ccde <tcp_receive+0x7c2>
 800ccd0:	4b36      	ldr	r3, [pc, #216]	; (800cdac <tcp_receive+0x890>)
 800ccd2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ccd6:	4936      	ldr	r1, [pc, #216]	; (800cdb0 <tcp_receive+0x894>)
 800ccd8:	4836      	ldr	r0, [pc, #216]	; (800cdb4 <tcp_receive+0x898>)
 800ccda:	f004 ffa9 	bl	8011c30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80e7 	beq.w	800ceb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cce8:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <tcp_receive+0x888>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	899b      	ldrh	r3, [r3, #12]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fa ff7d 	bl	8007bf0 <lwip_htons>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d010      	beq.n	800cd24 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd02:	e00a      	b.n	800cd1a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7fd fd96 	bl	800a846 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1f0      	bne.n	800cd04 <tcp_receive+0x7e8>
 800cd22:	e0c8      	b.n	800ceb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cd2a:	e052      	b.n	800cdd2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	899b      	ldrh	r3, [r3, #12]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fa ff5b 	bl	8007bf0 <lwip_htons>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d03d      	beq.n	800cdc2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cd46:	4b17      	ldr	r3, [pc, #92]	; (800cda4 <tcp_receive+0x888>)
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	899b      	ldrh	r3, [r3, #12]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fa ff4e 	bl	8007bf0 <lwip_htons>
 800cd54:	4603      	mov	r3, r0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d130      	bne.n	800cdc2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cd60:	4b10      	ldr	r3, [pc, #64]	; (800cda4 <tcp_receive+0x888>)
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	899b      	ldrh	r3, [r3, #12]
 800cd66:	b29c      	uxth	r4, r3
 800cd68:	2001      	movs	r0, #1
 800cd6a:	f7fa ff41 	bl	8007bf0 <lwip_htons>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	461a      	mov	r2, r3
 800cd72:	4b0c      	ldr	r3, [pc, #48]	; (800cda4 <tcp_receive+0x888>)
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	4322      	orrs	r2, r4
 800cd78:	b292      	uxth	r2, r2
 800cd7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <tcp_receive+0x888>)
 800cd7e:	891c      	ldrh	r4, [r3, #8]
 800cd80:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <tcp_receive+0x888>)
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	899b      	ldrh	r3, [r3, #12]
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fa ff31 	bl	8007bf0 <lwip_htons>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00e      	beq.n	800cdb8 <tcp_receive+0x89c>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e00d      	b.n	800cdba <tcp_receive+0x89e>
 800cd9e:	bf00      	nop
 800cda0:	20004ae4 	.word	0x20004ae4
 800cda4:	20004ac4 	.word	0x20004ac4
 800cda8:	20004aee 	.word	0x20004aee
 800cdac:	08013e24 	.word	0x08013e24
 800cdb0:	080141cc 	.word	0x080141cc
 800cdb4:	08013e70 	.word	0x08013e70
 800cdb8:	2300      	movs	r3, #0
 800cdba:	4423      	add	r3, r4
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	4b98      	ldr	r3, [pc, #608]	; (800d020 <tcp_receive+0xb04>)
 800cdc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cdcc:	6938      	ldr	r0, [r7, #16]
 800cdce:	f7fd fd3a 	bl	800a846 <tcp_seg_free>
            while (next &&
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00e      	beq.n	800cdf6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cdd8:	4b91      	ldr	r3, [pc, #580]	; (800d020 <tcp_receive+0xb04>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b91      	ldr	r3, [pc, #580]	; (800d024 <tcp_receive+0xb08>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	441a      	add	r2, r3
 800cde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdec:	8909      	ldrh	r1, [r1, #8]
 800cdee:	440b      	add	r3, r1
 800cdf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	da9a      	bge.n	800cd2c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d059      	beq.n	800ceb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cdfc:	4b88      	ldr	r3, [pc, #544]	; (800d020 <tcp_receive+0xb04>)
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	4b88      	ldr	r3, [pc, #544]	; (800d024 <tcp_receive+0xb08>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	441a      	add	r2, r3
 800ce08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dd4d      	ble.n	800ceb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	4b81      	ldr	r3, [pc, #516]	; (800d024 <tcp_receive+0xb08>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	4b80      	ldr	r3, [pc, #512]	; (800d028 <tcp_receive+0xb0c>)
 800ce28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce2a:	4b7f      	ldr	r3, [pc, #508]	; (800d028 <tcp_receive+0xb0c>)
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	899b      	ldrh	r3, [r3, #12]
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fa fedc 	bl	8007bf0 <lwip_htons>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 0302 	and.w	r3, r3, #2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <tcp_receive+0x934>
                inseg.len -= 1;
 800ce44:	4b78      	ldr	r3, [pc, #480]	; (800d028 <tcp_receive+0xb0c>)
 800ce46:	891b      	ldrh	r3, [r3, #8]
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	4b76      	ldr	r3, [pc, #472]	; (800d028 <tcp_receive+0xb0c>)
 800ce4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ce50:	4b75      	ldr	r3, [pc, #468]	; (800d028 <tcp_receive+0xb0c>)
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4a74      	ldr	r2, [pc, #464]	; (800d028 <tcp_receive+0xb0c>)
 800ce56:	8912      	ldrh	r2, [r2, #8]
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fc f8ee 	bl	800903c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ce60:	4b71      	ldr	r3, [pc, #452]	; (800d028 <tcp_receive+0xb0c>)
 800ce62:	891c      	ldrh	r4, [r3, #8]
 800ce64:	4b70      	ldr	r3, [pc, #448]	; (800d028 <tcp_receive+0xb0c>)
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	899b      	ldrh	r3, [r3, #12]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fa febf 	bl	8007bf0 <lwip_htons>
 800ce72:	4603      	mov	r3, r0
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	f003 0303 	and.w	r3, r3, #3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <tcp_receive+0x966>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e000      	b.n	800ce84 <tcp_receive+0x968>
 800ce82:	2300      	movs	r3, #0
 800ce84:	4423      	add	r3, r4
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	4b65      	ldr	r3, [pc, #404]	; (800d020 <tcp_receive+0xb04>)
 800ce8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ce8c:	4b64      	ldr	r3, [pc, #400]	; (800d020 <tcp_receive+0xb04>)
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	461a      	mov	r2, r3
 800ce92:	4b64      	ldr	r3, [pc, #400]	; (800d024 <tcp_receive+0xb08>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	441a      	add	r2, r3
 800ce98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d006      	beq.n	800ceb0 <tcp_receive+0x994>
 800cea2:	4b62      	ldr	r3, [pc, #392]	; (800d02c <tcp_receive+0xb10>)
 800cea4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cea8:	4961      	ldr	r1, [pc, #388]	; (800d030 <tcp_receive+0xb14>)
 800ceaa:	4862      	ldr	r0, [pc, #392]	; (800d034 <tcp_receive+0xb18>)
 800ceac:	f004 fec0 	bl	8011c30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ceb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ceb6:	4b5a      	ldr	r3, [pc, #360]	; (800d020 <tcp_receive+0xb04>)
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b59      	ldr	r3, [pc, #356]	; (800d024 <tcp_receive+0xb08>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	441a      	add	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceca:	4b55      	ldr	r3, [pc, #340]	; (800d020 <tcp_receive+0xb04>)
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d206      	bcs.n	800cee0 <tcp_receive+0x9c4>
 800ced2:	4b56      	ldr	r3, [pc, #344]	; (800d02c <tcp_receive+0xb10>)
 800ced4:	f240 6207 	movw	r2, #1543	; 0x607
 800ced8:	4957      	ldr	r1, [pc, #348]	; (800d038 <tcp_receive+0xb1c>)
 800ceda:	4856      	ldr	r0, [pc, #344]	; (800d034 <tcp_receive+0xb18>)
 800cedc:	f004 fea8 	bl	8011c30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cee4:	4b4e      	ldr	r3, [pc, #312]	; (800d020 <tcp_receive+0xb04>)
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7fc ffc9 	bl	8009e88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cef6:	4b4c      	ldr	r3, [pc, #304]	; (800d028 <tcp_receive+0xb0c>)
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	891b      	ldrh	r3, [r3, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cf00:	4b49      	ldr	r3, [pc, #292]	; (800d028 <tcp_receive+0xb0c>)
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	4a4d      	ldr	r2, [pc, #308]	; (800d03c <tcp_receive+0xb20>)
 800cf06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf08:	4b47      	ldr	r3, [pc, #284]	; (800d028 <tcp_receive+0xb0c>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf0e:	4b46      	ldr	r3, [pc, #280]	; (800d028 <tcp_receive+0xb0c>)
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	899b      	ldrh	r3, [r3, #12]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fa fe6a 	bl	8007bf0 <lwip_htons>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 80b8 	beq.w	800d09a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cf2a:	4b45      	ldr	r3, [pc, #276]	; (800d040 <tcp_receive+0xb24>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f043 0320 	orr.w	r3, r3, #32
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	4b42      	ldr	r3, [pc, #264]	; (800d040 <tcp_receive+0xb24>)
 800cf36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cf38:	e0af      	b.n	800d09a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	4a36      	ldr	r2, [pc, #216]	; (800d024 <tcp_receive+0xb08>)
 800cf4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	891b      	ldrh	r3, [r3, #8]
 800cf50:	461c      	mov	r4, r3
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	899b      	ldrh	r3, [r3, #12]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fa fe48 	bl	8007bf0 <lwip_htons>
 800cf60:	4603      	mov	r3, r0
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	f003 0303 	and.w	r3, r3, #3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <tcp_receive+0xa54>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e000      	b.n	800cf72 <tcp_receive+0xa56>
 800cf70:	2300      	movs	r3, #0
 800cf72:	191a      	adds	r2, r3, r4
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	441a      	add	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf82:	461c      	mov	r4, r3
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	891b      	ldrh	r3, [r3, #8]
 800cf88:	461d      	mov	r5, r3
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	899b      	ldrh	r3, [r3, #12]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fa fe2c 	bl	8007bf0 <lwip_htons>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f003 0303 	and.w	r3, r3, #3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <tcp_receive+0xa8c>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e000      	b.n	800cfaa <tcp_receive+0xa8e>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	442b      	add	r3, r5
 800cfac:	429c      	cmp	r4, r3
 800cfae:	d206      	bcs.n	800cfbe <tcp_receive+0xaa2>
 800cfb0:	4b1e      	ldr	r3, [pc, #120]	; (800d02c <tcp_receive+0xb10>)
 800cfb2:	f240 622b 	movw	r2, #1579	; 0x62b
 800cfb6:	4923      	ldr	r1, [pc, #140]	; (800d044 <tcp_receive+0xb28>)
 800cfb8:	481e      	ldr	r0, [pc, #120]	; (800d034 <tcp_receive+0xb18>)
 800cfba:	f004 fe39 	bl	8011c30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	891b      	ldrh	r3, [r3, #8]
 800cfc2:	461c      	mov	r4, r3
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	899b      	ldrh	r3, [r3, #12]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fa fe0f 	bl	8007bf0 <lwip_htons>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	f003 0303 	and.w	r3, r3, #3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <tcp_receive+0xac6>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e000      	b.n	800cfe4 <tcp_receive+0xac8>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	1919      	adds	r1, r3, r4
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfea:	b28b      	uxth	r3, r1
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7fc ff47 	bl	8009e88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	891b      	ldrh	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d028      	beq.n	800d056 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d004:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <tcp_receive+0xb20>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01d      	beq.n	800d048 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d00c:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <tcp_receive+0xb20>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f7fc fa64 	bl	80094e4 <pbuf_cat>
 800d01c:	e018      	b.n	800d050 <tcp_receive+0xb34>
 800d01e:	bf00      	nop
 800d020:	20004aee 	.word	0x20004aee
 800d024:	20004ae4 	.word	0x20004ae4
 800d028:	20004ac4 	.word	0x20004ac4
 800d02c:	08013e24 	.word	0x08013e24
 800d030:	08014204 	.word	0x08014204
 800d034:	08013e70 	.word	0x08013e70
 800d038:	08014240 	.word	0x08014240
 800d03c:	20004af4 	.word	0x20004af4
 800d040:	20004af1 	.word	0x20004af1
 800d044:	08014260 	.word	0x08014260
            } else {
              recv_data = cseg->p;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	4a70      	ldr	r2, [pc, #448]	; (800d210 <tcp_receive+0xcf4>)
 800d04e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2200      	movs	r2, #0
 800d054:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	899b      	ldrh	r3, [r3, #12]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fa fdc6 	bl	8007bf0 <lwip_htons>
 800d064:	4603      	mov	r3, r0
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00d      	beq.n	800d08c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d070:	4b68      	ldr	r3, [pc, #416]	; (800d214 <tcp_receive+0xcf8>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	f043 0320 	orr.w	r3, r3, #32
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	4b66      	ldr	r3, [pc, #408]	; (800d214 <tcp_receive+0xcf8>)
 800d07c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7d1b      	ldrb	r3, [r3, #20]
 800d082:	2b04      	cmp	r3, #4
 800d084:	d102      	bne.n	800d08c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2207      	movs	r2, #7
 800d08a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d094:	68b8      	ldr	r0, [r7, #8]
 800d096:	f7fd fbd6 	bl	800a846 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d008      	beq.n	800d0b4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	685a      	ldr	r2, [r3, #4]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	f43f af43 	beq.w	800cf3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	8b5b      	ldrh	r3, [r3, #26]
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00e      	beq.n	800d0de <tcp_receive+0xbc2>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8b5b      	ldrh	r3, [r3, #26]
 800d0c4:	f023 0301 	bic.w	r3, r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	835a      	strh	r2, [r3, #26]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	8b5b      	ldrh	r3, [r3, #26]
 800d0d2:	f043 0302 	orr.w	r3, r3, #2
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d0dc:	e188      	b.n	800d3f0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	8b5b      	ldrh	r3, [r3, #26]
 800d0e2:	f043 0301 	orr.w	r3, r3, #1
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d0ec:	e180      	b.n	800d3f0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d106      	bne.n	800d104 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d0f6:	4848      	ldr	r0, [pc, #288]	; (800d218 <tcp_receive+0xcfc>)
 800d0f8:	f7fd fbbe 	bl	800a878 <tcp_seg_copy>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	675a      	str	r2, [r3, #116]	; 0x74
 800d102:	e16d      	b.n	800d3e0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d104:	2300      	movs	r3, #0
 800d106:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d10e:	e157      	b.n	800d3c0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	4b41      	ldr	r3, [pc, #260]	; (800d21c <tcp_receive+0xd00>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d11d      	bne.n	800d15a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d11e:	4b3e      	ldr	r3, [pc, #248]	; (800d218 <tcp_receive+0xcfc>)
 800d120:	891a      	ldrh	r2, [r3, #8]
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	891b      	ldrh	r3, [r3, #8]
 800d126:	429a      	cmp	r2, r3
 800d128:	f240 814f 	bls.w	800d3ca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d12c:	483a      	ldr	r0, [pc, #232]	; (800d218 <tcp_receive+0xcfc>)
 800d12e:	f7fd fba3 	bl	800a878 <tcp_seg_copy>
 800d132:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f000 8149 	beq.w	800d3ce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	e002      	b.n	800d150 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d152:	6978      	ldr	r0, [r7, #20]
 800d154:	f7ff f8de 	bl	800c314 <tcp_oos_insert_segment>
                }
                break;
 800d158:	e139      	b.n	800d3ce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d117      	bne.n	800d190 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d160:	4b2e      	ldr	r3, [pc, #184]	; (800d21c <tcp_receive+0xd00>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da57      	bge.n	800d220 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d170:	4829      	ldr	r0, [pc, #164]	; (800d218 <tcp_receive+0xcfc>)
 800d172:	f7fd fb81 	bl	800a878 <tcp_seg_copy>
 800d176:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 8129 	beq.w	800d3d2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	69ba      	ldr	r2, [r7, #24]
 800d184:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d188:	69b8      	ldr	r0, [r7, #24]
 800d18a:	f7ff f8c3 	bl	800c314 <tcp_oos_insert_segment>
                  }
                  break;
 800d18e:	e120      	b.n	800d3d2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d190:	4b22      	ldr	r3, [pc, #136]	; (800d21c <tcp_receive+0xd00>)
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	db3e      	blt.n	800d220 <tcp_receive+0xd04>
 800d1a2:	4b1e      	ldr	r3, [pc, #120]	; (800d21c <tcp_receive+0xd00>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dc35      	bgt.n	800d220 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1b4:	4818      	ldr	r0, [pc, #96]	; (800d218 <tcp_receive+0xcfc>)
 800d1b6:	f7fd fb5f 	bl	800a878 <tcp_seg_copy>
 800d1ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 8109 	beq.w	800d3d6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1cc:	8912      	ldrh	r2, [r2, #8]
 800d1ce:	441a      	add	r2, r3
 800d1d0:	4b12      	ldr	r3, [pc, #72]	; (800d21c <tcp_receive+0xd00>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	dd12      	ble.n	800d200 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d1da:	4b10      	ldr	r3, [pc, #64]	; (800d21c <tcp_receive+0xd00>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f6:	891b      	ldrh	r3, [r3, #8]
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7fb ff1e 	bl	800903c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d208:	69f8      	ldr	r0, [r7, #28]
 800d20a:	f7ff f883 	bl	800c314 <tcp_oos_insert_segment>
                  }
                  break;
 800d20e:	e0e2      	b.n	800d3d6 <tcp_receive+0xeba>
 800d210:	20004af4 	.word	0x20004af4
 800d214:	20004af1 	.word	0x20004af1
 800d218:	20004ac4 	.word	0x20004ac4
 800d21c:	20004ae4 	.word	0x20004ae4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f040 80c6 	bne.w	800d3ba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d22e:	4b80      	ldr	r3, [pc, #512]	; (800d430 <tcp_receive+0xf14>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f340 80bd 	ble.w	800d3ba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	899b      	ldrh	r3, [r3, #12]
 800d246:	b29b      	uxth	r3, r3
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fa fcd1 	bl	8007bf0 <lwip_htons>
 800d24e:	4603      	mov	r3, r0
 800d250:	b2db      	uxtb	r3, r3
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	f040 80bf 	bne.w	800d3da <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d25c:	4875      	ldr	r0, [pc, #468]	; (800d434 <tcp_receive+0xf18>)
 800d25e:	f7fd fb0b 	bl	800a878 <tcp_seg_copy>
 800d262:	4602      	mov	r2, r0
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 80b6 	beq.w	800d3de <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d27a:	8912      	ldrh	r2, [r2, #8]
 800d27c:	441a      	add	r2, r3
 800d27e:	4b6c      	ldr	r3, [pc, #432]	; (800d430 <tcp_receive+0xf14>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	dd12      	ble.n	800d2ae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d288:	4b69      	ldr	r3, [pc, #420]	; (800d430 <tcp_receive+0xf14>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	b29b      	uxth	r3, r3
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	b29a      	uxth	r2, r3
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	685a      	ldr	r2, [r3, #4]
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	891b      	ldrh	r3, [r3, #8]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	f7fb fec7 	bl	800903c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d2ae:	4b62      	ldr	r3, [pc, #392]	; (800d438 <tcp_receive+0xf1c>)
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4b5e      	ldr	r3, [pc, #376]	; (800d430 <tcp_receive+0xf14>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	441a      	add	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d2c2:	440b      	add	r3, r1
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f340 8089 	ble.w	800d3de <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	899b      	ldrh	r3, [r3, #12]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fa fc8a 	bl	8007bf0 <lwip_htons>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d022      	beq.n	800d32e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	899b      	ldrh	r3, [r3, #12]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	b21b      	sxth	r3, r3
 800d2f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2f8:	b21c      	sxth	r4, r3
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	899b      	ldrh	r3, [r3, #12]
 800d302:	b29b      	uxth	r3, r3
 800d304:	4618      	mov	r0, r3
 800d306:	f7fa fc73 	bl	8007bf0 <lwip_htons>
 800d30a:	4603      	mov	r3, r0
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	b29b      	uxth	r3, r3
 800d310:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d314:	b29b      	uxth	r3, r3
 800d316:	4618      	mov	r0, r3
 800d318:	f7fa fc6a 	bl	8007bf0 <lwip_htons>
 800d31c:	4603      	mov	r3, r0
 800d31e:	b21b      	sxth	r3, r3
 800d320:	4323      	orrs	r3, r4
 800d322:	b21a      	sxth	r2, r3
 800d324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	b292      	uxth	r2, r2
 800d32c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	b29a      	uxth	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d338:	4413      	add	r3, r2
 800d33a:	b299      	uxth	r1, r3
 800d33c:	4b3c      	ldr	r3, [pc, #240]	; (800d430 <tcp_receive+0xf14>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	b29a      	uxth	r2, r3
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	1a8a      	subs	r2, r1, r2
 800d348:	b292      	uxth	r2, r2
 800d34a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	891b      	ldrh	r3, [r3, #8]
 800d358:	4619      	mov	r1, r3
 800d35a:	4610      	mov	r0, r2
 800d35c:	f7fb fe6e 	bl	800903c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	891c      	ldrh	r4, [r3, #8]
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	899b      	ldrh	r3, [r3, #12]
 800d36e:	b29b      	uxth	r3, r3
 800d370:	4618      	mov	r0, r3
 800d372:	f7fa fc3d 	bl	8007bf0 <lwip_htons>
 800d376:	4603      	mov	r3, r0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <tcp_receive+0xe6a>
 800d382:	2301      	movs	r3, #1
 800d384:	e000      	b.n	800d388 <tcp_receive+0xe6c>
 800d386:	2300      	movs	r3, #0
 800d388:	4423      	add	r3, r4
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	4b2a      	ldr	r3, [pc, #168]	; (800d438 <tcp_receive+0xf1c>)
 800d38e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d390:	4b29      	ldr	r3, [pc, #164]	; (800d438 <tcp_receive+0xf1c>)
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	461a      	mov	r2, r3
 800d396:	4b26      	ldr	r3, [pc, #152]	; (800d430 <tcp_receive+0xf14>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	441a      	add	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3a4:	440b      	add	r3, r1
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d019      	beq.n	800d3de <tcp_receive+0xec2>
 800d3aa:	4b24      	ldr	r3, [pc, #144]	; (800d43c <tcp_receive+0xf20>)
 800d3ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d3b0:	4923      	ldr	r1, [pc, #140]	; (800d440 <tcp_receive+0xf24>)
 800d3b2:	4824      	ldr	r0, [pc, #144]	; (800d444 <tcp_receive+0xf28>)
 800d3b4:	f004 fc3c 	bl	8011c30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d3b8:	e011      	b.n	800d3de <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f47f aea4 	bne.w	800d110 <tcp_receive+0xbf4>
 800d3c8:	e00a      	b.n	800d3e0 <tcp_receive+0xec4>
                break;
 800d3ca:	bf00      	nop
 800d3cc:	e008      	b.n	800d3e0 <tcp_receive+0xec4>
                break;
 800d3ce:	bf00      	nop
 800d3d0:	e006      	b.n	800d3e0 <tcp_receive+0xec4>
                  break;
 800d3d2:	bf00      	nop
 800d3d4:	e004      	b.n	800d3e0 <tcp_receive+0xec4>
                  break;
 800d3d6:	bf00      	nop
 800d3d8:	e002      	b.n	800d3e0 <tcp_receive+0xec4>
                  break;
 800d3da:	bf00      	nop
 800d3dc:	e000      	b.n	800d3e0 <tcp_receive+0xec4>
                break;
 800d3de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 fa33 	bl	800e84c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d3e6:	e003      	b.n	800d3f0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f001 fa2f 	bl	800e84c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3ee:	e01a      	b.n	800d426 <tcp_receive+0xf0a>
 800d3f0:	e019      	b.n	800d426 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d3f2:	4b0f      	ldr	r3, [pc, #60]	; (800d430 <tcp_receive+0xf14>)
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	db0a      	blt.n	800d416 <tcp_receive+0xefa>
 800d400:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <tcp_receive+0xf14>)
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	6879      	ldr	r1, [r7, #4]
 800d40a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d40c:	440b      	add	r3, r1
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	3301      	adds	r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	dd07      	ble.n	800d426 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	8b5b      	ldrh	r3, [r3, #26]
 800d41a:	f043 0302 	orr.w	r3, r3, #2
 800d41e:	b29a      	uxth	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d424:	e7ff      	b.n	800d426 <tcp_receive+0xf0a>
 800d426:	bf00      	nop
 800d428:	3750      	adds	r7, #80	; 0x50
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bdb0      	pop	{r4, r5, r7, pc}
 800d42e:	bf00      	nop
 800d430:	20004ae4 	.word	0x20004ae4
 800d434:	20004ac4 	.word	0x20004ac4
 800d438:	20004aee 	.word	0x20004aee
 800d43c:	08013e24 	.word	0x08013e24
 800d440:	080141cc 	.word	0x080141cc
 800d444:	08013e70 	.word	0x08013e70

0800d448 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d44e:	4b15      	ldr	r3, [pc, #84]	; (800d4a4 <tcp_get_next_optbyte+0x5c>)
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	b291      	uxth	r1, r2
 800d456:	4a13      	ldr	r2, [pc, #76]	; (800d4a4 <tcp_get_next_optbyte+0x5c>)
 800d458:	8011      	strh	r1, [r2, #0]
 800d45a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d45c:	4b12      	ldr	r3, [pc, #72]	; (800d4a8 <tcp_get_next_optbyte+0x60>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d004      	beq.n	800d46e <tcp_get_next_optbyte+0x26>
 800d464:	4b11      	ldr	r3, [pc, #68]	; (800d4ac <tcp_get_next_optbyte+0x64>)
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	88fa      	ldrh	r2, [r7, #6]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d208      	bcs.n	800d480 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d46e:	4b10      	ldr	r3, [pc, #64]	; (800d4b0 <tcp_get_next_optbyte+0x68>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3314      	adds	r3, #20
 800d474:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d476:	88fb      	ldrh	r3, [r7, #6]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	4413      	add	r3, r2
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	e00b      	b.n	800d498 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d480:	88fb      	ldrh	r3, [r7, #6]
 800d482:	b2da      	uxtb	r2, r3
 800d484:	4b09      	ldr	r3, [pc, #36]	; (800d4ac <tcp_get_next_optbyte+0x64>)
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d48e:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <tcp_get_next_optbyte+0x60>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	797b      	ldrb	r3, [r7, #5]
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20004ae0 	.word	0x20004ae0
 800d4a8:	20004adc 	.word	0x20004adc
 800d4ac:	20004ada 	.word	0x20004ada
 800d4b0:	20004ad4 	.word	0x20004ad4

0800d4b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <tcp_parseopt+0x1c>
 800d4c2:	4b32      	ldr	r3, [pc, #200]	; (800d58c <tcp_parseopt+0xd8>)
 800d4c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800d4c8:	4931      	ldr	r1, [pc, #196]	; (800d590 <tcp_parseopt+0xdc>)
 800d4ca:	4832      	ldr	r0, [pc, #200]	; (800d594 <tcp_parseopt+0xe0>)
 800d4cc:	f004 fbb0 	bl	8011c30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d4d0:	4b31      	ldr	r3, [pc, #196]	; (800d598 <tcp_parseopt+0xe4>)
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d055      	beq.n	800d584 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d4d8:	4b30      	ldr	r3, [pc, #192]	; (800d59c <tcp_parseopt+0xe8>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	801a      	strh	r2, [r3, #0]
 800d4de:	e045      	b.n	800d56c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d4e0:	f7ff ffb2 	bl	800d448 <tcp_get_next_optbyte>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d006      	beq.n	800d4fc <tcp_parseopt+0x48>
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	dc2b      	bgt.n	800d54a <tcp_parseopt+0x96>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d041      	beq.n	800d57a <tcp_parseopt+0xc6>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d127      	bne.n	800d54a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d4fa:	e037      	b.n	800d56c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d4fc:	f7ff ffa4 	bl	800d448 <tcp_get_next_optbyte>
 800d500:	4603      	mov	r3, r0
 800d502:	2b04      	cmp	r3, #4
 800d504:	d13b      	bne.n	800d57e <tcp_parseopt+0xca>
 800d506:	4b25      	ldr	r3, [pc, #148]	; (800d59c <tcp_parseopt+0xe8>)
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	3301      	adds	r3, #1
 800d50c:	4a22      	ldr	r2, [pc, #136]	; (800d598 <tcp_parseopt+0xe4>)
 800d50e:	8812      	ldrh	r2, [r2, #0]
 800d510:	4293      	cmp	r3, r2
 800d512:	da34      	bge.n	800d57e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d514:	f7ff ff98 	bl	800d448 <tcp_get_next_optbyte>
 800d518:	4603      	mov	r3, r0
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d520:	f7ff ff92 	bl	800d448 <tcp_get_next_optbyte>
 800d524:	4603      	mov	r3, r0
 800d526:	b29a      	uxth	r2, r3
 800d528:	89bb      	ldrh	r3, [r7, #12]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d52e:	89bb      	ldrh	r3, [r7, #12]
 800d530:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d534:	d804      	bhi.n	800d540 <tcp_parseopt+0x8c>
 800d536:	89bb      	ldrh	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <tcp_parseopt+0x8c>
 800d53c:	89ba      	ldrh	r2, [r7, #12]
 800d53e:	e001      	b.n	800d544 <tcp_parseopt+0x90>
 800d540:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d548:	e010      	b.n	800d56c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d54a:	f7ff ff7d 	bl	800d448 <tcp_get_next_optbyte>
 800d54e:	4603      	mov	r3, r0
 800d550:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d552:	7afb      	ldrb	r3, [r7, #11]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d914      	bls.n	800d582 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d558:	7afb      	ldrb	r3, [r7, #11]
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <tcp_parseopt+0xe8>)
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	4413      	add	r3, r2
 800d562:	b29b      	uxth	r3, r3
 800d564:	3b02      	subs	r3, #2
 800d566:	b29a      	uxth	r2, r3
 800d568:	4b0c      	ldr	r3, [pc, #48]	; (800d59c <tcp_parseopt+0xe8>)
 800d56a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d56c:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <tcp_parseopt+0xe8>)
 800d56e:	881a      	ldrh	r2, [r3, #0]
 800d570:	4b09      	ldr	r3, [pc, #36]	; (800d598 <tcp_parseopt+0xe4>)
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d3b3      	bcc.n	800d4e0 <tcp_parseopt+0x2c>
 800d578:	e004      	b.n	800d584 <tcp_parseopt+0xd0>
          return;
 800d57a:	bf00      	nop
 800d57c:	e002      	b.n	800d584 <tcp_parseopt+0xd0>
            return;
 800d57e:	bf00      	nop
 800d580:	e000      	b.n	800d584 <tcp_parseopt+0xd0>
            return;
 800d582:	bf00      	nop
      }
    }
  }
}
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	08013e24 	.word	0x08013e24
 800d590:	08014288 	.word	0x08014288
 800d594:	08013e70 	.word	0x08013e70
 800d598:	20004ad8 	.word	0x20004ad8
 800d59c:	20004ae0 	.word	0x20004ae0

0800d5a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d5a4:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <tcp_trigger_input_pcb_close+0x1c>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	f043 0310 	orr.w	r3, r3, #16
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	4b03      	ldr	r3, [pc, #12]	; (800d5bc <tcp_trigger_input_pcb_close+0x1c>)
 800d5b0:	701a      	strb	r2, [r3, #0]
}
 800d5b2:	bf00      	nop
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	20004af1 	.word	0x20004af1

0800d5c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00a      	beq.n	800d5e8 <tcp_route+0x28>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	7a1b      	ldrb	r3, [r3, #8]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d006      	beq.n	800d5e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	7a1b      	ldrb	r3, [r3, #8]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fb fb24 	bl	8008c2c <netif_get_by_index>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	e003      	b.n	800d5f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f002 fead 	bl	8010348 <ip4_route>
 800d5ee:	4603      	mov	r3, r0
  }
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d5f8:	b590      	push	{r4, r7, lr}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	4613      	mov	r3, r2
 800d606:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d105      	bne.n	800d61a <tcp_create_segment+0x22>
 800d60e:	4b44      	ldr	r3, [pc, #272]	; (800d720 <tcp_create_segment+0x128>)
 800d610:	22a3      	movs	r2, #163	; 0xa3
 800d612:	4944      	ldr	r1, [pc, #272]	; (800d724 <tcp_create_segment+0x12c>)
 800d614:	4844      	ldr	r0, [pc, #272]	; (800d728 <tcp_create_segment+0x130>)
 800d616:	f004 fb0b 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d105      	bne.n	800d62c <tcp_create_segment+0x34>
 800d620:	4b3f      	ldr	r3, [pc, #252]	; (800d720 <tcp_create_segment+0x128>)
 800d622:	22a4      	movs	r2, #164	; 0xa4
 800d624:	4941      	ldr	r1, [pc, #260]	; (800d72c <tcp_create_segment+0x134>)
 800d626:	4840      	ldr	r0, [pc, #256]	; (800d728 <tcp_create_segment+0x130>)
 800d628:	f004 fb02 	bl	8011c30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d62c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d63a:	2003      	movs	r0, #3
 800d63c:	f7fa ff8e 	bl	800855c <memp_malloc>
 800d640:	6138      	str	r0, [r7, #16]
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d104      	bne.n	800d652 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f7fb fe7d 	bl	8009348 <pbuf_free>
    return NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	e061      	b.n	800d716 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d658:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2200      	movs	r2, #0
 800d65e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	891a      	ldrh	r2, [r3, #8]
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	429a      	cmp	r2, r3
 800d670:	d205      	bcs.n	800d67e <tcp_create_segment+0x86>
 800d672:	4b2b      	ldr	r3, [pc, #172]	; (800d720 <tcp_create_segment+0x128>)
 800d674:	22b0      	movs	r2, #176	; 0xb0
 800d676:	492e      	ldr	r1, [pc, #184]	; (800d730 <tcp_create_segment+0x138>)
 800d678:	482b      	ldr	r0, [pc, #172]	; (800d728 <tcp_create_segment+0x130>)
 800d67a:	f004 fad9 	bl	8011c30 <iprintf>
  seg->len = p->tot_len - optlen;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	891a      	ldrh	r2, [r3, #8]
 800d682:	7dfb      	ldrb	r3, [r7, #23]
 800d684:	b29b      	uxth	r3, r3
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	b29a      	uxth	r2, r3
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d68e:	2114      	movs	r1, #20
 800d690:	68b8      	ldr	r0, [r7, #8]
 800d692:	f7fb fdc3 	bl	800921c <pbuf_add_header>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d004      	beq.n	800d6a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d69c:	6938      	ldr	r0, [r7, #16]
 800d69e:	f7fd f8d2 	bl	800a846 <tcp_seg_free>
    return NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e037      	b.n	800d716 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8ada      	ldrh	r2, [r3, #22]
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	68dc      	ldr	r4, [r3, #12]
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7fa fa99 	bl	8007bf0 <lwip_htons>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	8b1a      	ldrh	r2, [r3, #24]
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	68dc      	ldr	r4, [r3, #12]
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	f7fa fa90 	bl	8007bf0 <lwip_htons>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	68dc      	ldr	r4, [r3, #12]
 800d6d8:	6838      	ldr	r0, [r7, #0]
 800d6da:	f7fa fa9e 	bl	8007c1a <lwip_htonl>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	089b      	lsrs	r3, r3, #2
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3305      	adds	r3, #5
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	031b      	lsls	r3, r3, #12
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	68dc      	ldr	r4, [r3, #12]
 800d6fe:	4610      	mov	r0, r2
 800d700:	f7fa fa76 	bl	8007bf0 <lwip_htons>
 800d704:	4603      	mov	r3, r0
 800d706:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	749a      	strb	r2, [r3, #18]
 800d710:	2200      	movs	r2, #0
 800d712:	74da      	strb	r2, [r3, #19]
  return seg;
 800d714:	693b      	ldr	r3, [r7, #16]
}
 800d716:	4618      	mov	r0, r3
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd90      	pop	{r4, r7, pc}
 800d71e:	bf00      	nop
 800d720:	080142a4 	.word	0x080142a4
 800d724:	080142d8 	.word	0x080142d8
 800d728:	080142f8 	.word	0x080142f8
 800d72c:	08014320 	.word	0x08014320
 800d730:	08014344 	.word	0x08014344

0800d734 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d734:	b590      	push	{r4, r7, lr}
 800d736:	b08b      	sub	sp, #44	; 0x2c
 800d738:	af02      	add	r7, sp, #8
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d740:	2300      	movs	r3, #0
 800d742:	61fb      	str	r3, [r7, #28]
 800d744:	2300      	movs	r3, #0
 800d746:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d748:	2300      	movs	r3, #0
 800d74a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <tcp_split_unsent_seg+0x2c>
 800d752:	4b95      	ldr	r3, [pc, #596]	; (800d9a8 <tcp_split_unsent_seg+0x274>)
 800d754:	f240 324b 	movw	r2, #843	; 0x34b
 800d758:	4994      	ldr	r1, [pc, #592]	; (800d9ac <tcp_split_unsent_seg+0x278>)
 800d75a:	4895      	ldr	r0, [pc, #596]	; (800d9b0 <tcp_split_unsent_seg+0x27c>)
 800d75c:	f004 fa68 	bl	8011c30 <iprintf>

  useg = pcb->unsent;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d764:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d102      	bne.n	800d772 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d76c:	f04f 33ff 	mov.w	r3, #4294967295
 800d770:	e116      	b.n	800d9a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d772:	887b      	ldrh	r3, [r7, #2]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d109      	bne.n	800d78c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d778:	4b8b      	ldr	r3, [pc, #556]	; (800d9a8 <tcp_split_unsent_seg+0x274>)
 800d77a:	f240 3253 	movw	r2, #851	; 0x353
 800d77e:	498d      	ldr	r1, [pc, #564]	; (800d9b4 <tcp_split_unsent_seg+0x280>)
 800d780:	488b      	ldr	r0, [pc, #556]	; (800d9b0 <tcp_split_unsent_seg+0x27c>)
 800d782:	f004 fa55 	bl	8011c30 <iprintf>
    return ERR_VAL;
 800d786:	f06f 0305 	mvn.w	r3, #5
 800d78a:	e109      	b.n	800d9a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	891b      	ldrh	r3, [r3, #8]
 800d790:	887a      	ldrh	r2, [r7, #2]
 800d792:	429a      	cmp	r2, r3
 800d794:	d301      	bcc.n	800d79a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	e102      	b.n	800d9a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d79e:	887a      	ldrh	r2, [r7, #2]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d906      	bls.n	800d7b2 <tcp_split_unsent_seg+0x7e>
 800d7a4:	4b80      	ldr	r3, [pc, #512]	; (800d9a8 <tcp_split_unsent_seg+0x274>)
 800d7a6:	f240 325b 	movw	r2, #859	; 0x35b
 800d7aa:	4983      	ldr	r1, [pc, #524]	; (800d9b8 <tcp_split_unsent_seg+0x284>)
 800d7ac:	4880      	ldr	r0, [pc, #512]	; (800d9b0 <tcp_split_unsent_seg+0x27c>)
 800d7ae:	f004 fa3f 	bl	8011c30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d106      	bne.n	800d7c8 <tcp_split_unsent_seg+0x94>
 800d7ba:	4b7b      	ldr	r3, [pc, #492]	; (800d9a8 <tcp_split_unsent_seg+0x274>)
 800d7bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d7c0:	497e      	ldr	r1, [pc, #504]	; (800d9bc <tcp_split_unsent_seg+0x288>)
 800d7c2:	487b      	ldr	r0, [pc, #492]	; (800d9b0 <tcp_split_unsent_seg+0x27c>)
 800d7c4:	f004 fa34 	bl	8011c30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	7a9b      	ldrb	r3, [r3, #10]
 800d7cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	891a      	ldrh	r2, [r3, #8]
 800d7de:	887b      	ldrh	r3, [r7, #2]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	89bb      	ldrh	r3, [r7, #12]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	2036      	movs	r0, #54	; 0x36
 800d7f6:	f7fb fac3 	bl	8008d80 <pbuf_alloc>
 800d7fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 80b7 	beq.w	800d972 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	891a      	ldrh	r2, [r3, #8]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	891b      	ldrh	r3, [r3, #8]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	b29a      	uxth	r2, r3
 800d812:	887b      	ldrh	r3, [r7, #2]
 800d814:	4413      	add	r3, r2
 800d816:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	6858      	ldr	r0, [r3, #4]
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	7bbb      	ldrb	r3, [r7, #14]
 800d822:	18d1      	adds	r1, r2, r3
 800d824:	897b      	ldrh	r3, [r7, #10]
 800d826:	89ba      	ldrh	r2, [r7, #12]
 800d828:	f7fb ff84 	bl	8009734 <pbuf_copy_partial>
 800d82c:	4603      	mov	r3, r0
 800d82e:	461a      	mov	r2, r3
 800d830:	89bb      	ldrh	r3, [r7, #12]
 800d832:	4293      	cmp	r3, r2
 800d834:	f040 809f 	bne.w	800d976 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	4618      	mov	r0, r3
 800d842:	f7fa f9d5 	bl	8007bf0 <lwip_htons>
 800d846:	4603      	mov	r3, r0
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d84e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d850:	2300      	movs	r3, #0
 800d852:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d854:	7efb      	ldrb	r3, [r7, #27]
 800d856:	f003 0308 	and.w	r3, r3, #8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d007      	beq.n	800d86e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d85e:	7efb      	ldrb	r3, [r7, #27]
 800d860:	f023 0308 	bic.w	r3, r3, #8
 800d864:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d866:	7ebb      	ldrb	r3, [r7, #26]
 800d868:	f043 0308 	orr.w	r3, r3, #8
 800d86c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d86e:	7efb      	ldrb	r3, [r7, #27]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d878:	7efb      	ldrb	r3, [r7, #27]
 800d87a:	f023 0301 	bic.w	r3, r3, #1
 800d87e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d880:	7ebb      	ldrb	r3, [r7, #26]
 800d882:	f043 0301 	orr.w	r3, r3, #1
 800d886:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fa f9c3 	bl	8007c1a <lwip_htonl>
 800d894:	4602      	mov	r2, r0
 800d896:	887b      	ldrh	r3, [r7, #2]
 800d898:	18d1      	adds	r1, r2, r3
 800d89a:	7eba      	ldrb	r2, [r7, #26]
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	6939      	ldr	r1, [r7, #16]
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff fea7 	bl	800d5f8 <tcp_create_segment>
 800d8aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d063      	beq.n	800d97a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fb fdd4 	bl	8009464 <pbuf_clen>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	461a      	mov	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8c6:	1a9b      	subs	r3, r3, r2
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	6858      	ldr	r0, [r3, #4]
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	891a      	ldrh	r2, [r3, #8]
 800d8da:	89bb      	ldrh	r3, [r7, #12]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f7fb fbab 	bl	800903c <pbuf_realloc>
  useg->len -= remainder;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	891a      	ldrh	r2, [r3, #8]
 800d8ea:	89bb      	ldrh	r3, [r7, #12]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	899b      	ldrh	r3, [r3, #12]
 800d8fa:	b29c      	uxth	r4, r3
 800d8fc:	7efb      	ldrb	r3, [r7, #27]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	f7fa f975 	bl	8007bf0 <lwip_htons>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	4322      	orrs	r2, r4
 800d910:	b292      	uxth	r2, r2
 800d912:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fb fda3 	bl	8009464 <pbuf_clen>
 800d91e:	4603      	mov	r3, r0
 800d920:	461a      	mov	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d928:	4413      	add	r3, r2
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	4618      	mov	r0, r3
 800d938:	f7fb fd94 	bl	8009464 <pbuf_clen>
 800d93c:	4603      	mov	r3, r0
 800d93e:	461a      	mov	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d946:	4413      	add	r3, r2
 800d948:	b29a      	uxth	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d103      	bne.n	800d96e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	e016      	b.n	800d9a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d972:	bf00      	nop
 800d974:	e002      	b.n	800d97c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d976:	bf00      	nop
 800d978:	e000      	b.n	800d97c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d97a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d006      	beq.n	800d990 <tcp_split_unsent_seg+0x25c>
 800d982:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <tcp_split_unsent_seg+0x274>)
 800d984:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d988:	490d      	ldr	r1, [pc, #52]	; (800d9c0 <tcp_split_unsent_seg+0x28c>)
 800d98a:	4809      	ldr	r0, [pc, #36]	; (800d9b0 <tcp_split_unsent_seg+0x27c>)
 800d98c:	f004 f950 	bl	8011c30 <iprintf>
  if (p != NULL) {
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d996:	6938      	ldr	r0, [r7, #16]
 800d998:	f7fb fcd6 	bl	8009348 <pbuf_free>
  }

  return ERR_MEM;
 800d99c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3724      	adds	r7, #36	; 0x24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd90      	pop	{r4, r7, pc}
 800d9a8:	080142a4 	.word	0x080142a4
 800d9ac:	08014638 	.word	0x08014638
 800d9b0:	080142f8 	.word	0x080142f8
 800d9b4:	0801465c 	.word	0x0801465c
 800d9b8:	08014680 	.word	0x08014680
 800d9bc:	08014690 	.word	0x08014690
 800d9c0:	080146a0 	.word	0x080146a0

0800d9c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d106      	bne.n	800d9e0 <tcp_send_fin+0x1c>
 800d9d2:	4b21      	ldr	r3, [pc, #132]	; (800da58 <tcp_send_fin+0x94>)
 800d9d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d9d8:	4920      	ldr	r1, [pc, #128]	; (800da5c <tcp_send_fin+0x98>)
 800d9da:	4821      	ldr	r0, [pc, #132]	; (800da60 <tcp_send_fin+0x9c>)
 800d9dc:	f004 f928 	bl	8011c30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d02e      	beq.n	800da46 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	e002      	b.n	800d9f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1f8      	bne.n	800d9f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	899b      	ldrh	r3, [r3, #12]
 800da04:	b29b      	uxth	r3, r3
 800da06:	4618      	mov	r0, r3
 800da08:	f7fa f8f2 	bl	8007bf0 <lwip_htons>
 800da0c:	4603      	mov	r3, r0
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	2b00      	cmp	r3, #0
 800da16:	d116      	bne.n	800da46 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	899b      	ldrh	r3, [r3, #12]
 800da1e:	b29c      	uxth	r4, r3
 800da20:	2001      	movs	r0, #1
 800da22:	f7fa f8e5 	bl	8007bf0 <lwip_htons>
 800da26:	4603      	mov	r3, r0
 800da28:	461a      	mov	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	4322      	orrs	r2, r4
 800da30:	b292      	uxth	r2, r2
 800da32:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	8b5b      	ldrh	r3, [r3, #26]
 800da38:	f043 0320 	orr.w	r3, r3, #32
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	e004      	b.n	800da50 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800da46:	2101      	movs	r1, #1
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f80b 	bl	800da64 <tcp_enqueue_flags>
 800da4e:	4603      	mov	r3, r0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	bd90      	pop	{r4, r7, pc}
 800da58:	080142a4 	.word	0x080142a4
 800da5c:	080146ac 	.word	0x080146ac
 800da60:	080142f8 	.word	0x080142f8

0800da64 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08a      	sub	sp, #40	; 0x28
 800da68:	af02      	add	r7, sp, #8
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	f003 0303 	and.w	r3, r3, #3
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d106      	bne.n	800da90 <tcp_enqueue_flags+0x2c>
 800da82:	4b67      	ldr	r3, [pc, #412]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800da84:	f240 4211 	movw	r2, #1041	; 0x411
 800da88:	4966      	ldr	r1, [pc, #408]	; (800dc24 <tcp_enqueue_flags+0x1c0>)
 800da8a:	4867      	ldr	r0, [pc, #412]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800da8c:	f004 f8d0 	bl	8011c30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d106      	bne.n	800daa4 <tcp_enqueue_flags+0x40>
 800da96:	4b62      	ldr	r3, [pc, #392]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800da98:	f240 4213 	movw	r2, #1043	; 0x413
 800da9c:	4963      	ldr	r1, [pc, #396]	; (800dc2c <tcp_enqueue_flags+0x1c8>)
 800da9e:	4862      	ldr	r0, [pc, #392]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800daa0:	f004 f8c6 	bl	8011c30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800daae:	2301      	movs	r3, #1
 800dab0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dab2:	7ffb      	ldrb	r3, [r7, #31]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dac6:	4619      	mov	r1, r3
 800dac8:	2036      	movs	r0, #54	; 0x36
 800daca:	f7fb f959 	bl	8008d80 <pbuf_alloc>
 800dace:	6138      	str	r0, [r7, #16]
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d109      	bne.n	800daea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	8b5b      	ldrh	r3, [r3, #26]
 800dada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dade:	b29a      	uxth	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dae4:	f04f 33ff 	mov.w	r3, #4294967295
 800dae8:	e095      	b.n	800dc16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	895a      	ldrh	r2, [r3, #10]
 800daee:	7dfb      	ldrb	r3, [r7, #23]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d206      	bcs.n	800db04 <tcp_enqueue_flags+0xa0>
 800daf6:	4b4a      	ldr	r3, [pc, #296]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800daf8:	f240 4239 	movw	r2, #1081	; 0x439
 800dafc:	494c      	ldr	r1, [pc, #304]	; (800dc30 <tcp_enqueue_flags+0x1cc>)
 800dafe:	484a      	ldr	r0, [pc, #296]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800db00:	f004 f896 	bl	8011c30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	7ffb      	ldrb	r3, [r7, #31]
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	460b      	mov	r3, r1
 800db10:	6939      	ldr	r1, [r7, #16]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fd70 	bl	800d5f8 <tcp_create_segment>
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d109      	bne.n	800db34 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	8b5b      	ldrh	r3, [r3, #26]
 800db24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db28:	b29a      	uxth	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	e070      	b.n	800dc16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f003 0303 	and.w	r3, r3, #3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d006      	beq.n	800db4e <tcp_enqueue_flags+0xea>
 800db40:	4b37      	ldr	r3, [pc, #220]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800db42:	f240 4242 	movw	r2, #1090	; 0x442
 800db46:	493b      	ldr	r1, [pc, #236]	; (800dc34 <tcp_enqueue_flags+0x1d0>)
 800db48:	4837      	ldr	r0, [pc, #220]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800db4a:	f004 f871 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	891b      	ldrh	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <tcp_enqueue_flags+0x100>
 800db56:	4b32      	ldr	r3, [pc, #200]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800db58:	f240 4243 	movw	r2, #1091	; 0x443
 800db5c:	4936      	ldr	r1, [pc, #216]	; (800dc38 <tcp_enqueue_flags+0x1d4>)
 800db5e:	4832      	ldr	r0, [pc, #200]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800db60:	f004 f866 	bl	8011c30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d103      	bne.n	800db74 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	66da      	str	r2, [r3, #108]	; 0x6c
 800db72:	e00d      	b.n	800db90 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db78:	61bb      	str	r3, [r7, #24]
 800db7a:	e002      	b.n	800db82 <tcp_enqueue_flags+0x11e>
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	61bb      	str	r3, [r7, #24]
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1f8      	bne.n	800db7c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800db98:	78fb      	ldrb	r3, [r7, #3]
 800db9a:	f003 0302 	and.w	r3, r3, #2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d104      	bne.n	800dbac <tcp_enqueue_flags+0x148>
 800dba2:	78fb      	ldrb	r3, [r7, #3]
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dbb6:	78fb      	ldrb	r3, [r7, #3]
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	8b5b      	ldrh	r3, [r3, #26]
 800dbc4:	f043 0320 	orr.w	r3, r3, #32
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fb fc46 	bl	8009464 <pbuf_clen>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00e      	beq.n	800dc14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <tcp_enqueue_flags+0x1b0>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <tcp_enqueue_flags+0x1b0>
 800dc06:	4b06      	ldr	r3, [pc, #24]	; (800dc20 <tcp_enqueue_flags+0x1bc>)
 800dc08:	f240 4265 	movw	r2, #1125	; 0x465
 800dc0c:	490b      	ldr	r1, [pc, #44]	; (800dc3c <tcp_enqueue_flags+0x1d8>)
 800dc0e:	4806      	ldr	r0, [pc, #24]	; (800dc28 <tcp_enqueue_flags+0x1c4>)
 800dc10:	f004 f80e 	bl	8011c30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3720      	adds	r7, #32
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	080142a4 	.word	0x080142a4
 800dc24:	080146c8 	.word	0x080146c8
 800dc28:	080142f8 	.word	0x080142f8
 800dc2c:	08014720 	.word	0x08014720
 800dc30:	08014740 	.word	0x08014740
 800dc34:	0801477c 	.word	0x0801477c
 800dc38:	08014794 	.word	0x08014794
 800dc3c:	080147c0 	.word	0x080147c0

0800dc40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dc40:	b5b0      	push	{r4, r5, r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <tcp_output+0x1c>
 800dc4e:	4b9e      	ldr	r3, [pc, #632]	; (800dec8 <tcp_output+0x288>)
 800dc50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dc54:	499d      	ldr	r1, [pc, #628]	; (800decc <tcp_output+0x28c>)
 800dc56:	489e      	ldr	r0, [pc, #632]	; (800ded0 <tcp_output+0x290>)
 800dc58:	f003 ffea 	bl	8011c30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	7d1b      	ldrb	r3, [r3, #20]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d106      	bne.n	800dc72 <tcp_output+0x32>
 800dc64:	4b98      	ldr	r3, [pc, #608]	; (800dec8 <tcp_output+0x288>)
 800dc66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dc6a:	499a      	ldr	r1, [pc, #616]	; (800ded4 <tcp_output+0x294>)
 800dc6c:	4898      	ldr	r0, [pc, #608]	; (800ded0 <tcp_output+0x290>)
 800dc6e:	f003 ffdf 	bl	8011c30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dc72:	4b99      	ldr	r3, [pc, #612]	; (800ded8 <tcp_output+0x298>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d101      	bne.n	800dc80 <tcp_output+0x40>
    return ERR_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e1ce      	b.n	800e01e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	bf28      	it	cs
 800dc90:	4613      	movcs	r3, r2
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10b      	bne.n	800dcba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f003 0302 	and.w	r3, r3, #2
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 81aa 	beq.w	800e004 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fdcb 	bl	800e84c <tcp_send_empty_ack>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	e1b1      	b.n	800e01e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dcba:	6879      	ldr	r1, [r7, #4]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff fc7c 	bl	800d5c0 <tcp_route>
 800dcc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <tcp_output+0x96>
    return ERR_RTE;
 800dcd0:	f06f 0303 	mvn.w	r3, #3
 800dcd4:	e1a3      	b.n	800e01e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <tcp_output+0xa4>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d111      	bne.n	800dd08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <tcp_output+0xb0>
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	3304      	adds	r3, #4
 800dcee:	e000      	b.n	800dcf2 <tcp_output+0xb2>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d102      	bne.n	800dd00 <tcp_output+0xc0>
      return ERR_RTE;
 800dcfa:	f06f 0303 	mvn.w	r3, #3
 800dcfe:	e18e      	b.n	800e01e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f9 ff83 	bl	8007c1a <lwip_htonl>
 800dd14:	4602      	mov	r2, r0
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1e:	8912      	ldrh	r2, [r2, #8]
 800dd20:	4413      	add	r3, r2
 800dd22:	69ba      	ldr	r2, [r7, #24]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d227      	bcs.n	800dd78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd2e:	461a      	mov	r2, r3
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d114      	bne.n	800dd60 <tcp_output+0x120>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d110      	bne.n	800dd60 <tcp_output+0x120>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10b      	bne.n	800dd60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	8b5b      	ldrh	r3, [r3, #26]
 800dd64:	f003 0302 	and.w	r3, r3, #2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 814d 	beq.w	800e008 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fd6c 	bl	800e84c <tcp_send_empty_ack>
 800dd74:	4603      	mov	r3, r0
 800dd76:	e152      	b.n	800e01e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 811c 	beq.w	800dfc6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dd8e:	e002      	b.n	800dd96 <tcp_output+0x156>
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	623b      	str	r3, [r7, #32]
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1f8      	bne.n	800dd90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dd9e:	e112      	b.n	800dfc6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	899b      	ldrh	r3, [r3, #12]
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f9 ff21 	bl	8007bf0 <lwip_htons>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f003 0304 	and.w	r3, r3, #4
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d006      	beq.n	800ddc8 <tcp_output+0x188>
 800ddba:	4b43      	ldr	r3, [pc, #268]	; (800dec8 <tcp_output+0x288>)
 800ddbc:	f240 5236 	movw	r2, #1334	; 0x536
 800ddc0:	4946      	ldr	r1, [pc, #280]	; (800dedc <tcp_output+0x29c>)
 800ddc2:	4843      	ldr	r0, [pc, #268]	; (800ded0 <tcp_output+0x290>)
 800ddc4:	f003 ff34 	bl	8011c30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01f      	beq.n	800de10 <tcp_output+0x1d0>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	8b5b      	ldrh	r3, [r3, #26]
 800ddd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d119      	bne.n	800de10 <tcp_output+0x1d0>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <tcp_output+0x1bc>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d110      	bne.n	800de10 <tcp_output+0x1d0>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddf2:	891a      	ldrh	r2, [r3, #8]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d209      	bcs.n	800de10 <tcp_output+0x1d0>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de02:	2b00      	cmp	r3, #0
 800de04:	d004      	beq.n	800de10 <tcp_output+0x1d0>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de0c:	2b08      	cmp	r3, #8
 800de0e:	d901      	bls.n	800de14 <tcp_output+0x1d4>
 800de10:	2301      	movs	r3, #1
 800de12:	e000      	b.n	800de16 <tcp_output+0x1d6>
 800de14:	2300      	movs	r3, #0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	8b5b      	ldrh	r3, [r3, #26]
 800de1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de22:	2b00      	cmp	r3, #0
 800de24:	f000 80e4 	beq.w	800dff0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	7d1b      	ldrb	r3, [r3, #20]
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d00d      	beq.n	800de4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	899b      	ldrh	r3, [r3, #12]
 800de36:	b29c      	uxth	r4, r3
 800de38:	2010      	movs	r0, #16
 800de3a:	f7f9 fed9 	bl	8007bf0 <lwip_htons>
 800de3e:	4603      	mov	r3, r0
 800de40:	461a      	mov	r2, r3
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	4322      	orrs	r2, r4
 800de48:	b292      	uxth	r2, r2
 800de4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	6879      	ldr	r1, [r7, #4]
 800de50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de52:	f000 f909 	bl	800e068 <tcp_output_segment>
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800de5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d009      	beq.n	800de76 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8b5b      	ldrh	r3, [r3, #26]
 800de66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	835a      	strh	r2, [r3, #26]
      return err;
 800de70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de74:	e0d3      	b.n	800e01e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	2b02      	cmp	r3, #2
 800de84:	d006      	beq.n	800de94 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8b5b      	ldrh	r3, [r3, #26]
 800de8a:	f023 0303 	bic.w	r3, r3, #3
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f9 febd 	bl	8007c1a <lwip_htonl>
 800dea0:	4604      	mov	r4, r0
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	891b      	ldrh	r3, [r3, #8]
 800dea6:	461d      	mov	r5, r3
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	899b      	ldrh	r3, [r3, #12]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7f9 fe9d 	bl	8007bf0 <lwip_htons>
 800deb6:	4603      	mov	r3, r0
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	f003 0303 	and.w	r3, r3, #3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00e      	beq.n	800dee0 <tcp_output+0x2a0>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e00d      	b.n	800dee2 <tcp_output+0x2a2>
 800dec6:	bf00      	nop
 800dec8:	080142a4 	.word	0x080142a4
 800decc:	080147e8 	.word	0x080147e8
 800ded0:	080142f8 	.word	0x080142f8
 800ded4:	08014800 	.word	0x08014800
 800ded8:	2000b4dc 	.word	0x2000b4dc
 800dedc:	08014828 	.word	0x08014828
 800dee0:	2300      	movs	r3, #0
 800dee2:	442b      	add	r3, r5
 800dee4:	4423      	add	r3, r4
 800dee6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	da02      	bge.n	800defa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800defa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defc:	891b      	ldrh	r3, [r3, #8]
 800defe:	461c      	mov	r4, r3
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	899b      	ldrh	r3, [r3, #12]
 800df06:	b29b      	uxth	r3, r3
 800df08:	4618      	mov	r0, r3
 800df0a:	f7f9 fe71 	bl	8007bf0 <lwip_htons>
 800df0e:	4603      	mov	r3, r0
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 0303 	and.w	r3, r3, #3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <tcp_output+0x2de>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e000      	b.n	800df20 <tcp_output+0x2e0>
 800df1e:	2300      	movs	r3, #0
 800df20:	4423      	add	r3, r4
 800df22:	2b00      	cmp	r3, #0
 800df24:	d049      	beq.n	800dfba <tcp_output+0x37a>
      seg->next = NULL;
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df30:	2b00      	cmp	r3, #0
 800df32:	d105      	bne.n	800df40 <tcp_output+0x300>
        pcb->unacked = seg;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	623b      	str	r3, [r7, #32]
 800df3e:	e03f      	b.n	800dfc0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	f7f9 fe67 	bl	8007c1a <lwip_htonl>
 800df4c:	4604      	mov	r4, r0
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	4618      	mov	r0, r3
 800df56:	f7f9 fe60 	bl	8007c1a <lwip_htonl>
 800df5a:	4603      	mov	r3, r0
 800df5c:	1ae3      	subs	r3, r4, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	da24      	bge.n	800dfac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3370      	adds	r3, #112	; 0x70
 800df66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df68:	e002      	b.n	800df70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d011      	beq.n	800df9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	4618      	mov	r0, r3
 800df82:	f7f9 fe4a 	bl	8007c1a <lwip_htonl>
 800df86:	4604      	mov	r4, r0
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f9 fe43 	bl	8007c1a <lwip_htonl>
 800df94:	4603      	mov	r3, r0
 800df96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dbe6      	blt.n	800df6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e009      	b.n	800dfc0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	623b      	str	r3, [r7, #32]
 800dfb8:	e002      	b.n	800dfc0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800dfba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfbc:	f7fc fc43 	bl	800a846 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d012      	beq.n	800dff2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f9 fe21 	bl	8007c1a <lwip_htonl>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe2:	8912      	ldrh	r2, [r2, #8]
 800dfe4:	4413      	add	r3, r2
  while (seg != NULL &&
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	f4bf aed9 	bcs.w	800dda0 <tcp_output+0x160>
 800dfee:	e000      	b.n	800dff2 <tcp_output+0x3b2>
      break;
 800dff0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d108      	bne.n	800e00c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e002:	e004      	b.n	800e00e <tcp_output+0x3ce>
    goto output_done;
 800e004:	bf00      	nop
 800e006:	e002      	b.n	800e00e <tcp_output+0x3ce>
    goto output_done;
 800e008:	bf00      	nop
 800e00a:	e000      	b.n	800e00e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e00c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	8b5b      	ldrh	r3, [r3, #26]
 800e012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3728      	adds	r7, #40	; 0x28
 800e022:	46bd      	mov	sp, r7
 800e024:	bdb0      	pop	{r4, r5, r7, pc}
 800e026:	bf00      	nop

0800e028 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d106      	bne.n	800e044 <tcp_output_segment_busy+0x1c>
 800e036:	4b09      	ldr	r3, [pc, #36]	; (800e05c <tcp_output_segment_busy+0x34>)
 800e038:	f240 529a 	movw	r2, #1434	; 0x59a
 800e03c:	4908      	ldr	r1, [pc, #32]	; (800e060 <tcp_output_segment_busy+0x38>)
 800e03e:	4809      	ldr	r0, [pc, #36]	; (800e064 <tcp_output_segment_busy+0x3c>)
 800e040:	f003 fdf6 	bl	8011c30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	7b9b      	ldrb	r3, [r3, #14]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d001      	beq.n	800e052 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e04e:	2301      	movs	r3, #1
 800e050:	e000      	b.n	800e054 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	080142a4 	.word	0x080142a4
 800e060:	08014840 	.word	0x08014840
 800e064:	080142f8 	.word	0x080142f8

0800e068 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e068:	b5b0      	push	{r4, r5, r7, lr}
 800e06a:	b08c      	sub	sp, #48	; 0x30
 800e06c:	af04      	add	r7, sp, #16
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <tcp_output_segment+0x20>
 800e07a:	4b63      	ldr	r3, [pc, #396]	; (800e208 <tcp_output_segment+0x1a0>)
 800e07c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e080:	4962      	ldr	r1, [pc, #392]	; (800e20c <tcp_output_segment+0x1a4>)
 800e082:	4863      	ldr	r0, [pc, #396]	; (800e210 <tcp_output_segment+0x1a8>)
 800e084:	f003 fdd4 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d106      	bne.n	800e09c <tcp_output_segment+0x34>
 800e08e:	4b5e      	ldr	r3, [pc, #376]	; (800e208 <tcp_output_segment+0x1a0>)
 800e090:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e094:	495f      	ldr	r1, [pc, #380]	; (800e214 <tcp_output_segment+0x1ac>)
 800e096:	485e      	ldr	r0, [pc, #376]	; (800e210 <tcp_output_segment+0x1a8>)
 800e098:	f003 fdca 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <tcp_output_segment+0x48>
 800e0a2:	4b59      	ldr	r3, [pc, #356]	; (800e208 <tcp_output_segment+0x1a0>)
 800e0a4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e0a8:	495b      	ldr	r1, [pc, #364]	; (800e218 <tcp_output_segment+0x1b0>)
 800e0aa:	4859      	ldr	r0, [pc, #356]	; (800e210 <tcp_output_segment+0x1a8>)
 800e0ac:	f003 fdc0 	bl	8011c30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7ff ffb9 	bl	800e028 <tcp_output_segment_busy>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e09f      	b.n	800e200 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	68dc      	ldr	r4, [r3, #12]
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	f7f9 fda6 	bl	8007c1a <lwip_htonl>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	68dc      	ldr	r4, [r3, #12]
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f7f9 fd88 	bl	8007bf0 <lwip_htons>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e0ec:	441a      	add	r2, r3
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	3314      	adds	r3, #20
 800e0f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	7a9b      	ldrb	r3, [r3, #10]
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	2b00      	cmp	r3, #0
 800e104:	d015      	beq.n	800e132 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	3304      	adds	r3, #4
 800e10a:	461a      	mov	r2, r3
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e112:	f7fc fe8f 	bl	800ae34 <tcp_eff_send_mss_netif>
 800e116:	4603      	mov	r3, r0
 800e118:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e11a:	8b7b      	ldrh	r3, [r7, #26]
 800e11c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e120:	4618      	mov	r0, r3
 800e122:	f7f9 fd7a 	bl	8007c1a <lwip_htonl>
 800e126:	4602      	mov	r2, r0
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	3304      	adds	r3, #4
 800e130:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e138:	2b00      	cmp	r3, #0
 800e13a:	da02      	bge.n	800e142 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	2200      	movs	r2, #0
 800e140:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10c      	bne.n	800e164 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e14a:	4b34      	ldr	r3, [pc, #208]	; (800e21c <tcp_output_segment+0x1b4>)
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f9 fd5e 	bl	8007c1a <lwip_htonl>
 800e15e:	4602      	mov	r2, r0
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	68da      	ldr	r2, [r3, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	8959      	ldrh	r1, [r3, #10]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	8b3a      	ldrh	r2, [r7, #24]
 800e17e:	1a8a      	subs	r2, r1, r2
 800e180:	b292      	uxth	r2, r2
 800e182:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	8919      	ldrh	r1, [r3, #8]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	8b3a      	ldrh	r2, [r7, #24]
 800e190:	1a8a      	subs	r2, r1, r2
 800e192:	b292      	uxth	r2, r2
 800e194:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	68d2      	ldr	r2, [r2, #12]
 800e19e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	741a      	strb	r2, [r3, #16]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	f103 0214 	add.w	r2, r3, #20
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	7a9b      	ldrb	r3, [r3, #10]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	f003 0304 	and.w	r3, r3, #4
 800e1be:	4413      	add	r3, r2
 800e1c0:	69fa      	ldr	r2, [r7, #28]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d006      	beq.n	800e1d4 <tcp_output_segment+0x16c>
 800e1c6:	4b10      	ldr	r3, [pc, #64]	; (800e208 <tcp_output_segment+0x1a0>)
 800e1c8:	f240 621c 	movw	r2, #1564	; 0x61c
 800e1cc:	4914      	ldr	r1, [pc, #80]	; (800e220 <tcp_output_segment+0x1b8>)
 800e1ce:	4810      	ldr	r0, [pc, #64]	; (800e210 <tcp_output_segment+0x1a8>)
 800e1d0:	f003 fd2e 	bl	8011c30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6858      	ldr	r0, [r3, #4]
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	1d1c      	adds	r4, r3, #4
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	7add      	ldrb	r5, [r3, #11]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	7a9b      	ldrb	r3, [r3, #10]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	9202      	str	r2, [sp, #8]
 800e1ea:	2206      	movs	r2, #6
 800e1ec:	9201      	str	r2, [sp, #4]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	f002 fa66 	bl	80106c4 <ip4_output_if>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e1fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bdb0      	pop	{r4, r5, r7, pc}
 800e208:	080142a4 	.word	0x080142a4
 800e20c:	08014868 	.word	0x08014868
 800e210:	080142f8 	.word	0x080142f8
 800e214:	08014888 	.word	0x08014888
 800e218:	080148a8 	.word	0x080148a8
 800e21c:	2000b4cc 	.word	0x2000b4cc
 800e220:	080148cc 	.word	0x080148cc

0800e224 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e224:	b5b0      	push	{r4, r5, r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <tcp_rexmit_rto_prepare+0x1c>
 800e232:	4b31      	ldr	r3, [pc, #196]	; (800e2f8 <tcp_rexmit_rto_prepare+0xd4>)
 800e234:	f240 6263 	movw	r2, #1635	; 0x663
 800e238:	4930      	ldr	r1, [pc, #192]	; (800e2fc <tcp_rexmit_rto_prepare+0xd8>)
 800e23a:	4831      	ldr	r0, [pc, #196]	; (800e300 <tcp_rexmit_rto_prepare+0xdc>)
 800e23c:	f003 fcf8 	bl	8011c30 <iprintf>

  if (pcb->unacked == NULL) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e248:	f06f 0305 	mvn.w	r3, #5
 800e24c:	e050      	b.n	800e2f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	e00b      	b.n	800e26e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f7ff fee6 	bl	800e028 <tcp_output_segment_busy>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e262:	f06f 0305 	mvn.w	r3, #5
 800e266:	e043      	b.n	800e2f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1ef      	bne.n	800e256 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7ff fed6 	bl	800e028 <tcp_output_segment_busy>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d002      	beq.n	800e288 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e282:	f06f 0305 	mvn.w	r3, #5
 800e286:	e033      	b.n	800e2f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	8b5b      	ldrh	r3, [r3, #26]
 800e2a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f9 fcb1 	bl	8007c1a <lwip_htonl>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	891b      	ldrh	r3, [r3, #8]
 800e2be:	461d      	mov	r5, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	899b      	ldrh	r3, [r3, #12]
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7f9 fc91 	bl	8007bf0 <lwip_htons>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	f003 0303 	and.w	r3, r3, #3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <tcp_rexmit_rto_prepare+0xba>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e000      	b.n	800e2e0 <tcp_rexmit_rto_prepare+0xbc>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	442b      	add	r3, r5
 800e2e2:	18e2      	adds	r2, r4, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f8:	080142a4 	.word	0x080142a4
 800e2fc:	080148e0 	.word	0x080148e0
 800e300:	080142f8 	.word	0x080142f8

0800e304 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <tcp_rexmit_rto_commit+0x1c>
 800e312:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <tcp_rexmit_rto_commit+0x44>)
 800e314:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e318:	490c      	ldr	r1, [pc, #48]	; (800e34c <tcp_rexmit_rto_commit+0x48>)
 800e31a:	480d      	ldr	r0, [pc, #52]	; (800e350 <tcp_rexmit_rto_commit+0x4c>)
 800e31c:	f003 fc88 	bl	8011c30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e326:	2bff      	cmp	r3, #255	; 0xff
 800e328:	d007      	beq.n	800e33a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e330:	3301      	adds	r3, #1
 800e332:	b2da      	uxtb	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff fc80 	bl	800dc40 <tcp_output>
}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	080142a4 	.word	0x080142a4
 800e34c:	08014904 	.word	0x08014904
 800e350:	080142f8 	.word	0x080142f8

0800e354 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <tcp_rexmit_rto+0x1c>
 800e362:	4b0a      	ldr	r3, [pc, #40]	; (800e38c <tcp_rexmit_rto+0x38>)
 800e364:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e368:	4909      	ldr	r1, [pc, #36]	; (800e390 <tcp_rexmit_rto+0x3c>)
 800e36a:	480a      	ldr	r0, [pc, #40]	; (800e394 <tcp_rexmit_rto+0x40>)
 800e36c:	f003 fc60 	bl	8011c30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ff57 	bl	800e224 <tcp_rexmit_rto_prepare>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d102      	bne.n	800e382 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff ffc1 	bl	800e304 <tcp_rexmit_rto_commit>
  }
}
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	080142a4 	.word	0x080142a4
 800e390:	08014928 	.word	0x08014928
 800e394:	080142f8 	.word	0x080142f8

0800e398 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <tcp_rexmit+0x1c>
 800e3a6:	4b2f      	ldr	r3, [pc, #188]	; (800e464 <tcp_rexmit+0xcc>)
 800e3a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e3ac:	492e      	ldr	r1, [pc, #184]	; (800e468 <tcp_rexmit+0xd0>)
 800e3ae:	482f      	ldr	r0, [pc, #188]	; (800e46c <tcp_rexmit+0xd4>)
 800e3b0:	f003 fc3e 	bl	8011c30 <iprintf>

  if (pcb->unacked == NULL) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d102      	bne.n	800e3c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e3bc:	f06f 0305 	mvn.w	r3, #5
 800e3c0:	e04c      	b.n	800e45c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e3c8:	68b8      	ldr	r0, [r7, #8]
 800e3ca:	f7ff fe2d 	bl	800e028 <tcp_output_segment_busy>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e3d4:	f06f 0305 	mvn.w	r3, #5
 800e3d8:	e040      	b.n	800e45c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	336c      	adds	r3, #108	; 0x6c
 800e3e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3e8:	e002      	b.n	800e3f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d011      	beq.n	800e41c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	4618      	mov	r0, r3
 800e402:	f7f9 fc0a 	bl	8007c1a <lwip_htonl>
 800e406:	4604      	mov	r4, r0
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f9 fc03 	bl	8007c1a <lwip_htonl>
 800e414:	4603      	mov	r3, r0
 800e416:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dbe6      	blt.n	800e3ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d103      	bne.n	800e43a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e440:	2bff      	cmp	r3, #255	; 0xff
 800e442:	d007      	beq.n	800e454 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e44a:	3301      	adds	r3, #1
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	bd90      	pop	{r4, r7, pc}
 800e464:	080142a4 	.word	0x080142a4
 800e468:	08014944 	.word	0x08014944
 800e46c:	080142f8 	.word	0x080142f8

0800e470 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d106      	bne.n	800e48c <tcp_rexmit_fast+0x1c>
 800e47e:	4b2a      	ldr	r3, [pc, #168]	; (800e528 <tcp_rexmit_fast+0xb8>)
 800e480:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e484:	4929      	ldr	r1, [pc, #164]	; (800e52c <tcp_rexmit_fast+0xbc>)
 800e486:	482a      	ldr	r0, [pc, #168]	; (800e530 <tcp_rexmit_fast+0xc0>)
 800e488:	f003 fbd2 	bl	8011c30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e490:	2b00      	cmp	r3, #0
 800e492:	d045      	beq.n	800e520 <tcp_rexmit_fast+0xb0>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	8b5b      	ldrh	r3, [r3, #26]
 800e498:	f003 0304 	and.w	r3, r3, #4
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d13f      	bne.n	800e520 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff ff79 	bl	800e398 <tcp_rexmit>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d139      	bne.n	800e520 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	bf28      	it	cs
 800e4bc:	4613      	movcs	r3, r2
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da00      	bge.n	800e4c6 <tcp_rexmit_fast+0x56>
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	105b      	asrs	r3, r3, #1
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d206      	bcs.n	800e4f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	0049      	lsls	r1, r1, #1
 800e4fe:	440b      	add	r3, r1
 800e500:	b29b      	uxth	r3, r3
 800e502:	4413      	add	r3, r2
 800e504:	b29a      	uxth	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	8b5b      	ldrh	r3, [r3, #26]
 800e510:	f043 0304 	orr.w	r3, r3, #4
 800e514:	b29a      	uxth	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	080142a4 	.word	0x080142a4
 800e52c:	0801495c 	.word	0x0801495c
 800e530:	080142f8 	.word	0x080142f8

0800e534 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	607b      	str	r3, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	817b      	strh	r3, [r7, #10]
 800e542:	4613      	mov	r3, r2
 800e544:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e546:	897a      	ldrh	r2, [r7, #10]
 800e548:	893b      	ldrh	r3, [r7, #8]
 800e54a:	4413      	add	r3, r2
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	3314      	adds	r3, #20
 800e550:	b29b      	uxth	r3, r3
 800e552:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e556:	4619      	mov	r1, r3
 800e558:	2022      	movs	r0, #34	; 0x22
 800e55a:	f7fa fc11 	bl	8008d80 <pbuf_alloc>
 800e55e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d04d      	beq.n	800e602 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e566:	897b      	ldrh	r3, [r7, #10]
 800e568:	3313      	adds	r3, #19
 800e56a:	697a      	ldr	r2, [r7, #20]
 800e56c:	8952      	ldrh	r2, [r2, #10]
 800e56e:	4293      	cmp	r3, r2
 800e570:	db06      	blt.n	800e580 <tcp_output_alloc_header_common+0x4c>
 800e572:	4b26      	ldr	r3, [pc, #152]	; (800e60c <tcp_output_alloc_header_common+0xd8>)
 800e574:	f240 7223 	movw	r2, #1827	; 0x723
 800e578:	4925      	ldr	r1, [pc, #148]	; (800e610 <tcp_output_alloc_header_common+0xdc>)
 800e57a:	4826      	ldr	r0, [pc, #152]	; (800e614 <tcp_output_alloc_header_common+0xe0>)
 800e57c:	f003 fb58 	bl	8011c30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e586:	8c3b      	ldrh	r3, [r7, #32]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f9 fb31 	bl	8007bf0 <lwip_htons>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e598:	4618      	mov	r0, r3
 800e59a:	f7f9 fb29 	bl	8007bf0 <lwip_htons>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f7f9 fb34 	bl	8007c1a <lwip_htonl>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e5b8:	897b      	ldrh	r3, [r7, #10]
 800e5ba:	089b      	lsrs	r3, r3, #2
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	3305      	adds	r3, #5
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	031b      	lsls	r3, r3, #12
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7f9 fb0d 	bl	8007bf0 <lwip_htons>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	461a      	mov	r2, r3
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e5de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7f9 fb05 	bl	8007bf0 <lwip_htons>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	741a      	strb	r2, [r3, #16]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	749a      	strb	r2, [r3, #18]
 800e5fe:	2200      	movs	r2, #0
 800e600:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e602:	697b      	ldr	r3, [r7, #20]
}
 800e604:	4618      	mov	r0, r3
 800e606:	3718      	adds	r7, #24
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	080142a4 	.word	0x080142a4
 800e610:	0801497c 	.word	0x0801497c
 800e614:	080142f8 	.word	0x080142f8

0800e618 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e618:	b5b0      	push	{r4, r5, r7, lr}
 800e61a:	b08a      	sub	sp, #40	; 0x28
 800e61c:	af04      	add	r7, sp, #16
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	607b      	str	r3, [r7, #4]
 800e622:	460b      	mov	r3, r1
 800e624:	817b      	strh	r3, [r7, #10]
 800e626:	4613      	mov	r3, r2
 800e628:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d106      	bne.n	800e63e <tcp_output_alloc_header+0x26>
 800e630:	4b15      	ldr	r3, [pc, #84]	; (800e688 <tcp_output_alloc_header+0x70>)
 800e632:	f240 7242 	movw	r2, #1858	; 0x742
 800e636:	4915      	ldr	r1, [pc, #84]	; (800e68c <tcp_output_alloc_header+0x74>)
 800e638:	4815      	ldr	r0, [pc, #84]	; (800e690 <tcp_output_alloc_header+0x78>)
 800e63a:	f003 faf9 	bl	8011c30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	8adb      	ldrh	r3, [r3, #22]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	8b12      	ldrh	r2, [r2, #24]
 800e64a:	68f9      	ldr	r1, [r7, #12]
 800e64c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e64e:	893d      	ldrh	r5, [r7, #8]
 800e650:	897c      	ldrh	r4, [r7, #10]
 800e652:	9103      	str	r1, [sp, #12]
 800e654:	2110      	movs	r1, #16
 800e656:	9102      	str	r1, [sp, #8]
 800e658:	9201      	str	r2, [sp, #4]
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	462a      	mov	r2, r5
 800e660:	4621      	mov	r1, r4
 800e662:	f7ff ff67 	bl	800e534 <tcp_output_alloc_header_common>
 800e666:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d006      	beq.n	800e67c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e676:	441a      	add	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e67c:	697b      	ldr	r3, [r7, #20]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3718      	adds	r7, #24
 800e682:	46bd      	mov	sp, r7
 800e684:	bdb0      	pop	{r4, r5, r7, pc}
 800e686:	bf00      	nop
 800e688:	080142a4 	.word	0x080142a4
 800e68c:	080149ac 	.word	0x080149ac
 800e690:	080142f8 	.word	0x080142f8

0800e694 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	4611      	mov	r1, r2
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	71fb      	strb	r3, [r7, #7]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <tcp_output_fill_options+0x2e>
 800e6b4:	4b13      	ldr	r3, [pc, #76]	; (800e704 <tcp_output_fill_options+0x70>)
 800e6b6:	f240 7256 	movw	r2, #1878	; 0x756
 800e6ba:	4913      	ldr	r1, [pc, #76]	; (800e708 <tcp_output_fill_options+0x74>)
 800e6bc:	4813      	ldr	r0, [pc, #76]	; (800e70c <tcp_output_fill_options+0x78>)
 800e6be:	f003 fab7 	bl	8011c30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	3314      	adds	r3, #20
 800e6cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	f103 0214 	add.w	r2, r3, #20
 800e6d4:	8bfb      	ldrh	r3, [r7, #30]
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4619      	mov	r1, r3
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	f003 0304 	and.w	r3, r3, #4
 800e6e2:	440b      	add	r3, r1
 800e6e4:	4413      	add	r3, r2
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d006      	beq.n	800e6fa <tcp_output_fill_options+0x66>
 800e6ec:	4b05      	ldr	r3, [pc, #20]	; (800e704 <tcp_output_fill_options+0x70>)
 800e6ee:	f240 7275 	movw	r2, #1909	; 0x775
 800e6f2:	4907      	ldr	r1, [pc, #28]	; (800e710 <tcp_output_fill_options+0x7c>)
 800e6f4:	4805      	ldr	r0, [pc, #20]	; (800e70c <tcp_output_fill_options+0x78>)
 800e6f6:	f003 fa9b 	bl	8011c30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e6fa:	bf00      	nop
 800e6fc:	3720      	adds	r7, #32
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	080142a4 	.word	0x080142a4
 800e708:	080149d4 	.word	0x080149d4
 800e70c:	080142f8 	.word	0x080142f8
 800e710:	080148cc 	.word	0x080148cc

0800e714 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	; 0x28
 800e718:	af04      	add	r7, sp, #16
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
 800e720:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d106      	bne.n	800e736 <tcp_output_control_segment+0x22>
 800e728:	4b1c      	ldr	r3, [pc, #112]	; (800e79c <tcp_output_control_segment+0x88>)
 800e72a:	f240 7287 	movw	r2, #1927	; 0x787
 800e72e:	491c      	ldr	r1, [pc, #112]	; (800e7a0 <tcp_output_control_segment+0x8c>)
 800e730:	481c      	ldr	r0, [pc, #112]	; (800e7a4 <tcp_output_control_segment+0x90>)
 800e732:	f003 fa7d 	bl	8011c30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	6879      	ldr	r1, [r7, #4]
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7fe ff40 	bl	800d5c0 <tcp_route>
 800e740:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d102      	bne.n	800e74e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e748:	23fc      	movs	r3, #252	; 0xfc
 800e74a:	75fb      	strb	r3, [r7, #23]
 800e74c:	e01c      	b.n	800e788 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d006      	beq.n	800e762 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	7adb      	ldrb	r3, [r3, #11]
 800e758:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	7a9b      	ldrb	r3, [r3, #10]
 800e75e:	757b      	strb	r3, [r7, #21]
 800e760:	e003      	b.n	800e76a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e762:	23ff      	movs	r3, #255	; 0xff
 800e764:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e76a:	7dba      	ldrb	r2, [r7, #22]
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	9302      	str	r3, [sp, #8]
 800e770:	2306      	movs	r3, #6
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	7d7b      	ldrb	r3, [r7, #21]
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	6879      	ldr	r1, [r7, #4]
 800e77e:	68b8      	ldr	r0, [r7, #8]
 800e780:	f001 ffa0 	bl	80106c4 <ip4_output_if>
 800e784:	4603      	mov	r3, r0
 800e786:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e788:	68b8      	ldr	r0, [r7, #8]
 800e78a:	f7fa fddd 	bl	8009348 <pbuf_free>
  return err;
 800e78e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	080142a4 	.word	0x080142a4
 800e7a0:	080149fc 	.word	0x080149fc
 800e7a4:	080142f8 	.word	0x080142f8

0800e7a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e7a8:	b590      	push	{r4, r7, lr}
 800e7aa:	b08b      	sub	sp, #44	; 0x2c
 800e7ac:	af04      	add	r7, sp, #16
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
 800e7b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d106      	bne.n	800e7ca <tcp_rst+0x22>
 800e7bc:	4b1f      	ldr	r3, [pc, #124]	; (800e83c <tcp_rst+0x94>)
 800e7be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e7c2:	491f      	ldr	r1, [pc, #124]	; (800e840 <tcp_rst+0x98>)
 800e7c4:	481f      	ldr	r0, [pc, #124]	; (800e844 <tcp_rst+0x9c>)
 800e7c6:	f003 fa33 	bl	8011c30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d106      	bne.n	800e7de <tcp_rst+0x36>
 800e7d0:	4b1a      	ldr	r3, [pc, #104]	; (800e83c <tcp_rst+0x94>)
 800e7d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e7d6:	491c      	ldr	r1, [pc, #112]	; (800e848 <tcp_rst+0xa0>)
 800e7d8:	481a      	ldr	r0, [pc, #104]	; (800e844 <tcp_rst+0x9c>)
 800e7da:	f003 fa29 	bl	8011c30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e7e2:	f246 0308 	movw	r3, #24584	; 0x6008
 800e7e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ea:	b29c      	uxth	r4, r3
 800e7ec:	68b8      	ldr	r0, [r7, #8]
 800e7ee:	f7f9 fa14 	bl	8007c1a <lwip_htonl>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	8abb      	ldrh	r3, [r7, #20]
 800e7f6:	9303      	str	r3, [sp, #12]
 800e7f8:	2314      	movs	r3, #20
 800e7fa:	9302      	str	r3, [sp, #8]
 800e7fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	4613      	mov	r3, r2
 800e806:	2200      	movs	r2, #0
 800e808:	4621      	mov	r1, r4
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff fe92 	bl	800e534 <tcp_output_alloc_header_common>
 800e810:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00c      	beq.n	800e832 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e818:	7dfb      	ldrb	r3, [r7, #23]
 800e81a:	2200      	movs	r2, #0
 800e81c:	6939      	ldr	r1, [r7, #16]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f7ff ff38 	bl	800e694 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	6939      	ldr	r1, [r7, #16]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff ff72 	bl	800e714 <tcp_output_control_segment>
 800e830:	e000      	b.n	800e834 <tcp_rst+0x8c>
    return;
 800e832:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e834:	371c      	adds	r7, #28
 800e836:	46bd      	mov	sp, r7
 800e838:	bd90      	pop	{r4, r7, pc}
 800e83a:	bf00      	nop
 800e83c:	080142a4 	.word	0x080142a4
 800e840:	08014a28 	.word	0x08014a28
 800e844:	080142f8 	.word	0x080142f8
 800e848:	08014a44 	.word	0x08014a44

0800e84c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e84c:	b590      	push	{r4, r7, lr}
 800e84e:	b087      	sub	sp, #28
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <tcp_send_empty_ack+0x24>
 800e862:	4b28      	ldr	r3, [pc, #160]	; (800e904 <tcp_send_empty_ack+0xb8>)
 800e864:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e868:	4927      	ldr	r1, [pc, #156]	; (800e908 <tcp_send_empty_ack+0xbc>)
 800e86a:	4828      	ldr	r0, [pc, #160]	; (800e90c <tcp_send_empty_ack+0xc0>)
 800e86c:	f003 f9e0 	bl	8011c30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e870:	7dfb      	ldrb	r3, [r7, #23]
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	b2db      	uxtb	r3, r3
 800e876:	f003 0304 	and.w	r3, r3, #4
 800e87a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e87c:	7d7b      	ldrb	r3, [r7, #21]
 800e87e:	b29c      	uxth	r4, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e884:	4618      	mov	r0, r3
 800e886:	f7f9 f9c8 	bl	8007c1a <lwip_htonl>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2200      	movs	r2, #0
 800e88e:	4621      	mov	r1, r4
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7ff fec1 	bl	800e618 <tcp_output_alloc_header>
 800e896:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d109      	bne.n	800e8b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	8b5b      	ldrh	r3, [r3, #26]
 800e8a2:	f043 0303 	orr.w	r3, r3, #3
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e8ac:	f06f 0301 	mvn.w	r3, #1
 800e8b0:	e023      	b.n	800e8fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e8b2:	7dbb      	ldrb	r3, [r7, #22]
 800e8b4:	7dfa      	ldrb	r2, [r7, #23]
 800e8b6:	6939      	ldr	r1, [r7, #16]
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff feeb 	bl	800e694 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	6939      	ldr	r1, [r7, #16]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff ff24 	bl	800e714 <tcp_output_control_segment>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8b5b      	ldrh	r3, [r3, #26]
 800e8dc:	f043 0303 	orr.w	r3, r3, #3
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	835a      	strh	r2, [r3, #26]
 800e8e6:	e006      	b.n	800e8f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8b5b      	ldrh	r3, [r3, #26]
 800e8ec:	f023 0303 	bic.w	r3, r3, #3
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	371c      	adds	r7, #28
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd90      	pop	{r4, r7, pc}
 800e902:	bf00      	nop
 800e904:	080142a4 	.word	0x080142a4
 800e908:	08014a60 	.word	0x08014a60
 800e90c:	080142f8 	.word	0x080142f8

0800e910 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b087      	sub	sp, #28
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e918:	2300      	movs	r3, #0
 800e91a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d106      	bne.n	800e930 <tcp_keepalive+0x20>
 800e922:	4b18      	ldr	r3, [pc, #96]	; (800e984 <tcp_keepalive+0x74>)
 800e924:	f640 0224 	movw	r2, #2084	; 0x824
 800e928:	4917      	ldr	r1, [pc, #92]	; (800e988 <tcp_keepalive+0x78>)
 800e92a:	4818      	ldr	r0, [pc, #96]	; (800e98c <tcp_keepalive+0x7c>)
 800e92c:	f003 f980 	bl	8011c30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e930:	7dfb      	ldrb	r3, [r7, #23]
 800e932:	b29c      	uxth	r4, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e938:	3b01      	subs	r3, #1
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7f9 f96d 	bl	8007c1a <lwip_htonl>
 800e940:	4603      	mov	r3, r0
 800e942:	2200      	movs	r2, #0
 800e944:	4621      	mov	r1, r4
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fe66 	bl	800e618 <tcp_output_alloc_header>
 800e94c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d102      	bne.n	800e95a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	e010      	b.n	800e97c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	2200      	movs	r2, #0
 800e95e:	6939      	ldr	r1, [r7, #16]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff fe97 	bl	800e694 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3304      	adds	r3, #4
 800e96c:	6939      	ldr	r1, [r7, #16]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff fed0 	bl	800e714 <tcp_output_control_segment>
 800e974:	4603      	mov	r3, r0
 800e976:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	371c      	adds	r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	080142a4 	.word	0x080142a4
 800e988:	08014a80 	.word	0x08014a80
 800e98c:	080142f8 	.word	0x080142f8

0800e990 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e990:	b590      	push	{r4, r7, lr}
 800e992:	b08b      	sub	sp, #44	; 0x2c
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e998:	2300      	movs	r3, #0
 800e99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d106      	bne.n	800e9b2 <tcp_zero_window_probe+0x22>
 800e9a4:	4b4c      	ldr	r3, [pc, #304]	; (800ead8 <tcp_zero_window_probe+0x148>)
 800e9a6:	f640 024f 	movw	r2, #2127	; 0x84f
 800e9aa:	494c      	ldr	r1, [pc, #304]	; (800eadc <tcp_zero_window_probe+0x14c>)
 800e9ac:	484c      	ldr	r0, [pc, #304]	; (800eae0 <tcp_zero_window_probe+0x150>)
 800e9ae:	f003 f93f 	bl	8011c30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d101      	bne.n	800e9c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e086      	b.n	800ead0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e9c8:	2bff      	cmp	r3, #255	; 0xff
 800e9ca:	d007      	beq.n	800e9dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	b2da      	uxtb	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	899b      	ldrh	r3, [r3, #12]
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f9 f903 	bl	8007bf0 <lwip_htons>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d005      	beq.n	800ea02 <tcp_zero_window_probe+0x72>
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	891b      	ldrh	r3, [r3, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <tcp_zero_window_probe+0x72>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e000      	b.n	800ea04 <tcp_zero_window_probe+0x74>
 800ea02:	2300      	movs	r3, #0
 800ea04:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea06:	7ffb      	ldrb	r3, [r7, #31]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	bf0c      	ite	eq
 800ea0c:	2301      	moveq	r3, #1
 800ea0e:	2300      	movne	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea18:	b299      	uxth	r1, r3
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	8bba      	ldrh	r2, [r7, #28]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff fdf8 	bl	800e618 <tcp_output_alloc_header>
 800ea28:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d102      	bne.n	800ea36 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea30:	f04f 33ff 	mov.w	r3, #4294967295
 800ea34:	e04c      	b.n	800ead0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea3c:	7ffb      	ldrb	r3, [r7, #31]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d011      	beq.n	800ea66 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	899b      	ldrh	r3, [r3, #12]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	b21b      	sxth	r3, r3
 800ea4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea4e:	b21c      	sxth	r4, r3
 800ea50:	2011      	movs	r0, #17
 800ea52:	f7f9 f8cd 	bl	8007bf0 <lwip_htons>
 800ea56:	4603      	mov	r3, r0
 800ea58:	b21b      	sxth	r3, r3
 800ea5a:	4323      	orrs	r3, r4
 800ea5c:	b21b      	sxth	r3, r3
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	819a      	strh	r2, [r3, #12]
 800ea64:	e010      	b.n	800ea88 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	3314      	adds	r3, #20
 800ea6c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	6858      	ldr	r0, [r3, #4]
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	891a      	ldrh	r2, [r3, #8]
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	891b      	ldrh	r3, [r3, #8]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	2201      	movs	r2, #1
 800ea82:	6939      	ldr	r1, [r7, #16]
 800ea84:	f7fa fe56 	bl	8009734 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7f9 f8c3 	bl	8007c1a <lwip_htonl>
 800ea94:	4603      	mov	r3, r0
 800ea96:	3301      	adds	r3, #1
 800ea98:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	da02      	bge.n	800eaac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	2200      	movs	r2, #0
 800eab2:	69b9      	ldr	r1, [r7, #24]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff fded 	bl	800e694 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	69b9      	ldr	r1, [r7, #24]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff fe26 	bl	800e714 <tcp_output_control_segment>
 800eac8:	4603      	mov	r3, r0
 800eaca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eacc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	372c      	adds	r7, #44	; 0x2c
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd90      	pop	{r4, r7, pc}
 800ead8:	080142a4 	.word	0x080142a4
 800eadc:	08014a9c 	.word	0x08014a9c
 800eae0:	080142f8 	.word	0x080142f8

0800eae4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eaec:	f7fa ff10 	bl	8009910 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <tcpip_tcp_timer+0x38>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d103      	bne.n	800eb00 <tcpip_tcp_timer+0x1c>
 800eaf8:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <tcpip_tcp_timer+0x3c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d005      	beq.n	800eb0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb00:	2200      	movs	r2, #0
 800eb02:	4908      	ldr	r1, [pc, #32]	; (800eb24 <tcpip_tcp_timer+0x40>)
 800eb04:	20fa      	movs	r0, #250	; 0xfa
 800eb06:	f000 f8f3 	bl	800ecf0 <sys_timeout>
 800eb0a:	e003      	b.n	800eb14 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb0c:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <tcpip_tcp_timer+0x44>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	601a      	str	r2, [r3, #0]
  }
}
 800eb12:	bf00      	nop
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	2000b4c8 	.word	0x2000b4c8
 800eb20:	2000b4d8 	.word	0x2000b4d8
 800eb24:	0800eae5 	.word	0x0800eae5
 800eb28:	20004b00 	.word	0x20004b00

0800eb2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb30:	4b0a      	ldr	r3, [pc, #40]	; (800eb5c <tcp_timer_needed+0x30>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10f      	bne.n	800eb58 <tcp_timer_needed+0x2c>
 800eb38:	4b09      	ldr	r3, [pc, #36]	; (800eb60 <tcp_timer_needed+0x34>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d103      	bne.n	800eb48 <tcp_timer_needed+0x1c>
 800eb40:	4b08      	ldr	r3, [pc, #32]	; (800eb64 <tcp_timer_needed+0x38>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d007      	beq.n	800eb58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eb48:	4b04      	ldr	r3, [pc, #16]	; (800eb5c <tcp_timer_needed+0x30>)
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb4e:	2200      	movs	r2, #0
 800eb50:	4905      	ldr	r1, [pc, #20]	; (800eb68 <tcp_timer_needed+0x3c>)
 800eb52:	20fa      	movs	r0, #250	; 0xfa
 800eb54:	f000 f8cc 	bl	800ecf0 <sys_timeout>
  }
}
 800eb58:	bf00      	nop
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	20004b00 	.word	0x20004b00
 800eb60:	2000b4c8 	.word	0x2000b4c8
 800eb64:	2000b4d8 	.word	0x2000b4d8
 800eb68:	0800eae5 	.word	0x0800eae5

0800eb6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b086      	sub	sp, #24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eb78:	200a      	movs	r0, #10
 800eb7a:	f7f9 fcef 	bl	800855c <memp_malloc>
 800eb7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d109      	bne.n	800eb9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d151      	bne.n	800ec30 <sys_timeout_abs+0xc4>
 800eb8c:	4b2a      	ldr	r3, [pc, #168]	; (800ec38 <sys_timeout_abs+0xcc>)
 800eb8e:	22be      	movs	r2, #190	; 0xbe
 800eb90:	492a      	ldr	r1, [pc, #168]	; (800ec3c <sys_timeout_abs+0xd0>)
 800eb92:	482b      	ldr	r0, [pc, #172]	; (800ec40 <sys_timeout_abs+0xd4>)
 800eb94:	f003 f84c 	bl	8011c30 <iprintf>
    return;
 800eb98:	e04a      	b.n	800ec30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ebb2:	4b24      	ldr	r3, [pc, #144]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d103      	bne.n	800ebc2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ebba:	4a22      	ldr	r2, [pc, #136]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	6013      	str	r3, [r2, #0]
    return;
 800ebc0:	e037      	b.n	800ec32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	4b1f      	ldr	r3, [pc, #124]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	0fdb      	lsrs	r3, r3, #31
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ebda:	4b1a      	ldr	r3, [pc, #104]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ebe2:	4a18      	ldr	r2, [pc, #96]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	6013      	str	r3, [r2, #0]
 800ebe8:	e023      	b.n	800ec32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ebea:	4b16      	ldr	r3, [pc, #88]	; (800ec44 <sys_timeout_abs+0xd8>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	e01a      	b.n	800ec28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00b      	beq.n	800ec12 <sys_timeout_abs+0xa6>
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	0fdb      	lsrs	r3, r3, #31
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d007      	beq.n	800ec22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	601a      	str	r2, [r3, #0]
        break;
 800ec20:	e007      	b.n	800ec32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e1      	bne.n	800ebf2 <sys_timeout_abs+0x86>
 800ec2e:	e000      	b.n	800ec32 <sys_timeout_abs+0xc6>
    return;
 800ec30:	bf00      	nop
      }
    }
  }
}
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	08014ac0 	.word	0x08014ac0
 800ec3c:	08014af4 	.word	0x08014af4
 800ec40:	08014b34 	.word	0x08014b34
 800ec44:	20004af8 	.word	0x20004af8

0800ec48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4798      	blx	r3

  now = sys_now();
 800ec5a:	f7f4 fe03 	bl	8003864 <sys_now>
 800ec5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	4b0f      	ldr	r3, [pc, #60]	; (800eca4 <lwip_cyclic_timer+0x5c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4413      	add	r3, r2
 800ec6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	0fdb      	lsrs	r3, r3, #31
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d009      	beq.n	800ec92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	4413      	add	r3, r2
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	4907      	ldr	r1, [pc, #28]	; (800eca8 <lwip_cyclic_timer+0x60>)
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff ff6e 	bl	800eb6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ec90:	e004      	b.n	800ec9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	4904      	ldr	r1, [pc, #16]	; (800eca8 <lwip_cyclic_timer+0x60>)
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f7ff ff68 	bl	800eb6c <sys_timeout_abs>
}
 800ec9c:	bf00      	nop
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20004afc 	.word	0x20004afc
 800eca8:	0800ec49 	.word	0x0800ec49

0800ecac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	607b      	str	r3, [r7, #4]
 800ecb6:	e00e      	b.n	800ecd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ecb8:	4a0b      	ldr	r2, [pc, #44]	; (800ece8 <sys_timeouts_init+0x3c>)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	00db      	lsls	r3, r3, #3
 800ecc4:	4a08      	ldr	r2, [pc, #32]	; (800ece8 <sys_timeouts_init+0x3c>)
 800ecc6:	4413      	add	r3, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4908      	ldr	r1, [pc, #32]	; (800ecec <sys_timeouts_init+0x40>)
 800eccc:	f000 f810 	bl	800ecf0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	607b      	str	r3, [r7, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d9ed      	bls.n	800ecb8 <sys_timeouts_init+0xc>
  }
}
 800ecdc:	bf00      	nop
 800ecde:	bf00      	nop
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	080156fc 	.word	0x080156fc
 800ecec:	0800ec49 	.word	0x0800ec49

0800ecf0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed02:	d306      	bcc.n	800ed12 <sys_timeout+0x22>
 800ed04:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <sys_timeout+0x40>)
 800ed06:	f240 1229 	movw	r2, #297	; 0x129
 800ed0a:	490a      	ldr	r1, [pc, #40]	; (800ed34 <sys_timeout+0x44>)
 800ed0c:	480a      	ldr	r0, [pc, #40]	; (800ed38 <sys_timeout+0x48>)
 800ed0e:	f002 ff8f 	bl	8011c30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed12:	f7f4 fda7 	bl	8003864 <sys_now>
 800ed16:	4602      	mov	r2, r0
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	68b9      	ldr	r1, [r7, #8]
 800ed22:	6978      	ldr	r0, [r7, #20]
 800ed24:	f7ff ff22 	bl	800eb6c <sys_timeout_abs>
#endif
}
 800ed28:	bf00      	nop
 800ed2a:	3718      	adds	r7, #24
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	08014ac0 	.word	0x08014ac0
 800ed34:	08014b5c 	.word	0x08014b5c
 800ed38:	08014b34 	.word	0x08014b34

0800ed3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ed42:	f7f4 fd8f 	bl	8003864 <sys_now>
 800ed46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ed48:	4b17      	ldr	r3, [pc, #92]	; (800eda8 <sys_check_timeouts+0x6c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d022      	beq.n	800ed9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	0fdb      	lsrs	r3, r3, #31
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d11a      	bne.n	800ed9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a0e      	ldr	r2, [pc, #56]	; (800eda8 <sys_check_timeouts+0x6c>)
 800ed6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4a0a      	ldr	r2, [pc, #40]	; (800edac <sys_check_timeouts+0x70>)
 800ed82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ed84:	68b9      	ldr	r1, [r7, #8]
 800ed86:	200a      	movs	r0, #10
 800ed88:	f7f9 fc3a 	bl	8008600 <memp_free>
    if (handler != NULL) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d0da      	beq.n	800ed48 <sys_check_timeouts+0xc>
      handler(arg);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6838      	ldr	r0, [r7, #0]
 800ed96:	4798      	blx	r3
  do {
 800ed98:	e7d6      	b.n	800ed48 <sys_check_timeouts+0xc>
      return;
 800ed9a:	bf00      	nop
 800ed9c:	e000      	b.n	800eda0 <sys_check_timeouts+0x64>
      return;
 800ed9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20004af8 	.word	0x20004af8
 800edac:	20004afc 	.word	0x20004afc

0800edb0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800edb6:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <sys_timeouts_sleeptime+0x60>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d102      	bne.n	800edc4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800edbe:	f04f 33ff 	mov.w	r3, #4294967295
 800edc2:	e020      	b.n	800ee06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800edc4:	f7f4 fd4e 	bl	8003864 <sys_now>
 800edc8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800edca:	4b11      	ldr	r3, [pc, #68]	; (800ee10 <sys_timeouts_sleeptime+0x60>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	0fdb      	lsrs	r3, r3, #31
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <sys_timeouts_sleeptime+0x34>
    return 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e010      	b.n	800ee06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ede4:	4b0a      	ldr	r3, [pc, #40]	; (800ee10 <sys_timeouts_sleeptime+0x60>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	685a      	ldr	r2, [r3, #4]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	1ad3      	subs	r3, r2, r3
 800edee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	da06      	bge.n	800ee04 <sys_timeouts_sleeptime+0x54>
 800edf6:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <sys_timeouts_sleeptime+0x64>)
 800edf8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800edfc:	4906      	ldr	r1, [pc, #24]	; (800ee18 <sys_timeouts_sleeptime+0x68>)
 800edfe:	4807      	ldr	r0, [pc, #28]	; (800ee1c <sys_timeouts_sleeptime+0x6c>)
 800ee00:	f002 ff16 	bl	8011c30 <iprintf>
    return ret;
 800ee04:	683b      	ldr	r3, [r7, #0]
  }
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20004af8 	.word	0x20004af8
 800ee14:	08014ac0 	.word	0x08014ac0
 800ee18:	08014b94 	.word	0x08014b94
 800ee1c:	08014b34 	.word	0x08014b34

0800ee20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee24:	f002 ff1c 	bl	8011c60 <rand>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	4b01      	ldr	r3, [pc, #4]	; (800ee40 <udp_init+0x20>)
 800ee3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee3c:	bf00      	nop
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20000018 	.word	0x20000018

0800ee44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d105      	bne.n	800ee64 <udp_input_local_match+0x20>
 800ee58:	4b27      	ldr	r3, [pc, #156]	; (800eef8 <udp_input_local_match+0xb4>)
 800ee5a:	2287      	movs	r2, #135	; 0x87
 800ee5c:	4927      	ldr	r1, [pc, #156]	; (800eefc <udp_input_local_match+0xb8>)
 800ee5e:	4828      	ldr	r0, [pc, #160]	; (800ef00 <udp_input_local_match+0xbc>)
 800ee60:	f002 fee6 	bl	8011c30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d105      	bne.n	800ee76 <udp_input_local_match+0x32>
 800ee6a:	4b23      	ldr	r3, [pc, #140]	; (800eef8 <udp_input_local_match+0xb4>)
 800ee6c:	2288      	movs	r2, #136	; 0x88
 800ee6e:	4925      	ldr	r1, [pc, #148]	; (800ef04 <udp_input_local_match+0xc0>)
 800ee70:	4823      	ldr	r0, [pc, #140]	; (800ef00 <udp_input_local_match+0xbc>)
 800ee72:	f002 fedd 	bl	8011c30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	7a1b      	ldrb	r3, [r3, #8]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00b      	beq.n	800ee96 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	7a1a      	ldrb	r2, [r3, #8]
 800ee82:	4b21      	ldr	r3, [pc, #132]	; (800ef08 <udp_input_local_match+0xc4>)
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d001      	beq.n	800ee96 <udp_input_local_match+0x52>
    return 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e02b      	b.n	800eeee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d018      	beq.n	800eece <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d013      	beq.n	800eeca <udp_input_local_match+0x86>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00f      	beq.n	800eeca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eeaa:	4b17      	ldr	r3, [pc, #92]	; (800ef08 <udp_input_local_match+0xc4>)
 800eeac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb2:	d00a      	beq.n	800eeca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	4b13      	ldr	r3, [pc, #76]	; (800ef08 <udp_input_local_match+0xc4>)
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	405a      	eors	r2, r3
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	3308      	adds	r3, #8
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d110      	bne.n	800eeec <udp_input_local_match+0xa8>
          return 1;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e00f      	b.n	800eeee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d009      	beq.n	800eee8 <udp_input_local_match+0xa4>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d005      	beq.n	800eee8 <udp_input_local_match+0xa4>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <udp_input_local_match+0xc4>)
 800eee2:	695b      	ldr	r3, [r3, #20]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d101      	bne.n	800eeec <udp_input_local_match+0xa8>
        return 1;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e000      	b.n	800eeee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	08014ba8 	.word	0x08014ba8
 800eefc:	08014bd8 	.word	0x08014bd8
 800ef00:	08014bfc 	.word	0x08014bfc
 800ef04:	08014c24 	.word	0x08014c24
 800ef08:	20007db4 	.word	0x20007db4

0800ef0c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ef0c:	b590      	push	{r4, r7, lr}
 800ef0e:	b08d      	sub	sp, #52	; 0x34
 800ef10:	af02      	add	r7, sp, #8
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d105      	bne.n	800ef2c <udp_input+0x20>
 800ef20:	4b7c      	ldr	r3, [pc, #496]	; (800f114 <udp_input+0x208>)
 800ef22:	22cf      	movs	r2, #207	; 0xcf
 800ef24:	497c      	ldr	r1, [pc, #496]	; (800f118 <udp_input+0x20c>)
 800ef26:	487d      	ldr	r0, [pc, #500]	; (800f11c <udp_input+0x210>)
 800ef28:	f002 fe82 	bl	8011c30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <udp_input+0x32>
 800ef32:	4b78      	ldr	r3, [pc, #480]	; (800f114 <udp_input+0x208>)
 800ef34:	22d0      	movs	r2, #208	; 0xd0
 800ef36:	497a      	ldr	r1, [pc, #488]	; (800f120 <udp_input+0x214>)
 800ef38:	4878      	ldr	r0, [pc, #480]	; (800f11c <udp_input+0x210>)
 800ef3a:	f002 fe79 	bl	8011c30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	895b      	ldrh	r3, [r3, #10]
 800ef42:	2b07      	cmp	r3, #7
 800ef44:	d803      	bhi.n	800ef4e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7fa f9fe 	bl	8009348 <pbuf_free>
    goto end;
 800ef4c:	e0de      	b.n	800f10c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ef54:	4b73      	ldr	r3, [pc, #460]	; (800f124 <udp_input+0x218>)
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	4a72      	ldr	r2, [pc, #456]	; (800f124 <udp_input+0x218>)
 800ef5a:	6812      	ldr	r2, [r2, #0]
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f001 fc88 	bl	8010874 <ip4_addr_isbroadcast_u32>
 800ef64:	4603      	mov	r3, r0
 800ef66:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	881b      	ldrh	r3, [r3, #0]
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f8 fe3e 	bl	8007bf0 <lwip_htons>
 800ef74:	4603      	mov	r3, r0
 800ef76:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	885b      	ldrh	r3, [r3, #2]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f8 fe36 	bl	8007bf0 <lwip_htons>
 800ef84:	4603      	mov	r3, r0
 800ef86:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef90:	2300      	movs	r3, #0
 800ef92:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef94:	4b64      	ldr	r3, [pc, #400]	; (800f128 <udp_input+0x21c>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	627b      	str	r3, [r7, #36]	; 0x24
 800ef9a:	e054      	b.n	800f046 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	8a5b      	ldrh	r3, [r3, #18]
 800efa0:	89fa      	ldrh	r2, [r7, #14]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d14a      	bne.n	800f03c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800efa6:	7cfb      	ldrb	r3, [r7, #19]
 800efa8:	461a      	mov	r2, r3
 800efaa:	6839      	ldr	r1, [r7, #0]
 800efac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efae:	f7ff ff49 	bl	800ee44 <udp_input_local_match>
 800efb2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d041      	beq.n	800f03c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	7c1b      	ldrb	r3, [r3, #16]
 800efbc:	f003 0304 	and.w	r3, r3, #4
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d11d      	bne.n	800f000 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d102      	bne.n	800efd0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	61fb      	str	r3, [r7, #28]
 800efce:	e017      	b.n	800f000 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800efd0:	7cfb      	ldrb	r3, [r7, #19]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d014      	beq.n	800f000 <udp_input+0xf4>
 800efd6:	4b53      	ldr	r3, [pc, #332]	; (800f124 <udp_input+0x218>)
 800efd8:	695b      	ldr	r3, [r3, #20]
 800efda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efde:	d10f      	bne.n	800f000 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	3304      	adds	r3, #4
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d008      	beq.n	800f000 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	3304      	adds	r3, #4
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d101      	bne.n	800f000 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	8a9b      	ldrh	r3, [r3, #20]
 800f004:	8a3a      	ldrh	r2, [r7, #16]
 800f006:	429a      	cmp	r2, r3
 800f008:	d118      	bne.n	800f03c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d005      	beq.n	800f01e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	4b43      	ldr	r3, [pc, #268]	; (800f124 <udp_input+0x218>)
 800f018:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d10e      	bne.n	800f03c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d014      	beq.n	800f04e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	68da      	ldr	r2, [r3, #12]
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f02c:	4b3e      	ldr	r3, [pc, #248]	; (800f128 <udp_input+0x21c>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f034:	4a3c      	ldr	r2, [pc, #240]	; (800f128 <udp_input+0x21c>)
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f03a:	e008      	b.n	800f04e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	627b      	str	r3, [r7, #36]	; 0x24
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1a7      	bne.n	800ef9c <udp_input+0x90>
 800f04c:	e000      	b.n	800f050 <udp_input+0x144>
        break;
 800f04e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	2b00      	cmp	r3, #0
 800f054:	d101      	bne.n	800f05a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <udp_input+0x15a>
    for_us = 1;
 800f060:	2301      	movs	r3, #1
 800f062:	76fb      	strb	r3, [r7, #27]
 800f064:	e00a      	b.n	800f07c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	3304      	adds	r3, #4
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	4b2d      	ldr	r3, [pc, #180]	; (800f124 <udp_input+0x218>)
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	429a      	cmp	r2, r3
 800f072:	bf0c      	ite	eq
 800f074:	2301      	moveq	r3, #1
 800f076:	2300      	movne	r3, #0
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f07c:	7efb      	ldrb	r3, [r7, #27]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d041      	beq.n	800f106 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f082:	2108      	movs	r1, #8
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7fa f8d9 	bl	800923c <pbuf_remove_header>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00a      	beq.n	800f0a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f090:	4b20      	ldr	r3, [pc, #128]	; (800f114 <udp_input+0x208>)
 800f092:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f096:	4925      	ldr	r1, [pc, #148]	; (800f12c <udp_input+0x220>)
 800f098:	4820      	ldr	r0, [pc, #128]	; (800f11c <udp_input+0x210>)
 800f09a:	f002 fdc9 	bl	8011c30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7fa f952 	bl	8009348 <pbuf_free>
      goto end;
 800f0a4:	e032      	b.n	800f10c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d012      	beq.n	800f0d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00a      	beq.n	800f0ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	699c      	ldr	r4, [r3, #24]
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	69d8      	ldr	r0, [r3, #28]
 800f0bc:	8a3b      	ldrh	r3, [r7, #16]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4b1b      	ldr	r3, [pc, #108]	; (800f130 <udp_input+0x224>)
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f0c8:	e021      	b.n	800f10e <udp_input+0x202>
        pbuf_free(p);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7fa f93c 	bl	8009348 <pbuf_free>
        goto end;
 800f0d0:	e01c      	b.n	800f10c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f0d2:	7cfb      	ldrb	r3, [r7, #19]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d112      	bne.n	800f0fe <udp_input+0x1f2>
 800f0d8:	4b12      	ldr	r3, [pc, #72]	; (800f124 <udp_input+0x218>)
 800f0da:	695b      	ldr	r3, [r3, #20]
 800f0dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0e0:	2be0      	cmp	r3, #224	; 0xe0
 800f0e2:	d00c      	beq.n	800f0fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f0e4:	4b0f      	ldr	r3, [pc, #60]	; (800f124 <udp_input+0x218>)
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	b21b      	sxth	r3, r3
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7fa f916 	bl	8009322 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f0f6:	2103      	movs	r1, #3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f001 f89b 	bl	8010234 <icmp_dest_unreach>
      pbuf_free(p);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7fa f922 	bl	8009348 <pbuf_free>
  return;
 800f104:	e003      	b.n	800f10e <udp_input+0x202>
    pbuf_free(p);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7fa f91e 	bl	8009348 <pbuf_free>
  return;
 800f10c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f10e:	372c      	adds	r7, #44	; 0x2c
 800f110:	46bd      	mov	sp, r7
 800f112:	bd90      	pop	{r4, r7, pc}
 800f114:	08014ba8 	.word	0x08014ba8
 800f118:	08014c4c 	.word	0x08014c4c
 800f11c:	08014bfc 	.word	0x08014bfc
 800f120:	08014c64 	.word	0x08014c64
 800f124:	20007db4 	.word	0x20007db4
 800f128:	2000b4e0 	.word	0x2000b4e0
 800f12c:	08014c80 	.word	0x08014c80
 800f130:	20007dc4 	.word	0x20007dc4

0800f134 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d01e      	beq.n	800f182 <udp_netif_ip_addr_changed+0x4e>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d01a      	beq.n	800f182 <udp_netif_ip_addr_changed+0x4e>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d017      	beq.n	800f182 <udp_netif_ip_addr_changed+0x4e>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d013      	beq.n	800f182 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f15a:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <udp_netif_ip_addr_changed+0x5c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	60fb      	str	r3, [r7, #12]
 800f160:	e00c      	b.n	800f17c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d103      	bne.n	800f176 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1ef      	bne.n	800f162 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f182:	bf00      	nop
 800f184:	3714      	adds	r7, #20
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	2000b4e0 	.word	0x2000b4e0

0800f194 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f19c:	4915      	ldr	r1, [pc, #84]	; (800f1f4 <etharp_free_entry+0x60>)
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	4413      	add	r3, r2
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	440b      	add	r3, r1
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d013      	beq.n	800f1d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f1b0:	4910      	ldr	r1, [pc, #64]	; (800f1f4 <etharp_free_entry+0x60>)
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	4413      	add	r3, r2
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	440b      	add	r3, r1
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fa f8c1 	bl	8009348 <pbuf_free>
    arp_table[i].q = NULL;
 800f1c6:	490b      	ldr	r1, [pc, #44]	; (800f1f4 <etharp_free_entry+0x60>)
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	005b      	lsls	r3, r3, #1
 800f1ce:	4413      	add	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	440b      	add	r3, r1
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f1d8:	4906      	ldr	r1, [pc, #24]	; (800f1f4 <etharp_free_entry+0x60>)
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	440b      	add	r3, r1
 800f1e6:	3314      	adds	r3, #20
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f1ec:	bf00      	nop
 800f1ee:	3708      	adds	r7, #8
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	20004b04 	.word	0x20004b04

0800f1f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1fe:	2300      	movs	r3, #0
 800f200:	607b      	str	r3, [r7, #4]
 800f202:	e096      	b.n	800f332 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f204:	494f      	ldr	r1, [pc, #316]	; (800f344 <etharp_tmr+0x14c>)
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	4613      	mov	r3, r2
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	4413      	add	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	440b      	add	r3, r1
 800f212:	3314      	adds	r3, #20
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f218:	78fb      	ldrb	r3, [r7, #3]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8086 	beq.w	800f32c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f220:	4948      	ldr	r1, [pc, #288]	; (800f344 <etharp_tmr+0x14c>)
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	3312      	adds	r3, #18
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	3301      	adds	r3, #1
 800f234:	b298      	uxth	r0, r3
 800f236:	4943      	ldr	r1, [pc, #268]	; (800f344 <etharp_tmr+0x14c>)
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	4613      	mov	r3, r2
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	4413      	add	r3, r2
 800f240:	00db      	lsls	r3, r3, #3
 800f242:	440b      	add	r3, r1
 800f244:	3312      	adds	r3, #18
 800f246:	4602      	mov	r2, r0
 800f248:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f24a:	493e      	ldr	r1, [pc, #248]	; (800f344 <etharp_tmr+0x14c>)
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4613      	mov	r3, r2
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	4413      	add	r3, r2
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	440b      	add	r3, r1
 800f258:	3312      	adds	r3, #18
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f260:	d215      	bcs.n	800f28e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f262:	4938      	ldr	r1, [pc, #224]	; (800f344 <etharp_tmr+0x14c>)
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	4613      	mov	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	440b      	add	r3, r1
 800f270:	3314      	adds	r3, #20
 800f272:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f274:	2b01      	cmp	r3, #1
 800f276:	d10e      	bne.n	800f296 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f278:	4932      	ldr	r1, [pc, #200]	; (800f344 <etharp_tmr+0x14c>)
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	4613      	mov	r3, r2
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	4413      	add	r3, r2
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	440b      	add	r3, r1
 800f286:	3312      	adds	r3, #18
 800f288:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f28a:	2b04      	cmp	r3, #4
 800f28c:	d903      	bls.n	800f296 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7ff ff80 	bl	800f194 <etharp_free_entry>
 800f294:	e04a      	b.n	800f32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f296:	492b      	ldr	r1, [pc, #172]	; (800f344 <etharp_tmr+0x14c>)
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	4613      	mov	r3, r2
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	4413      	add	r3, r2
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	440b      	add	r3, r1
 800f2a4:	3314      	adds	r3, #20
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	d10a      	bne.n	800f2c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f2ac:	4925      	ldr	r1, [pc, #148]	; (800f344 <etharp_tmr+0x14c>)
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	4413      	add	r3, r2
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	440b      	add	r3, r1
 800f2ba:	3314      	adds	r3, #20
 800f2bc:	2204      	movs	r2, #4
 800f2be:	701a      	strb	r2, [r3, #0]
 800f2c0:	e034      	b.n	800f32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f2c2:	4920      	ldr	r1, [pc, #128]	; (800f344 <etharp_tmr+0x14c>)
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	4413      	add	r3, r2
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3314      	adds	r3, #20
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b04      	cmp	r3, #4
 800f2d6:	d10a      	bne.n	800f2ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f2d8:	491a      	ldr	r1, [pc, #104]	; (800f344 <etharp_tmr+0x14c>)
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	4613      	mov	r3, r2
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	4413      	add	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	440b      	add	r3, r1
 800f2e6:	3314      	adds	r3, #20
 800f2e8:	2202      	movs	r2, #2
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	e01e      	b.n	800f32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f2ee:	4915      	ldr	r1, [pc, #84]	; (800f344 <etharp_tmr+0x14c>)
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	440b      	add	r3, r1
 800f2fc:	3314      	adds	r3, #20
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d113      	bne.n	800f32c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f304:	490f      	ldr	r1, [pc, #60]	; (800f344 <etharp_tmr+0x14c>)
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	4613      	mov	r3, r2
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	4413      	add	r3, r2
 800f30e:	00db      	lsls	r3, r3, #3
 800f310:	440b      	add	r3, r1
 800f312:	3308      	adds	r3, #8
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	4a08      	ldr	r2, [pc, #32]	; (800f344 <etharp_tmr+0x14c>)
 800f322:	4413      	add	r3, r2
 800f324:	3304      	adds	r3, #4
 800f326:	4619      	mov	r1, r3
 800f328:	f000 fe6e 	bl	8010008 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3301      	adds	r3, #1
 800f330:	607b      	str	r3, [r7, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b09      	cmp	r3, #9
 800f336:	f77f af65 	ble.w	800f204 <etharp_tmr+0xc>
      }
    }
  }
}
 800f33a:	bf00      	nop
 800f33c:	bf00      	nop
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	20004b04 	.word	0x20004b04

0800f348 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08a      	sub	sp, #40	; 0x28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	460b      	mov	r3, r1
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f356:	230a      	movs	r3, #10
 800f358:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f35a:	230a      	movs	r3, #10
 800f35c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f35e:	230a      	movs	r3, #10
 800f360:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f366:	230a      	movs	r3, #10
 800f368:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	83bb      	strh	r3, [r7, #28]
 800f36e:	2300      	movs	r3, #0
 800f370:	837b      	strh	r3, [r7, #26]
 800f372:	2300      	movs	r3, #0
 800f374:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f376:	2300      	movs	r3, #0
 800f378:	843b      	strh	r3, [r7, #32]
 800f37a:	e0ae      	b.n	800f4da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f37c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f380:	49a6      	ldr	r1, [pc, #664]	; (800f61c <etharp_find_entry+0x2d4>)
 800f382:	4613      	mov	r3, r2
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4413      	add	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	440b      	add	r3, r1
 800f38c:	3314      	adds	r3, #20
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f392:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f396:	2b0a      	cmp	r3, #10
 800f398:	d105      	bne.n	800f3a6 <etharp_find_entry+0x5e>
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d102      	bne.n	800f3a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f3a0:	8c3b      	ldrh	r3, [r7, #32]
 800f3a2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f3a4:	e095      	b.n	800f4d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 8092 	beq.w	800f4d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d009      	beq.n	800f3c8 <etharp_find_entry+0x80>
 800f3b4:	7dfb      	ldrb	r3, [r7, #23]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d806      	bhi.n	800f3c8 <etharp_find_entry+0x80>
 800f3ba:	4b99      	ldr	r3, [pc, #612]	; (800f620 <etharp_find_entry+0x2d8>)
 800f3bc:	f240 1223 	movw	r2, #291	; 0x123
 800f3c0:	4998      	ldr	r1, [pc, #608]	; (800f624 <etharp_find_entry+0x2dc>)
 800f3c2:	4899      	ldr	r0, [pc, #612]	; (800f628 <etharp_find_entry+0x2e0>)
 800f3c4:	f002 fc34 	bl	8011c30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d020      	beq.n	800f410 <etharp_find_entry+0xc8>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6819      	ldr	r1, [r3, #0]
 800f3d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3d6:	4891      	ldr	r0, [pc, #580]	; (800f61c <etharp_find_entry+0x2d4>)
 800f3d8:	4613      	mov	r3, r2
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	4413      	add	r3, r2
 800f3de:	00db      	lsls	r3, r3, #3
 800f3e0:	4403      	add	r3, r0
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4299      	cmp	r1, r3
 800f3e8:	d112      	bne.n	800f410 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00c      	beq.n	800f40a <etharp_find_entry+0xc2>
 800f3f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3f4:	4989      	ldr	r1, [pc, #548]	; (800f61c <etharp_find_entry+0x2d4>)
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	4413      	add	r3, r2
 800f3fc:	00db      	lsls	r3, r3, #3
 800f3fe:	440b      	add	r3, r1
 800f400:	3308      	adds	r3, #8
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	429a      	cmp	r2, r3
 800f408:	d102      	bne.n	800f410 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f40a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f40e:	e100      	b.n	800f612 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	2b01      	cmp	r3, #1
 800f414:	d140      	bne.n	800f498 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f416:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f41a:	4980      	ldr	r1, [pc, #512]	; (800f61c <etharp_find_entry+0x2d4>)
 800f41c:	4613      	mov	r3, r2
 800f41e:	005b      	lsls	r3, r3, #1
 800f420:	4413      	add	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	440b      	add	r3, r1
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01a      	beq.n	800f462 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f42c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f430:	497a      	ldr	r1, [pc, #488]	; (800f61c <etharp_find_entry+0x2d4>)
 800f432:	4613      	mov	r3, r2
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	4413      	add	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	440b      	add	r3, r1
 800f43c:	3312      	adds	r3, #18
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	8bba      	ldrh	r2, [r7, #28]
 800f442:	429a      	cmp	r2, r3
 800f444:	d845      	bhi.n	800f4d2 <etharp_find_entry+0x18a>
            old_queue = i;
 800f446:	8c3b      	ldrh	r3, [r7, #32]
 800f448:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f44a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f44e:	4973      	ldr	r1, [pc, #460]	; (800f61c <etharp_find_entry+0x2d4>)
 800f450:	4613      	mov	r3, r2
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	4413      	add	r3, r2
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	440b      	add	r3, r1
 800f45a:	3312      	adds	r3, #18
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	83bb      	strh	r3, [r7, #28]
 800f460:	e037      	b.n	800f4d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f462:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f466:	496d      	ldr	r1, [pc, #436]	; (800f61c <etharp_find_entry+0x2d4>)
 800f468:	4613      	mov	r3, r2
 800f46a:	005b      	lsls	r3, r3, #1
 800f46c:	4413      	add	r3, r2
 800f46e:	00db      	lsls	r3, r3, #3
 800f470:	440b      	add	r3, r1
 800f472:	3312      	adds	r3, #18
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	8b7a      	ldrh	r2, [r7, #26]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d82a      	bhi.n	800f4d2 <etharp_find_entry+0x18a>
            old_pending = i;
 800f47c:	8c3b      	ldrh	r3, [r7, #32]
 800f47e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f480:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f484:	4965      	ldr	r1, [pc, #404]	; (800f61c <etharp_find_entry+0x2d4>)
 800f486:	4613      	mov	r3, r2
 800f488:	005b      	lsls	r3, r3, #1
 800f48a:	4413      	add	r3, r2
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	440b      	add	r3, r1
 800f490:	3312      	adds	r3, #18
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	837b      	strh	r3, [r7, #26]
 800f496:	e01c      	b.n	800f4d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f498:	7dfb      	ldrb	r3, [r7, #23]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d919      	bls.n	800f4d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f49e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f4a2:	495e      	ldr	r1, [pc, #376]	; (800f61c <etharp_find_entry+0x2d4>)
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	005b      	lsls	r3, r3, #1
 800f4a8:	4413      	add	r3, r2
 800f4aa:	00db      	lsls	r3, r3, #3
 800f4ac:	440b      	add	r3, r1
 800f4ae:	3312      	adds	r3, #18
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	8b3a      	ldrh	r2, [r7, #24]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d80c      	bhi.n	800f4d2 <etharp_find_entry+0x18a>
            old_stable = i;
 800f4b8:	8c3b      	ldrh	r3, [r7, #32]
 800f4ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f4bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f4c0:	4956      	ldr	r1, [pc, #344]	; (800f61c <etharp_find_entry+0x2d4>)
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	4413      	add	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3312      	adds	r3, #18
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4d2:	8c3b      	ldrh	r3, [r7, #32]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	843b      	strh	r3, [r7, #32]
 800f4da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f4de:	2b09      	cmp	r3, #9
 800f4e0:	f77f af4c 	ble.w	800f37c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f4e4:	7afb      	ldrb	r3, [r7, #11]
 800f4e6:	f003 0302 	and.w	r3, r3, #2
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d108      	bne.n	800f500 <etharp_find_entry+0x1b8>
 800f4ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f4f2:	2b0a      	cmp	r3, #10
 800f4f4:	d107      	bne.n	800f506 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f4f6:	7afb      	ldrb	r3, [r7, #11]
 800f4f8:	f003 0301 	and.w	r3, r3, #1
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d102      	bne.n	800f506 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f500:	f04f 33ff 	mov.w	r3, #4294967295
 800f504:	e085      	b.n	800f612 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f50a:	2b09      	cmp	r3, #9
 800f50c:	dc02      	bgt.n	800f514 <etharp_find_entry+0x1cc>
    i = empty;
 800f50e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f510:	843b      	strh	r3, [r7, #32]
 800f512:	e039      	b.n	800f588 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f514:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f518:	2b09      	cmp	r3, #9
 800f51a:	dc14      	bgt.n	800f546 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f51e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f524:	493d      	ldr	r1, [pc, #244]	; (800f61c <etharp_find_entry+0x2d4>)
 800f526:	4613      	mov	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	4413      	add	r3, r2
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	440b      	add	r3, r1
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d018      	beq.n	800f568 <etharp_find_entry+0x220>
 800f536:	4b3a      	ldr	r3, [pc, #232]	; (800f620 <etharp_find_entry+0x2d8>)
 800f538:	f240 126d 	movw	r2, #365	; 0x16d
 800f53c:	493b      	ldr	r1, [pc, #236]	; (800f62c <etharp_find_entry+0x2e4>)
 800f53e:	483a      	ldr	r0, [pc, #232]	; (800f628 <etharp_find_entry+0x2e0>)
 800f540:	f002 fb76 	bl	8011c30 <iprintf>
 800f544:	e010      	b.n	800f568 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f546:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f54a:	2b09      	cmp	r3, #9
 800f54c:	dc02      	bgt.n	800f554 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f54e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f550:	843b      	strh	r3, [r7, #32]
 800f552:	e009      	b.n	800f568 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f554:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f558:	2b09      	cmp	r3, #9
 800f55a:	dc02      	bgt.n	800f562 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f55c:	8bfb      	ldrh	r3, [r7, #30]
 800f55e:	843b      	strh	r3, [r7, #32]
 800f560:	e002      	b.n	800f568 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f562:	f04f 33ff 	mov.w	r3, #4294967295
 800f566:	e054      	b.n	800f612 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f568:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f56c:	2b09      	cmp	r3, #9
 800f56e:	dd06      	ble.n	800f57e <etharp_find_entry+0x236>
 800f570:	4b2b      	ldr	r3, [pc, #172]	; (800f620 <etharp_find_entry+0x2d8>)
 800f572:	f240 127f 	movw	r2, #383	; 0x17f
 800f576:	492e      	ldr	r1, [pc, #184]	; (800f630 <etharp_find_entry+0x2e8>)
 800f578:	482b      	ldr	r0, [pc, #172]	; (800f628 <etharp_find_entry+0x2e0>)
 800f57a:	f002 fb59 	bl	8011c30 <iprintf>
    etharp_free_entry(i);
 800f57e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff fe06 	bl	800f194 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f588:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f58c:	2b09      	cmp	r3, #9
 800f58e:	dd06      	ble.n	800f59e <etharp_find_entry+0x256>
 800f590:	4b23      	ldr	r3, [pc, #140]	; (800f620 <etharp_find_entry+0x2d8>)
 800f592:	f240 1283 	movw	r2, #387	; 0x183
 800f596:	4926      	ldr	r1, [pc, #152]	; (800f630 <etharp_find_entry+0x2e8>)
 800f598:	4823      	ldr	r0, [pc, #140]	; (800f628 <etharp_find_entry+0x2e0>)
 800f59a:	f002 fb49 	bl	8011c30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f59e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5a2:	491e      	ldr	r1, [pc, #120]	; (800f61c <etharp_find_entry+0x2d4>)
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	4413      	add	r3, r2
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	440b      	add	r3, r1
 800f5ae:	3314      	adds	r3, #20
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d006      	beq.n	800f5c4 <etharp_find_entry+0x27c>
 800f5b6:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <etharp_find_entry+0x2d8>)
 800f5b8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f5bc:	491d      	ldr	r1, [pc, #116]	; (800f634 <etharp_find_entry+0x2ec>)
 800f5be:	481a      	ldr	r0, [pc, #104]	; (800f628 <etharp_find_entry+0x2e0>)
 800f5c0:	f002 fb36 	bl	8011c30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00b      	beq.n	800f5e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f5ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6819      	ldr	r1, [r3, #0]
 800f5d2:	4812      	ldr	r0, [pc, #72]	; (800f61c <etharp_find_entry+0x2d4>)
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	4413      	add	r3, r2
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	4403      	add	r3, r0
 800f5de:	3304      	adds	r3, #4
 800f5e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f5e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5e6:	490d      	ldr	r1, [pc, #52]	; (800f61c <etharp_find_entry+0x2d4>)
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3312      	adds	r3, #18
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f5f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5fc:	4907      	ldr	r1, [pc, #28]	; (800f61c <etharp_find_entry+0x2d4>)
 800f5fe:	4613      	mov	r3, r2
 800f600:	005b      	lsls	r3, r3, #1
 800f602:	4413      	add	r3, r2
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	440b      	add	r3, r1
 800f608:	3308      	adds	r3, #8
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f60e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f612:	4618      	mov	r0, r3
 800f614:	3728      	adds	r7, #40	; 0x28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20004b04 	.word	0x20004b04
 800f620:	08014f0c 	.word	0x08014f0c
 800f624:	08014f44 	.word	0x08014f44
 800f628:	08014f84 	.word	0x08014f84
 800f62c:	08014fac 	.word	0x08014fac
 800f630:	08014fc4 	.word	0x08014fc4
 800f634:	08014fd8 	.word	0x08014fd8

0800f638 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b088      	sub	sp, #32
 800f63c:	af02      	add	r7, sp, #8
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f64c:	2b06      	cmp	r3, #6
 800f64e:	d006      	beq.n	800f65e <etharp_update_arp_entry+0x26>
 800f650:	4b48      	ldr	r3, [pc, #288]	; (800f774 <etharp_update_arp_entry+0x13c>)
 800f652:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f656:	4948      	ldr	r1, [pc, #288]	; (800f778 <etharp_update_arp_entry+0x140>)
 800f658:	4848      	ldr	r0, [pc, #288]	; (800f77c <etharp_update_arp_entry+0x144>)
 800f65a:	f002 fae9 	bl	8011c30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d012      	beq.n	800f68a <etharp_update_arp_entry+0x52>
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00e      	beq.n	800f68a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68f9      	ldr	r1, [r7, #12]
 800f672:	4618      	mov	r0, r3
 800f674:	f001 f8fe 	bl	8010874 <ip4_addr_isbroadcast_u32>
 800f678:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d105      	bne.n	800f68a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f686:	2be0      	cmp	r3, #224	; 0xe0
 800f688:	d102      	bne.n	800f690 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f68a:	f06f 030f 	mvn.w	r3, #15
 800f68e:	e06c      	b.n	800f76a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	4619      	mov	r1, r3
 800f696:	68b8      	ldr	r0, [r7, #8]
 800f698:	f7ff fe56 	bl	800f348 <etharp_find_entry>
 800f69c:	4603      	mov	r3, r0
 800f69e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f6a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	da02      	bge.n	800f6ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f6a8:	8afb      	ldrh	r3, [r7, #22]
 800f6aa:	b25b      	sxtb	r3, r3
 800f6ac:	e05d      	b.n	800f76a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f6ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6b2:	4933      	ldr	r1, [pc, #204]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	005b      	lsls	r3, r3, #1
 800f6b8:	4413      	add	r3, r2
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	440b      	add	r3, r1
 800f6be:	3314      	adds	r3, #20
 800f6c0:	2202      	movs	r2, #2
 800f6c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f6c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6c8:	492d      	ldr	r1, [pc, #180]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	440b      	add	r3, r1
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f6da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	005b      	lsls	r3, r3, #1
 800f6e2:	4413      	add	r3, r2
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	4a25      	ldr	r2, [pc, #148]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f6ea:	4413      	add	r3, r2
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	2206      	movs	r2, #6
 800f6f0:	6879      	ldr	r1, [r7, #4]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f002 fa2b 	bl	8011b4e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f6f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6fc:	4920      	ldr	r1, [pc, #128]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f6fe:	4613      	mov	r3, r2
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	4413      	add	r3, r2
 800f704:	00db      	lsls	r3, r3, #3
 800f706:	440b      	add	r3, r1
 800f708:	3312      	adds	r3, #18
 800f70a:	2200      	movs	r2, #0
 800f70c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f70e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f712:	491b      	ldr	r1, [pc, #108]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f714:	4613      	mov	r3, r2
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	4413      	add	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	440b      	add	r3, r1
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d021      	beq.n	800f768 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f728:	4915      	ldr	r1, [pc, #84]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f72a:	4613      	mov	r3, r2
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	4413      	add	r3, r2
 800f730:	00db      	lsls	r3, r3, #3
 800f732:	440b      	add	r3, r1
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f738:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f73c:	4910      	ldr	r1, [pc, #64]	; (800f780 <etharp_update_arp_entry+0x148>)
 800f73e:	4613      	mov	r3, r2
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	440b      	add	r3, r1
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6939      	ldr	r1, [r7, #16]
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f001 ff91 	bl	8011684 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f762:	6938      	ldr	r0, [r7, #16]
 800f764:	f7f9 fdf0 	bl	8009348 <pbuf_free>
  }
  return ERR_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	08014f0c 	.word	0x08014f0c
 800f778:	08015004 	.word	0x08015004
 800f77c:	08014f84 	.word	0x08014f84
 800f780:	20004b04 	.word	0x20004b04

0800f784 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
 800f790:	e01e      	b.n	800f7d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f792:	4913      	ldr	r1, [pc, #76]	; (800f7e0 <etharp_cleanup_netif+0x5c>)
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	4613      	mov	r3, r2
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	00db      	lsls	r3, r3, #3
 800f79e:	440b      	add	r3, r1
 800f7a0:	3314      	adds	r3, #20
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f7a6:	7afb      	ldrb	r3, [r7, #11]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00e      	beq.n	800f7ca <etharp_cleanup_netif+0x46>
 800f7ac:	490c      	ldr	r1, [pc, #48]	; (800f7e0 <etharp_cleanup_netif+0x5c>)
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4413      	add	r3, r2
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	440b      	add	r3, r1
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d102      	bne.n	800f7ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f7ff fce5 	bl	800f194 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b09      	cmp	r3, #9
 800f7d4:	dddd      	ble.n	800f792 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f7d6:	bf00      	nop
 800f7d8:	bf00      	nop
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	20004b04 	.word	0x20004b04

0800f7e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f7e4:	b5b0      	push	{r4, r5, r7, lr}
 800f7e6:	b08a      	sub	sp, #40	; 0x28
 800f7e8:	af04      	add	r7, sp, #16
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d107      	bne.n	800f804 <etharp_input+0x20>
 800f7f4:	4b3d      	ldr	r3, [pc, #244]	; (800f8ec <etharp_input+0x108>)
 800f7f6:	f240 228a 	movw	r2, #650	; 0x28a
 800f7fa:	493d      	ldr	r1, [pc, #244]	; (800f8f0 <etharp_input+0x10c>)
 800f7fc:	483d      	ldr	r0, [pc, #244]	; (800f8f4 <etharp_input+0x110>)
 800f7fe:	f002 fa17 	bl	8011c30 <iprintf>
 800f802:	e06f      	b.n	800f8e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f814:	d10c      	bne.n	800f830 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f81a:	2b06      	cmp	r3, #6
 800f81c:	d108      	bne.n	800f830 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f822:	2b04      	cmp	r3, #4
 800f824:	d104      	bne.n	800f830 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	885b      	ldrh	r3, [r3, #2]
 800f82a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f82c:	2b08      	cmp	r3, #8
 800f82e:	d003      	beq.n	800f838 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7f9 fd89 	bl	8009348 <pbuf_free>
    return;
 800f836:	e055      	b.n	800f8e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	330e      	adds	r3, #14
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	3318      	adds	r3, #24
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	3304      	adds	r3, #4
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d102      	bne.n	800f858 <etharp_input+0x74>
    for_us = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	75fb      	strb	r3, [r7, #23]
 800f856:	e009      	b.n	800f86c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	3304      	adds	r3, #4
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	bf0c      	ite	eq
 800f864:	2301      	moveq	r3, #1
 800f866:	2300      	movne	r3, #0
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	f103 0208 	add.w	r2, r3, #8
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <etharp_input+0x98>
 800f878:	2301      	movs	r3, #1
 800f87a:	e000      	b.n	800f87e <etharp_input+0x9a>
 800f87c:	2302      	movs	r3, #2
 800f87e:	f107 010c 	add.w	r1, r7, #12
 800f882:	6838      	ldr	r0, [r7, #0]
 800f884:	f7ff fed8 	bl	800f638 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	88db      	ldrh	r3, [r3, #6]
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f892:	d003      	beq.n	800f89c <etharp_input+0xb8>
 800f894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f898:	d01e      	beq.n	800f8d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f89a:	e020      	b.n	800f8de <etharp_input+0xfa>
      if (for_us) {
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d01c      	beq.n	800f8dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f8bc:	2102      	movs	r1, #2
 800f8be:	9103      	str	r1, [sp, #12]
 800f8c0:	f107 010c 	add.w	r1, r7, #12
 800f8c4:	9102      	str	r1, [sp, #8]
 800f8c6:	9201      	str	r2, [sp, #4]
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	6838      	ldr	r0, [r7, #0]
 800f8d2:	f000 faeb 	bl	800feac <etharp_raw>
      break;
 800f8d6:	e001      	b.n	800f8dc <etharp_input+0xf8>
      break;
 800f8d8:	bf00      	nop
 800f8da:	e000      	b.n	800f8de <etharp_input+0xfa>
      break;
 800f8dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7f9 fd32 	bl	8009348 <pbuf_free>
}
 800f8e4:	3718      	adds	r7, #24
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	08014f0c 	.word	0x08014f0c
 800f8f0:	0801505c 	.word	0x0801505c
 800f8f4:	08014f84 	.word	0x08014f84

0800f8f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af02      	add	r7, sp, #8
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	4613      	mov	r3, r2
 800f904:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f906:	79fa      	ldrb	r2, [r7, #7]
 800f908:	4944      	ldr	r1, [pc, #272]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f90a:	4613      	mov	r3, r2
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	4413      	add	r3, r2
 800f910:	00db      	lsls	r3, r3, #3
 800f912:	440b      	add	r3, r1
 800f914:	3314      	adds	r3, #20
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d806      	bhi.n	800f92a <etharp_output_to_arp_index+0x32>
 800f91c:	4b40      	ldr	r3, [pc, #256]	; (800fa20 <etharp_output_to_arp_index+0x128>)
 800f91e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f922:	4940      	ldr	r1, [pc, #256]	; (800fa24 <etharp_output_to_arp_index+0x12c>)
 800f924:	4840      	ldr	r0, [pc, #256]	; (800fa28 <etharp_output_to_arp_index+0x130>)
 800f926:	f002 f983 	bl	8011c30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f92a:	79fa      	ldrb	r2, [r7, #7]
 800f92c:	493b      	ldr	r1, [pc, #236]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f92e:	4613      	mov	r3, r2
 800f930:	005b      	lsls	r3, r3, #1
 800f932:	4413      	add	r3, r2
 800f934:	00db      	lsls	r3, r3, #3
 800f936:	440b      	add	r3, r1
 800f938:	3314      	adds	r3, #20
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d153      	bne.n	800f9e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f940:	79fa      	ldrb	r2, [r7, #7]
 800f942:	4936      	ldr	r1, [pc, #216]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f944:	4613      	mov	r3, r2
 800f946:	005b      	lsls	r3, r3, #1
 800f948:	4413      	add	r3, r2
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	440b      	add	r3, r1
 800f94e:	3312      	adds	r3, #18
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f956:	d919      	bls.n	800f98c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f958:	79fa      	ldrb	r2, [r7, #7]
 800f95a:	4613      	mov	r3, r2
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	4413      	add	r3, r2
 800f960:	00db      	lsls	r3, r3, #3
 800f962:	4a2e      	ldr	r2, [pc, #184]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f964:	4413      	add	r3, r2
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f000 fb4c 	bl	8010008 <etharp_request>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d138      	bne.n	800f9e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f976:	79fa      	ldrb	r2, [r7, #7]
 800f978:	4928      	ldr	r1, [pc, #160]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f97a:	4613      	mov	r3, r2
 800f97c:	005b      	lsls	r3, r3, #1
 800f97e:	4413      	add	r3, r2
 800f980:	00db      	lsls	r3, r3, #3
 800f982:	440b      	add	r3, r1
 800f984:	3314      	adds	r3, #20
 800f986:	2203      	movs	r2, #3
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	e02d      	b.n	800f9e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f98c:	79fa      	ldrb	r2, [r7, #7]
 800f98e:	4923      	ldr	r1, [pc, #140]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f990:	4613      	mov	r3, r2
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	4413      	add	r3, r2
 800f996:	00db      	lsls	r3, r3, #3
 800f998:	440b      	add	r3, r1
 800f99a:	3312      	adds	r3, #18
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f9a2:	d321      	bcc.n	800f9e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f9a4:	79fa      	ldrb	r2, [r7, #7]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	005b      	lsls	r3, r3, #1
 800f9aa:	4413      	add	r3, r2
 800f9ac:	00db      	lsls	r3, r3, #3
 800f9ae:	4a1b      	ldr	r2, [pc, #108]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f9b0:	4413      	add	r3, r2
 800f9b2:	1d19      	adds	r1, r3, #4
 800f9b4:	79fa      	ldrb	r2, [r7, #7]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	4413      	add	r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	3308      	adds	r3, #8
 800f9c0:	4a16      	ldr	r2, [pc, #88]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f9c2:	4413      	add	r3, r2
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 fafb 	bl	800ffc4 <etharp_request_dst>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d109      	bne.n	800f9e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f9d4:	79fa      	ldrb	r2, [r7, #7]
 800f9d6:	4911      	ldr	r1, [pc, #68]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f9d8:	4613      	mov	r3, r2
 800f9da:	005b      	lsls	r3, r3, #1
 800f9dc:	4413      	add	r3, r2
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	440b      	add	r3, r1
 800f9e2:	3314      	adds	r3, #20
 800f9e4:	2203      	movs	r2, #3
 800f9e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f9ee:	79fa      	ldrb	r2, [r7, #7]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	4413      	add	r3, r2
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	4a08      	ldr	r2, [pc, #32]	; (800fa1c <etharp_output_to_arp_index+0x124>)
 800f9fc:	4413      	add	r3, r2
 800f9fe:	3304      	adds	r3, #4
 800fa00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa04:	9200      	str	r2, [sp, #0]
 800fa06:	460a      	mov	r2, r1
 800fa08:	68b9      	ldr	r1, [r7, #8]
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f001 fe3a 	bl	8011684 <ethernet_output>
 800fa10:	4603      	mov	r3, r0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20004b04 	.word	0x20004b04
 800fa20:	08014f0c 	.word	0x08014f0c
 800fa24:	0801507c 	.word	0x0801507c
 800fa28:	08014f84 	.word	0x08014f84

0800fa2c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08a      	sub	sp, #40	; 0x28
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <etharp_output+0x24>
 800fa42:	4b73      	ldr	r3, [pc, #460]	; (800fc10 <etharp_output+0x1e4>)
 800fa44:	f240 321e 	movw	r2, #798	; 0x31e
 800fa48:	4972      	ldr	r1, [pc, #456]	; (800fc14 <etharp_output+0x1e8>)
 800fa4a:	4873      	ldr	r0, [pc, #460]	; (800fc18 <etharp_output+0x1ec>)
 800fa4c:	f002 f8f0 	bl	8011c30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <etharp_output+0x38>
 800fa56:	4b6e      	ldr	r3, [pc, #440]	; (800fc10 <etharp_output+0x1e4>)
 800fa58:	f240 321f 	movw	r2, #799	; 0x31f
 800fa5c:	496f      	ldr	r1, [pc, #444]	; (800fc1c <etharp_output+0x1f0>)
 800fa5e:	486e      	ldr	r0, [pc, #440]	; (800fc18 <etharp_output+0x1ec>)
 800fa60:	f002 f8e6 	bl	8011c30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <etharp_output+0x4c>
 800fa6a:	4b69      	ldr	r3, [pc, #420]	; (800fc10 <etharp_output+0x1e4>)
 800fa6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fa70:	496b      	ldr	r1, [pc, #428]	; (800fc20 <etharp_output+0x1f4>)
 800fa72:	4869      	ldr	r0, [pc, #420]	; (800fc18 <etharp_output+0x1ec>)
 800fa74:	f002 f8dc 	bl	8011c30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68f9      	ldr	r1, [r7, #12]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 fef8 	bl	8010874 <ip4_addr_isbroadcast_u32>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d002      	beq.n	800fa90 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fa8a:	4b66      	ldr	r3, [pc, #408]	; (800fc24 <etharp_output+0x1f8>)
 800fa8c:	61fb      	str	r3, [r7, #28]
 800fa8e:	e0af      	b.n	800fbf0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa98:	2be0      	cmp	r3, #224	; 0xe0
 800fa9a:	d118      	bne.n	800face <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800faa0:	2300      	movs	r3, #0
 800faa2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800faa4:	235e      	movs	r3, #94	; 0x5e
 800faa6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3301      	adds	r3, #1
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	3302      	adds	r3, #2
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3303      	adds	r3, #3
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fac6:	f107 0310 	add.w	r3, r7, #16
 800faca:	61fb      	str	r3, [r7, #28]
 800facc:	e090      	b.n	800fbf0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	3304      	adds	r3, #4
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	405a      	eors	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3308      	adds	r3, #8
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4013      	ands	r3, r2
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d012      	beq.n	800fb0c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800faec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00b      	beq.n	800fb0c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	330c      	adds	r3, #12
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d003      	beq.n	800fb06 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	330c      	adds	r3, #12
 800fb02:	61bb      	str	r3, [r7, #24]
 800fb04:	e002      	b.n	800fb0c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fb06:	f06f 0303 	mvn.w	r3, #3
 800fb0a:	e07d      	b.n	800fc08 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fb0c:	4b46      	ldr	r3, [pc, #280]	; (800fc28 <etharp_output+0x1fc>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	4619      	mov	r1, r3
 800fb12:	4a46      	ldr	r2, [pc, #280]	; (800fc2c <etharp_output+0x200>)
 800fb14:	460b      	mov	r3, r1
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	440b      	add	r3, r1
 800fb1a:	00db      	lsls	r3, r3, #3
 800fb1c:	4413      	add	r3, r2
 800fb1e:	3314      	adds	r3, #20
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d925      	bls.n	800fb72 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fb26:	4b40      	ldr	r3, [pc, #256]	; (800fc28 <etharp_output+0x1fc>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	4a3f      	ldr	r2, [pc, #252]	; (800fc2c <etharp_output+0x200>)
 800fb2e:	460b      	mov	r3, r1
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	440b      	add	r3, r1
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	4413      	add	r3, r2
 800fb38:	3308      	adds	r3, #8
 800fb3a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d117      	bne.n	800fb72 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	4b38      	ldr	r3, [pc, #224]	; (800fc28 <etharp_output+0x1fc>)
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	4937      	ldr	r1, [pc, #220]	; (800fc2c <etharp_output+0x200>)
 800fb4e:	4603      	mov	r3, r0
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	4403      	add	r3, r0
 800fb54:	00db      	lsls	r3, r3, #3
 800fb56:	440b      	add	r3, r1
 800fb58:	3304      	adds	r3, #4
 800fb5a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d108      	bne.n	800fb72 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fb60:	4b31      	ldr	r3, [pc, #196]	; (800fc28 <etharp_output+0x1fc>)
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	461a      	mov	r2, r3
 800fb66:	68b9      	ldr	r1, [r7, #8]
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f7ff fec5 	bl	800f8f8 <etharp_output_to_arp_index>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	e04a      	b.n	800fc08 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb72:	2300      	movs	r3, #0
 800fb74:	75fb      	strb	r3, [r7, #23]
 800fb76:	e031      	b.n	800fbdc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fb78:	7dfa      	ldrb	r2, [r7, #23]
 800fb7a:	492c      	ldr	r1, [pc, #176]	; (800fc2c <etharp_output+0x200>)
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	005b      	lsls	r3, r3, #1
 800fb80:	4413      	add	r3, r2
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	440b      	add	r3, r1
 800fb86:	3314      	adds	r3, #20
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d923      	bls.n	800fbd6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fb8e:	7dfa      	ldrb	r2, [r7, #23]
 800fb90:	4926      	ldr	r1, [pc, #152]	; (800fc2c <etharp_output+0x200>)
 800fb92:	4613      	mov	r3, r2
 800fb94:	005b      	lsls	r3, r3, #1
 800fb96:	4413      	add	r3, r2
 800fb98:	00db      	lsls	r3, r3, #3
 800fb9a:	440b      	add	r3, r1
 800fb9c:	3308      	adds	r3, #8
 800fb9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d117      	bne.n	800fbd6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	6819      	ldr	r1, [r3, #0]
 800fbaa:	7dfa      	ldrb	r2, [r7, #23]
 800fbac:	481f      	ldr	r0, [pc, #124]	; (800fc2c <etharp_output+0x200>)
 800fbae:	4613      	mov	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4413      	add	r3, r2
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	4403      	add	r3, r0
 800fbb8:	3304      	adds	r3, #4
 800fbba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fbbc:	4299      	cmp	r1, r3
 800fbbe:	d10a      	bne.n	800fbd6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fbc0:	4a19      	ldr	r2, [pc, #100]	; (800fc28 <etharp_output+0x1fc>)
 800fbc2:	7dfb      	ldrb	r3, [r7, #23]
 800fbc4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
 800fbc8:	461a      	mov	r2, r3
 800fbca:	68b9      	ldr	r1, [r7, #8]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff fe93 	bl	800f8f8 <etharp_output_to_arp_index>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	e018      	b.n	800fc08 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	75fb      	strb	r3, [r7, #23]
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	2b09      	cmp	r3, #9
 800fbe0:	d9ca      	bls.n	800fb78 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	69b9      	ldr	r1, [r7, #24]
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f000 f822 	bl	800fc30 <etharp_query>
 800fbec:	4603      	mov	r3, r0
 800fbee:	e00b      	b.n	800fc08 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fbf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	68b9      	ldr	r1, [r7, #8]
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f001 fd3f 	bl	8011684 <ethernet_output>
 800fc06:	4603      	mov	r3, r0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3720      	adds	r7, #32
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	08014f0c 	.word	0x08014f0c
 800fc14:	0801505c 	.word	0x0801505c
 800fc18:	08014f84 	.word	0x08014f84
 800fc1c:	080150ac 	.word	0x080150ac
 800fc20:	0801504c 	.word	0x0801504c
 800fc24:	08015718 	.word	0x08015718
 800fc28:	20004bf4 	.word	0x20004bf4
 800fc2c:	20004b04 	.word	0x20004b04

0800fc30 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08c      	sub	sp, #48	; 0x30
 800fc34:	af02      	add	r7, sp, #8
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	3326      	adds	r3, #38	; 0x26
 800fc40:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fc42:	23ff      	movs	r3, #255	; 0xff
 800fc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68f9      	ldr	r1, [r7, #12]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f000 fe0e 	bl	8010874 <ip4_addr_isbroadcast_u32>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10c      	bne.n	800fc78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc66:	2be0      	cmp	r3, #224	; 0xe0
 800fc68:	d006      	beq.n	800fc78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d102      	bne.n	800fc7e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fc78:	f06f 030f 	mvn.w	r3, #15
 800fc7c:	e101      	b.n	800fe82 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	2101      	movs	r1, #1
 800fc82:	68b8      	ldr	r0, [r7, #8]
 800fc84:	f7ff fb60 	bl	800f348 <etharp_find_entry>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fc8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da02      	bge.n	800fc9a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fc94:	8a7b      	ldrh	r3, [r7, #18]
 800fc96:	b25b      	sxtb	r3, r3
 800fc98:	e0f3      	b.n	800fe82 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fc9a:	8a7b      	ldrh	r3, [r7, #18]
 800fc9c:	2b7e      	cmp	r3, #126	; 0x7e
 800fc9e:	d906      	bls.n	800fcae <etharp_query+0x7e>
 800fca0:	4b7a      	ldr	r3, [pc, #488]	; (800fe8c <etharp_query+0x25c>)
 800fca2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fca6:	497a      	ldr	r1, [pc, #488]	; (800fe90 <etharp_query+0x260>)
 800fca8:	487a      	ldr	r0, [pc, #488]	; (800fe94 <etharp_query+0x264>)
 800fcaa:	f001 ffc1 	bl	8011c30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fcae:	8a7b      	ldrh	r3, [r7, #18]
 800fcb0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fcb2:	7c7a      	ldrb	r2, [r7, #17]
 800fcb4:	4978      	ldr	r1, [pc, #480]	; (800fe98 <etharp_query+0x268>)
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	005b      	lsls	r3, r3, #1
 800fcba:	4413      	add	r3, r2
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	440b      	add	r3, r1
 800fcc0:	3314      	adds	r3, #20
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d115      	bne.n	800fcf4 <etharp_query+0xc4>
    is_new_entry = 1;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fccc:	7c7a      	ldrb	r2, [r7, #17]
 800fcce:	4972      	ldr	r1, [pc, #456]	; (800fe98 <etharp_query+0x268>)
 800fcd0:	4613      	mov	r3, r2
 800fcd2:	005b      	lsls	r3, r3, #1
 800fcd4:	4413      	add	r3, r2
 800fcd6:	00db      	lsls	r3, r3, #3
 800fcd8:	440b      	add	r3, r1
 800fcda:	3314      	adds	r3, #20
 800fcdc:	2201      	movs	r2, #1
 800fcde:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fce0:	7c7a      	ldrb	r2, [r7, #17]
 800fce2:	496d      	ldr	r1, [pc, #436]	; (800fe98 <etharp_query+0x268>)
 800fce4:	4613      	mov	r3, r2
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	4413      	add	r3, r2
 800fcea:	00db      	lsls	r3, r3, #3
 800fcec:	440b      	add	r3, r1
 800fcee:	3308      	adds	r3, #8
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fcf4:	7c7a      	ldrb	r2, [r7, #17]
 800fcf6:	4968      	ldr	r1, [pc, #416]	; (800fe98 <etharp_query+0x268>)
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	4413      	add	r3, r2
 800fcfe:	00db      	lsls	r3, r3, #3
 800fd00:	440b      	add	r3, r1
 800fd02:	3314      	adds	r3, #20
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d011      	beq.n	800fd2e <etharp_query+0xfe>
 800fd0a:	7c7a      	ldrb	r2, [r7, #17]
 800fd0c:	4962      	ldr	r1, [pc, #392]	; (800fe98 <etharp_query+0x268>)
 800fd0e:	4613      	mov	r3, r2
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	4413      	add	r3, r2
 800fd14:	00db      	lsls	r3, r3, #3
 800fd16:	440b      	add	r3, r1
 800fd18:	3314      	adds	r3, #20
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d806      	bhi.n	800fd2e <etharp_query+0xfe>
 800fd20:	4b5a      	ldr	r3, [pc, #360]	; (800fe8c <etharp_query+0x25c>)
 800fd22:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fd26:	495d      	ldr	r1, [pc, #372]	; (800fe9c <etharp_query+0x26c>)
 800fd28:	485a      	ldr	r0, [pc, #360]	; (800fe94 <etharp_query+0x264>)
 800fd2a:	f001 ff81 	bl	8011c30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fd2e:	6a3b      	ldr	r3, [r7, #32]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <etharp_query+0x10a>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d10c      	bne.n	800fd54 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fd3a:	68b9      	ldr	r1, [r7, #8]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f000 f963 	bl	8010008 <etharp_request>
 800fd42:	4603      	mov	r3, r0
 800fd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <etharp_query+0x124>
      return result;
 800fd4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd52:	e096      	b.n	800fe82 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <etharp_query+0x138>
 800fd5a:	4b4c      	ldr	r3, [pc, #304]	; (800fe8c <etharp_query+0x25c>)
 800fd5c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fd60:	494f      	ldr	r1, [pc, #316]	; (800fea0 <etharp_query+0x270>)
 800fd62:	484c      	ldr	r0, [pc, #304]	; (800fe94 <etharp_query+0x264>)
 800fd64:	f001 ff64 	bl	8011c30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fd68:	7c7a      	ldrb	r2, [r7, #17]
 800fd6a:	494b      	ldr	r1, [pc, #300]	; (800fe98 <etharp_query+0x268>)
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	4413      	add	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	440b      	add	r3, r1
 800fd76:	3314      	adds	r3, #20
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d917      	bls.n	800fdae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fd7e:	4a49      	ldr	r2, [pc, #292]	; (800fea4 <etharp_query+0x274>)
 800fd80:	7c7b      	ldrb	r3, [r7, #17]
 800fd82:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fd84:	7c7a      	ldrb	r2, [r7, #17]
 800fd86:	4613      	mov	r3, r2
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	4413      	add	r3, r2
 800fd8c:	00db      	lsls	r3, r3, #3
 800fd8e:	3308      	adds	r3, #8
 800fd90:	4a41      	ldr	r2, [pc, #260]	; (800fe98 <etharp_query+0x268>)
 800fd92:	4413      	add	r3, r2
 800fd94:	3304      	adds	r3, #4
 800fd96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd9a:	9200      	str	r2, [sp, #0]
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f001 fc6f 	bl	8011684 <ethernet_output>
 800fda6:	4603      	mov	r3, r0
 800fda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdac:	e067      	b.n	800fe7e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fdae:	7c7a      	ldrb	r2, [r7, #17]
 800fdb0:	4939      	ldr	r1, [pc, #228]	; (800fe98 <etharp_query+0x268>)
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	4413      	add	r3, r2
 800fdb8:	00db      	lsls	r3, r3, #3
 800fdba:	440b      	add	r3, r1
 800fdbc:	3314      	adds	r3, #20
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d15c      	bne.n	800fe7e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fdcc:	e01c      	b.n	800fe08 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	895a      	ldrh	r2, [r3, #10]
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	891b      	ldrh	r3, [r3, #8]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d10a      	bne.n	800fdf0 <etharp_query+0x1c0>
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d006      	beq.n	800fdf0 <etharp_query+0x1c0>
 800fde2:	4b2a      	ldr	r3, [pc, #168]	; (800fe8c <etharp_query+0x25c>)
 800fde4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fde8:	492f      	ldr	r1, [pc, #188]	; (800fea8 <etharp_query+0x278>)
 800fdea:	482a      	ldr	r0, [pc, #168]	; (800fe94 <etharp_query+0x264>)
 800fdec:	f001 ff20 	bl	8011c30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	7b1b      	ldrb	r3, [r3, #12]
 800fdf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <etharp_query+0x1d2>
        copy_needed = 1;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	61bb      	str	r3, [r7, #24]
        break;
 800fe00:	e005      	b.n	800fe0e <etharp_query+0x1de>
      }
      p = p->next;
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1df      	bne.n	800fdce <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d007      	beq.n	800fe24 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fe1a:	200e      	movs	r0, #14
 800fe1c:	f7f9 fcfc 	bl	8009818 <pbuf_clone>
 800fe20:	61f8      	str	r0, [r7, #28]
 800fe22:	e004      	b.n	800fe2e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fe28:	69f8      	ldr	r0, [r7, #28]
 800fe2a:	f7f9 fb33 	bl	8009494 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d021      	beq.n	800fe78 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fe34:	7c7a      	ldrb	r2, [r7, #17]
 800fe36:	4918      	ldr	r1, [pc, #96]	; (800fe98 <etharp_query+0x268>)
 800fe38:	4613      	mov	r3, r2
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	4413      	add	r3, r2
 800fe3e:	00db      	lsls	r3, r3, #3
 800fe40:	440b      	add	r3, r1
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00a      	beq.n	800fe5e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fe48:	7c7a      	ldrb	r2, [r7, #17]
 800fe4a:	4913      	ldr	r1, [pc, #76]	; (800fe98 <etharp_query+0x268>)
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	00db      	lsls	r3, r3, #3
 800fe54:	440b      	add	r3, r1
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7f9 fa75 	bl	8009348 <pbuf_free>
      }
      arp_table[i].q = p;
 800fe5e:	7c7a      	ldrb	r2, [r7, #17]
 800fe60:	490d      	ldr	r1, [pc, #52]	; (800fe98 <etharp_query+0x268>)
 800fe62:	4613      	mov	r3, r2
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	4413      	add	r3, r2
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	440b      	add	r3, r1
 800fe6c:	69fa      	ldr	r2, [r7, #28]
 800fe6e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe76:	e002      	b.n	800fe7e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fe78:	23ff      	movs	r3, #255	; 0xff
 800fe7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fe7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3728      	adds	r7, #40	; 0x28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	08014f0c 	.word	0x08014f0c
 800fe90:	080150b8 	.word	0x080150b8
 800fe94:	08014f84 	.word	0x08014f84
 800fe98:	20004b04 	.word	0x20004b04
 800fe9c:	080150c8 	.word	0x080150c8
 800fea0:	080150ac 	.word	0x080150ac
 800fea4:	20004bf4 	.word	0x20004bf4
 800fea8:	080150f0 	.word	0x080150f0

0800feac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b08a      	sub	sp, #40	; 0x28
 800feb0:	af02      	add	r7, sp, #8
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d106      	bne.n	800fed2 <etharp_raw+0x26>
 800fec4:	4b3a      	ldr	r3, [pc, #232]	; (800ffb0 <etharp_raw+0x104>)
 800fec6:	f240 4257 	movw	r2, #1111	; 0x457
 800feca:	493a      	ldr	r1, [pc, #232]	; (800ffb4 <etharp_raw+0x108>)
 800fecc:	483a      	ldr	r0, [pc, #232]	; (800ffb8 <etharp_raw+0x10c>)
 800fece:	f001 feaf 	bl	8011c30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fed2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fed6:	211c      	movs	r1, #28
 800fed8:	200e      	movs	r0, #14
 800feda:	f7f8 ff51 	bl	8008d80 <pbuf_alloc>
 800fede:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d102      	bne.n	800feec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fee6:	f04f 33ff 	mov.w	r3, #4294967295
 800feea:	e05d      	b.n	800ffa8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	895b      	ldrh	r3, [r3, #10]
 800fef0:	2b1b      	cmp	r3, #27
 800fef2:	d806      	bhi.n	800ff02 <etharp_raw+0x56>
 800fef4:	4b2e      	ldr	r3, [pc, #184]	; (800ffb0 <etharp_raw+0x104>)
 800fef6:	f240 4262 	movw	r2, #1122	; 0x462
 800fefa:	4930      	ldr	r1, [pc, #192]	; (800ffbc <etharp_raw+0x110>)
 800fefc:	482e      	ldr	r0, [pc, #184]	; (800ffb8 <etharp_raw+0x10c>)
 800fefe:	f001 fe97 	bl	8011c30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ff08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f7 fe70 	bl	8007bf0 <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff1e:	2b06      	cmp	r3, #6
 800ff20:	d006      	beq.n	800ff30 <etharp_raw+0x84>
 800ff22:	4b23      	ldr	r3, [pc, #140]	; (800ffb0 <etharp_raw+0x104>)
 800ff24:	f240 4269 	movw	r2, #1129	; 0x469
 800ff28:	4925      	ldr	r1, [pc, #148]	; (800ffc0 <etharp_raw+0x114>)
 800ff2a:	4823      	ldr	r0, [pc, #140]	; (800ffb8 <etharp_raw+0x10c>)
 800ff2c:	f001 fe80 	bl	8011c30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	3308      	adds	r3, #8
 800ff34:	2206      	movs	r2, #6
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f001 fe08 	bl	8011b4e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	3312      	adds	r3, #18
 800ff42:	2206      	movs	r2, #6
 800ff44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 fe01 	bl	8011b4e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	330e      	adds	r3, #14
 800ff50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff52:	6812      	ldr	r2, [r2, #0]
 800ff54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	3318      	adds	r3, #24
 800ff5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5c:	6812      	ldr	r2, [r2, #0]
 800ff5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	2200      	movs	r2, #0
 800ff64:	701a      	strb	r2, [r3, #0]
 800ff66:	2200      	movs	r2, #0
 800ff68:	f042 0201 	orr.w	r2, r2, #1
 800ff6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f042 0208 	orr.w	r2, r2, #8
 800ff76:	709a      	strb	r2, [r3, #2]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2206      	movs	r2, #6
 800ff80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2204      	movs	r2, #4
 800ff86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ff88:	f640 0306 	movw	r3, #2054	; 0x806
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	69b9      	ldr	r1, [r7, #24]
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f001 fb75 	bl	8011684 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ff9a:	69b8      	ldr	r0, [r7, #24]
 800ff9c:	f7f9 f9d4 	bl	8009348 <pbuf_free>
  p = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ffa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3720      	adds	r7, #32
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	08014f0c 	.word	0x08014f0c
 800ffb4:	0801505c 	.word	0x0801505c
 800ffb8:	08014f84 	.word	0x08014f84
 800ffbc:	0801510c 	.word	0x0801510c
 800ffc0:	08015140 	.word	0x08015140

0800ffc4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b088      	sub	sp, #32
 800ffc8:	af04      	add	r7, sp, #16
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	9203      	str	r2, [sp, #12]
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	9202      	str	r2, [sp, #8]
 800ffe8:	4a06      	ldr	r2, [pc, #24]	; (8010004 <etharp_request_dst+0x40>)
 800ffea:	9201      	str	r2, [sp, #4]
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	4603      	mov	r3, r0
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7ff ff5a 	bl	800feac <etharp_raw>
 800fff8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	08015720 	.word	0x08015720

08010008 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010012:	4a05      	ldr	r2, [pc, #20]	; (8010028 <etharp_request+0x20>)
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7ff ffd4 	bl	800ffc4 <etharp_request_dst>
 801001c:	4603      	mov	r3, r0
}
 801001e:	4618      	mov	r0, r3
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08015718 	.word	0x08015718

0801002c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08e      	sub	sp, #56	; 0x38
 8010030:	af04      	add	r7, sp, #16
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010036:	4b79      	ldr	r3, [pc, #484]	; (801021c <icmp_input+0x1f0>)
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	f003 030f 	and.w	r3, r3, #15
 8010044:	b2db      	uxtb	r3, r3
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	b2db      	uxtb	r3, r3
 801004a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801004c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801004e:	2b13      	cmp	r3, #19
 8010050:	f240 80cd 	bls.w	80101ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	895b      	ldrh	r3, [r3, #10]
 8010058:	2b03      	cmp	r3, #3
 801005a:	f240 80ca 	bls.w	80101f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010068:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801006c:	2b00      	cmp	r3, #0
 801006e:	f000 80b7 	beq.w	80101e0 <icmp_input+0x1b4>
 8010072:	2b08      	cmp	r3, #8
 8010074:	f040 80b7 	bne.w	80101e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010078:	4b69      	ldr	r3, [pc, #420]	; (8010220 <icmp_input+0x1f4>)
 801007a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801007c:	4b67      	ldr	r3, [pc, #412]	; (801021c <icmp_input+0x1f0>)
 801007e:	695b      	ldr	r3, [r3, #20]
 8010080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010084:	2be0      	cmp	r3, #224	; 0xe0
 8010086:	f000 80bb 	beq.w	8010200 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801008a:	4b64      	ldr	r3, [pc, #400]	; (801021c <icmp_input+0x1f0>)
 801008c:	695b      	ldr	r3, [r3, #20]
 801008e:	4a63      	ldr	r2, [pc, #396]	; (801021c <icmp_input+0x1f0>)
 8010090:	6812      	ldr	r2, [r2, #0]
 8010092:	4611      	mov	r1, r2
 8010094:	4618      	mov	r0, r3
 8010096:	f000 fbed 	bl	8010874 <ip4_addr_isbroadcast_u32>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	f040 80b1 	bne.w	8010204 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	2b07      	cmp	r3, #7
 80100a8:	f240 80a5 	bls.w	80101f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80100ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100ae:	330e      	adds	r3, #14
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7f9 f8b2 	bl	800921c <pbuf_add_header>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d04b      	beq.n	8010156 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	891a      	ldrh	r2, [r3, #8]
 80100c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100c4:	4413      	add	r3, r2
 80100c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	891b      	ldrh	r3, [r3, #8]
 80100cc:	8b7a      	ldrh	r2, [r7, #26]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	f0c0 809a 	bcc.w	8010208 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80100d4:	8b7b      	ldrh	r3, [r7, #26]
 80100d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100da:	4619      	mov	r1, r3
 80100dc:	200e      	movs	r0, #14
 80100de:	f7f8 fe4f 	bl	8008d80 <pbuf_alloc>
 80100e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f000 8090 	beq.w	801020c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	895b      	ldrh	r3, [r3, #10]
 80100f0:	461a      	mov	r2, r3
 80100f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100f4:	3308      	adds	r3, #8
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d203      	bcs.n	8010102 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80100fa:	6978      	ldr	r0, [r7, #20]
 80100fc:	f7f9 f924 	bl	8009348 <pbuf_free>
          goto icmperr;
 8010100:	e085      	b.n	801020e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801010a:	4618      	mov	r0, r3
 801010c:	f001 fd1f 	bl	8011b4e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010112:	4619      	mov	r1, r3
 8010114:	6978      	ldr	r0, [r7, #20]
 8010116:	f7f9 f891 	bl	800923c <pbuf_remove_header>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d009      	beq.n	8010134 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010120:	4b40      	ldr	r3, [pc, #256]	; (8010224 <icmp_input+0x1f8>)
 8010122:	22b6      	movs	r2, #182	; 0xb6
 8010124:	4940      	ldr	r1, [pc, #256]	; (8010228 <icmp_input+0x1fc>)
 8010126:	4841      	ldr	r0, [pc, #260]	; (801022c <icmp_input+0x200>)
 8010128:	f001 fd82 	bl	8011c30 <iprintf>
          pbuf_free(r);
 801012c:	6978      	ldr	r0, [r7, #20]
 801012e:	f7f9 f90b 	bl	8009348 <pbuf_free>
          goto icmperr;
 8010132:	e06c      	b.n	801020e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010134:	6879      	ldr	r1, [r7, #4]
 8010136:	6978      	ldr	r0, [r7, #20]
 8010138:	f7f9 fa2a 	bl	8009590 <pbuf_copy>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010142:	6978      	ldr	r0, [r7, #20]
 8010144:	f7f9 f900 	bl	8009348 <pbuf_free>
          goto icmperr;
 8010148:	e061      	b.n	801020e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7f9 f8fc 	bl	8009348 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	607b      	str	r3, [r7, #4]
 8010154:	e00f      	b.n	8010176 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010158:	330e      	adds	r3, #14
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f9 f86d 	bl	800923c <pbuf_remove_header>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d006      	beq.n	8010176 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010168:	4b2e      	ldr	r3, [pc, #184]	; (8010224 <icmp_input+0x1f8>)
 801016a:	22c7      	movs	r2, #199	; 0xc7
 801016c:	4930      	ldr	r1, [pc, #192]	; (8010230 <icmp_input+0x204>)
 801016e:	482f      	ldr	r0, [pc, #188]	; (801022c <icmp_input+0x200>)
 8010170:	f001 fd5e 	bl	8011c30 <iprintf>
          goto icmperr;
 8010174:	e04b      	b.n	801020e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801017c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801017e:	4619      	mov	r1, r3
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7f9 f84b 	bl	800921c <pbuf_add_header>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d12b      	bne.n	80101e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801019a:	4b20      	ldr	r3, [pc, #128]	; (801021c <icmp_input+0x1f0>)
 801019c:	691a      	ldr	r2, [r3, #16]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2200      	movs	r2, #0
 80101a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	2200      	movs	r2, #0
 80101ac:	709a      	strb	r2, [r3, #2]
 80101ae:	2200      	movs	r2, #0
 80101b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	22ff      	movs	r2, #255	; 0xff
 80101b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2200      	movs	r2, #0
 80101bc:	729a      	strb	r2, [r3, #10]
 80101be:	2200      	movs	r2, #0
 80101c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	9302      	str	r3, [sp, #8]
 80101c6:	2301      	movs	r3, #1
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	2300      	movs	r3, #0
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	23ff      	movs	r3, #255	; 0xff
 80101d0:	2200      	movs	r2, #0
 80101d2:	69f9      	ldr	r1, [r7, #28]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 fa75 	bl	80106c4 <ip4_output_if>
 80101da:	4603      	mov	r3, r0
 80101dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80101de:	e001      	b.n	80101e4 <icmp_input+0x1b8>
      break;
 80101e0:	bf00      	nop
 80101e2:	e000      	b.n	80101e6 <icmp_input+0x1ba>
      break;
 80101e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7f9 f8ae 	bl	8009348 <pbuf_free>
  return;
 80101ec:	e013      	b.n	8010216 <icmp_input+0x1ea>
    goto lenerr;
 80101ee:	bf00      	nop
 80101f0:	e002      	b.n	80101f8 <icmp_input+0x1cc>
    goto lenerr;
 80101f2:	bf00      	nop
 80101f4:	e000      	b.n	80101f8 <icmp_input+0x1cc>
        goto lenerr;
 80101f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f7f9 f8a5 	bl	8009348 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80101fe:	e00a      	b.n	8010216 <icmp_input+0x1ea>
        goto icmperr;
 8010200:	bf00      	nop
 8010202:	e004      	b.n	801020e <icmp_input+0x1e2>
        goto icmperr;
 8010204:	bf00      	nop
 8010206:	e002      	b.n	801020e <icmp_input+0x1e2>
          goto icmperr;
 8010208:	bf00      	nop
 801020a:	e000      	b.n	801020e <icmp_input+0x1e2>
          goto icmperr;
 801020c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7f9 f89a 	bl	8009348 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010214:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010216:	3728      	adds	r7, #40	; 0x28
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20007db4 	.word	0x20007db4
 8010220:	20007dc8 	.word	0x20007dc8
 8010224:	08015184 	.word	0x08015184
 8010228:	080151bc 	.word	0x080151bc
 801022c:	080151f4 	.word	0x080151f4
 8010230:	0801521c 	.word	0x0801521c

08010234 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	460b      	mov	r3, r1
 801023e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	461a      	mov	r2, r3
 8010244:	2103      	movs	r1, #3
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f814 	bl	8010274 <icmp_send_response>
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	461a      	mov	r2, r3
 8010264:	210b      	movs	r1, #11
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f804 	bl	8010274 <icmp_send_response>
}
 801026c:	bf00      	nop
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b08c      	sub	sp, #48	; 0x30
 8010278:	af04      	add	r7, sp, #16
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	460b      	mov	r3, r1
 801027e:	70fb      	strb	r3, [r7, #3]
 8010280:	4613      	mov	r3, r2
 8010282:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010284:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010288:	2124      	movs	r1, #36	; 0x24
 801028a:	2022      	movs	r0, #34	; 0x22
 801028c:	f7f8 fd78 	bl	8008d80 <pbuf_alloc>
 8010290:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d04c      	beq.n	8010332 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	895b      	ldrh	r3, [r3, #10]
 801029c:	2b23      	cmp	r3, #35	; 0x23
 801029e:	d806      	bhi.n	80102ae <icmp_send_response+0x3a>
 80102a0:	4b26      	ldr	r3, [pc, #152]	; (801033c <icmp_send_response+0xc8>)
 80102a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80102a6:	4926      	ldr	r1, [pc, #152]	; (8010340 <icmp_send_response+0xcc>)
 80102a8:	4826      	ldr	r0, [pc, #152]	; (8010344 <icmp_send_response+0xd0>)
 80102aa:	f001 fcc1 	bl	8011c30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	78fa      	ldrb	r2, [r7, #3]
 80102be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	78ba      	ldrb	r2, [r7, #2]
 80102c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2200      	movs	r2, #0
 80102ca:	711a      	strb	r2, [r3, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2200      	movs	r2, #0
 80102d4:	719a      	strb	r2, [r3, #6]
 80102d6:	2200      	movs	r2, #0
 80102d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f103 0008 	add.w	r0, r3, #8
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	221c      	movs	r2, #28
 80102e8:	4619      	mov	r1, r3
 80102ea:	f001 fc30 	bl	8011b4e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80102f4:	f107 030c 	add.w	r3, r7, #12
 80102f8:	4618      	mov	r0, r3
 80102fa:	f000 f825 	bl	8010348 <ip4_route>
 80102fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d011      	beq.n	801032a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	2200      	movs	r2, #0
 801030a:	709a      	strb	r2, [r3, #2]
 801030c:	2200      	movs	r2, #0
 801030e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010310:	f107 020c 	add.w	r2, r7, #12
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	9302      	str	r3, [sp, #8]
 8010318:	2301      	movs	r3, #1
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	2300      	movs	r3, #0
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	23ff      	movs	r3, #255	; 0xff
 8010322:	2100      	movs	r1, #0
 8010324:	69f8      	ldr	r0, [r7, #28]
 8010326:	f000 f9cd 	bl	80106c4 <ip4_output_if>
  }
  pbuf_free(q);
 801032a:	69f8      	ldr	r0, [r7, #28]
 801032c:	f7f9 f80c 	bl	8009348 <pbuf_free>
 8010330:	e000      	b.n	8010334 <icmp_send_response+0xc0>
    return;
 8010332:	bf00      	nop
}
 8010334:	3720      	adds	r7, #32
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	08015184 	.word	0x08015184
 8010340:	08015250 	.word	0x08015250
 8010344:	080151f4 	.word	0x080151f4

08010348 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010348:	b480      	push	{r7}
 801034a:	b085      	sub	sp, #20
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010350:	4b33      	ldr	r3, [pc, #204]	; (8010420 <ip4_route+0xd8>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	e036      	b.n	80103c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	b2db      	uxtb	r3, r3
 8010364:	2b00      	cmp	r3, #0
 8010366:	d02b      	beq.n	80103c0 <ip4_route+0x78>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801036e:	089b      	lsrs	r3, r3, #2
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d022      	beq.n	80103c0 <ip4_route+0x78>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3304      	adds	r3, #4
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d01d      	beq.n	80103c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3304      	adds	r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	405a      	eors	r2, r3
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	3308      	adds	r3, #8
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4013      	ands	r3, r2
 8010398:	2b00      	cmp	r3, #0
 801039a:	d101      	bne.n	80103a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	e038      	b.n	8010412 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103a6:	f003 0302 	and.w	r3, r3, #2
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d108      	bne.n	80103c0 <ip4_route+0x78>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	330c      	adds	r3, #12
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d101      	bne.n	80103c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	e028      	b.n	8010412 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1c5      	bne.n	8010358 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80103cc:	4b15      	ldr	r3, [pc, #84]	; (8010424 <ip4_route+0xdc>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d01a      	beq.n	801040a <ip4_route+0xc2>
 80103d4:	4b13      	ldr	r3, [pc, #76]	; (8010424 <ip4_route+0xdc>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103dc:	f003 0301 	and.w	r3, r3, #1
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d012      	beq.n	801040a <ip4_route+0xc2>
 80103e4:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <ip4_route+0xdc>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103ec:	f003 0304 	and.w	r3, r3, #4
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00a      	beq.n	801040a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80103f4:	4b0b      	ldr	r3, [pc, #44]	; (8010424 <ip4_route+0xdc>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3304      	adds	r3, #4
 80103fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d004      	beq.n	801040a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b7f      	cmp	r3, #127	; 0x7f
 8010408:	d101      	bne.n	801040e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	e001      	b.n	8010412 <ip4_route+0xca>
  }

  return netif_default;
 801040e:	4b05      	ldr	r3, [pc, #20]	; (8010424 <ip4_route+0xdc>)
 8010410:	681b      	ldr	r3, [r3, #0]
}
 8010412:	4618      	mov	r0, r3
 8010414:	3714      	adds	r7, #20
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	2000b4b8 	.word	0x2000b4b8
 8010424:	2000b4bc 	.word	0x2000b4bc

08010428 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010436:	f003 0301 	and.w	r3, r3, #1
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d016      	beq.n	801046e <ip4_input_accept+0x46>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	3304      	adds	r3, #4
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d011      	beq.n	801046e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801044a:	4b0b      	ldr	r3, [pc, #44]	; (8010478 <ip4_input_accept+0x50>)
 801044c:	695a      	ldr	r2, [r3, #20]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3304      	adds	r3, #4
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	429a      	cmp	r2, r3
 8010456:	d008      	beq.n	801046a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010458:	4b07      	ldr	r3, [pc, #28]	; (8010478 <ip4_input_accept+0x50>)
 801045a:	695b      	ldr	r3, [r3, #20]
 801045c:	6879      	ldr	r1, [r7, #4]
 801045e:	4618      	mov	r0, r3
 8010460:	f000 fa08 	bl	8010874 <ip4_addr_isbroadcast_u32>
 8010464:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801046a:	2301      	movs	r3, #1
 801046c:	e000      	b.n	8010470 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	20007db4 	.word	0x20007db4

0801047c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	091b      	lsrs	r3, r3, #4
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b04      	cmp	r3, #4
 8010496:	d004      	beq.n	80104a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7f8 ff55 	bl	8009348 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	e107      	b.n	80106b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	f003 030f 	and.w	r3, r3, #15
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	885b      	ldrh	r3, [r3, #2]
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f7 fb99 	bl	8007bf0 <lwip_htons>
 80104be:	4603      	mov	r3, r0
 80104c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	891b      	ldrh	r3, [r3, #8]
 80104c6:	89ba      	ldrh	r2, [r7, #12]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d204      	bcs.n	80104d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80104cc:	89bb      	ldrh	r3, [r7, #12]
 80104ce:	4619      	mov	r1, r3
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7f8 fdb3 	bl	800903c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	895b      	ldrh	r3, [r3, #10]
 80104da:	89fa      	ldrh	r2, [r7, #14]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d807      	bhi.n	80104f0 <ip4_input+0x74>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	891b      	ldrh	r3, [r3, #8]
 80104e4:	89ba      	ldrh	r2, [r7, #12]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d802      	bhi.n	80104f0 <ip4_input+0x74>
 80104ea:	89fb      	ldrh	r3, [r7, #14]
 80104ec:	2b13      	cmp	r3, #19
 80104ee:	d804      	bhi.n	80104fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7f8 ff29 	bl	8009348 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	e0db      	b.n	80106b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	4a6f      	ldr	r2, [pc, #444]	; (80106bc <ip4_input+0x240>)
 8010500:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	4a6d      	ldr	r2, [pc, #436]	; (80106bc <ip4_input+0x240>)
 8010508:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801050a:	4b6c      	ldr	r3, [pc, #432]	; (80106bc <ip4_input+0x240>)
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010512:	2be0      	cmp	r3, #224	; 0xe0
 8010514:	d112      	bne.n	801053c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	b2db      	uxtb	r3, r3
 8010522:	2b00      	cmp	r3, #0
 8010524:	d007      	beq.n	8010536 <ip4_input+0xba>
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	3304      	adds	r3, #4
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <ip4_input+0xba>
      netif = inp;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	613b      	str	r3, [r7, #16]
 8010534:	e02a      	b.n	801058c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010536:	2300      	movs	r3, #0
 8010538:	613b      	str	r3, [r7, #16]
 801053a:	e027      	b.n	801058c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801053c:	6838      	ldr	r0, [r7, #0]
 801053e:	f7ff ff73 	bl	8010428 <ip4_input_accept>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <ip4_input+0xd2>
      netif = inp;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	613b      	str	r3, [r7, #16]
 801054c:	e01e      	b.n	801058c <ip4_input+0x110>
    } else {
      netif = NULL;
 801054e:	2300      	movs	r3, #0
 8010550:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010552:	4b5a      	ldr	r3, [pc, #360]	; (80106bc <ip4_input+0x240>)
 8010554:	695b      	ldr	r3, [r3, #20]
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b7f      	cmp	r3, #127	; 0x7f
 801055a:	d017      	beq.n	801058c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801055c:	4b58      	ldr	r3, [pc, #352]	; (80106c0 <ip4_input+0x244>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	613b      	str	r3, [r7, #16]
 8010562:	e00e      	b.n	8010582 <ip4_input+0x106>
          if (netif == inp) {
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	429a      	cmp	r2, r3
 801056a:	d006      	beq.n	801057a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801056c:	6938      	ldr	r0, [r7, #16]
 801056e:	f7ff ff5b 	bl	8010428 <ip4_input_accept>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d108      	bne.n	801058a <ip4_input+0x10e>
 8010578:	e000      	b.n	801057c <ip4_input+0x100>
            continue;
 801057a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	613b      	str	r3, [r7, #16]
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1ed      	bne.n	8010564 <ip4_input+0xe8>
 8010588:	e000      	b.n	801058c <ip4_input+0x110>
            break;
 801058a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801058c:	4b4b      	ldr	r3, [pc, #300]	; (80106bc <ip4_input+0x240>)
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	6839      	ldr	r1, [r7, #0]
 8010592:	4618      	mov	r0, r3
 8010594:	f000 f96e 	bl	8010874 <ip4_addr_isbroadcast_u32>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d105      	bne.n	80105aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801059e:	4b47      	ldr	r3, [pc, #284]	; (80106bc <ip4_input+0x240>)
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80105a6:	2be0      	cmp	r3, #224	; 0xe0
 80105a8:	d104      	bne.n	80105b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7f8 fecc 	bl	8009348 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80105b0:	2300      	movs	r3, #0
 80105b2:	e07e      	b.n	80106b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d104      	bne.n	80105c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7f8 fec4 	bl	8009348 <pbuf_free>
    return ERR_OK;
 80105c0:	2300      	movs	r3, #0
 80105c2:	e076      	b.n	80106b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	88db      	ldrh	r3, [r3, #6]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	461a      	mov	r2, r3
 80105cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80105d0:	4013      	ands	r3, r2
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00b      	beq.n	80105ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 fc92 	bl	8010f00 <ip4_reass>
 80105dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d101      	bne.n	80105e8 <ip4_input+0x16c>
      return ERR_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	e064      	b.n	80106b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80105ee:	4a33      	ldr	r2, [pc, #204]	; (80106bc <ip4_input+0x240>)
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80105f4:	4a31      	ldr	r2, [pc, #196]	; (80106bc <ip4_input+0x240>)
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80105fa:	4a30      	ldr	r2, [pc, #192]	; (80106bc <ip4_input+0x240>)
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f003 030f 	and.w	r3, r3, #15
 8010608:	b2db      	uxtb	r3, r3
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	b2db      	uxtb	r3, r3
 801060e:	b29a      	uxth	r2, r3
 8010610:	4b2a      	ldr	r3, [pc, #168]	; (80106bc <ip4_input+0x240>)
 8010612:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010614:	89fb      	ldrh	r3, [r7, #14]
 8010616:	4619      	mov	r1, r3
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7f8 fe0f 	bl	800923c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	7a5b      	ldrb	r3, [r3, #9]
 8010622:	2b11      	cmp	r3, #17
 8010624:	d006      	beq.n	8010634 <ip4_input+0x1b8>
 8010626:	2b11      	cmp	r3, #17
 8010628:	dc13      	bgt.n	8010652 <ip4_input+0x1d6>
 801062a:	2b01      	cmp	r3, #1
 801062c:	d00c      	beq.n	8010648 <ip4_input+0x1cc>
 801062e:	2b06      	cmp	r3, #6
 8010630:	d005      	beq.n	801063e <ip4_input+0x1c2>
 8010632:	e00e      	b.n	8010652 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010634:	6839      	ldr	r1, [r7, #0]
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7fe fc68 	bl	800ef0c <udp_input>
        break;
 801063c:	e026      	b.n	801068c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7fa fcb5 	bl	800afb0 <tcp_input>
        break;
 8010646:	e021      	b.n	801068c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff fcee 	bl	801002c <icmp_input>
        break;
 8010650:	e01c      	b.n	801068c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010652:	4b1a      	ldr	r3, [pc, #104]	; (80106bc <ip4_input+0x240>)
 8010654:	695b      	ldr	r3, [r3, #20]
 8010656:	6939      	ldr	r1, [r7, #16]
 8010658:	4618      	mov	r0, r3
 801065a:	f000 f90b 	bl	8010874 <ip4_addr_isbroadcast_u32>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d10f      	bne.n	8010684 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010664:	4b15      	ldr	r3, [pc, #84]	; (80106bc <ip4_input+0x240>)
 8010666:	695b      	ldr	r3, [r3, #20]
 8010668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801066c:	2be0      	cmp	r3, #224	; 0xe0
 801066e:	d009      	beq.n	8010684 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010674:	4619      	mov	r1, r3
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7f8 fe53 	bl	8009322 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801067c:	2102      	movs	r1, #2
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7ff fdd8 	bl	8010234 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7f8 fe5f 	bl	8009348 <pbuf_free>
        break;
 801068a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801068c:	4b0b      	ldr	r3, [pc, #44]	; (80106bc <ip4_input+0x240>)
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010692:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <ip4_input+0x240>)
 8010694:	2200      	movs	r2, #0
 8010696:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010698:	4b08      	ldr	r3, [pc, #32]	; (80106bc <ip4_input+0x240>)
 801069a:	2200      	movs	r2, #0
 801069c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801069e:	4b07      	ldr	r3, [pc, #28]	; (80106bc <ip4_input+0x240>)
 80106a0:	2200      	movs	r2, #0
 80106a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80106a4:	4b05      	ldr	r3, [pc, #20]	; (80106bc <ip4_input+0x240>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80106aa:	4b04      	ldr	r3, [pc, #16]	; (80106bc <ip4_input+0x240>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3718      	adds	r7, #24
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20007db4 	.word	0x20007db4
 80106c0:	2000b4b8 	.word	0x2000b4b8

080106c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08a      	sub	sp, #40	; 0x28
 80106c8:	af04      	add	r7, sp, #16
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
 80106d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d009      	beq.n	80106f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <ip4_output_if+0x26>
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d102      	bne.n	80106f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80106ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ec:	3304      	adds	r3, #4
 80106ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80106f0:	78fa      	ldrb	r2, [r7, #3]
 80106f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f4:	9302      	str	r3, [sp, #8]
 80106f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	4613      	mov	r3, r2
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	6979      	ldr	r1, [r7, #20]
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f000 f805 	bl	8010718 <ip4_output_if_src>
 801070e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010710:	4618      	mov	r0, r3
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b088      	sub	sp, #32
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
 8010724:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	7b9b      	ldrb	r3, [r3, #14]
 801072a:	2b01      	cmp	r3, #1
 801072c:	d006      	beq.n	801073c <ip4_output_if_src+0x24>
 801072e:	4b4b      	ldr	r3, [pc, #300]	; (801085c <ip4_output_if_src+0x144>)
 8010730:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010734:	494a      	ldr	r1, [pc, #296]	; (8010860 <ip4_output_if_src+0x148>)
 8010736:	484b      	ldr	r0, [pc, #300]	; (8010864 <ip4_output_if_src+0x14c>)
 8010738:	f001 fa7a 	bl	8011c30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d060      	beq.n	8010804 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010742:	2314      	movs	r3, #20
 8010744:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010746:	2114      	movs	r1, #20
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f7f8 fd67 	bl	800921c <pbuf_add_header>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d002      	beq.n	801075a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010754:	f06f 0301 	mvn.w	r3, #1
 8010758:	e07c      	b.n	8010854 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	895b      	ldrh	r3, [r3, #10]
 8010764:	2b13      	cmp	r3, #19
 8010766:	d806      	bhi.n	8010776 <ip4_output_if_src+0x5e>
 8010768:	4b3c      	ldr	r3, [pc, #240]	; (801085c <ip4_output_if_src+0x144>)
 801076a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801076e:	493e      	ldr	r1, [pc, #248]	; (8010868 <ip4_output_if_src+0x150>)
 8010770:	483c      	ldr	r0, [pc, #240]	; (8010864 <ip4_output_if_src+0x14c>)
 8010772:	f001 fa5d 	bl	8011c30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	78fa      	ldrb	r2, [r7, #3]
 801077a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010782:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801078c:	8b7b      	ldrh	r3, [r7, #26]
 801078e:	089b      	lsrs	r3, r3, #2
 8010790:	b29b      	uxth	r3, r3
 8010792:	b2db      	uxtb	r3, r3
 8010794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010798:	b2da      	uxtb	r2, r3
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80107a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	891b      	ldrh	r3, [r3, #8]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7f7 fa20 	bl	8007bf0 <lwip_htons>
 80107b0:	4603      	mov	r3, r0
 80107b2:	461a      	mov	r2, r3
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	2200      	movs	r2, #0
 80107bc:	719a      	strb	r2, [r3, #6]
 80107be:	2200      	movs	r2, #0
 80107c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80107c2:	4b2a      	ldr	r3, [pc, #168]	; (801086c <ip4_output_if_src+0x154>)
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7f7 fa12 	bl	8007bf0 <lwip_htons>
 80107cc:	4603      	mov	r3, r0
 80107ce:	461a      	mov	r2, r3
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80107d4:	4b25      	ldr	r3, [pc, #148]	; (801086c <ip4_output_if_src+0x154>)
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	3301      	adds	r3, #1
 80107da:	b29a      	uxth	r2, r3
 80107dc:	4b23      	ldr	r3, [pc, #140]	; (801086c <ip4_output_if_src+0x154>)
 80107de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d104      	bne.n	80107f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80107e6:	4b22      	ldr	r3, [pc, #136]	; (8010870 <ip4_output_if_src+0x158>)
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	60da      	str	r2, [r3, #12]
 80107ee:	e003      	b.n	80107f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	2200      	movs	r2, #0
 80107fc:	729a      	strb	r2, [r3, #10]
 80107fe:	2200      	movs	r2, #0
 8010800:	72da      	strb	r2, [r3, #11]
 8010802:	e00f      	b.n	8010824 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	895b      	ldrh	r3, [r3, #10]
 8010808:	2b13      	cmp	r3, #19
 801080a:	d802      	bhi.n	8010812 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801080c:	f06f 0301 	mvn.w	r3, #1
 8010810:	e020      	b.n	8010854 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	685b      	ldr	r3, [r3, #4]
 8010816:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	691b      	ldr	r3, [r3, #16]
 801081c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801081e:	f107 0314 	add.w	r3, r7, #20
 8010822:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00c      	beq.n	8010846 <ip4_output_if_src+0x12e>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	891a      	ldrh	r2, [r3, #8]
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010834:	429a      	cmp	r2, r3
 8010836:	d906      	bls.n	8010846 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f000 fd4d 	bl	80112dc <ip4_frag>
 8010842:	4603      	mov	r3, r0
 8010844:	e006      	b.n	8010854 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	695b      	ldr	r3, [r3, #20]
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	68f9      	ldr	r1, [r7, #12]
 801084e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010850:	4798      	blx	r3
 8010852:	4603      	mov	r3, r0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3720      	adds	r7, #32
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	0801527c 	.word	0x0801527c
 8010860:	080152b0 	.word	0x080152b0
 8010864:	080152bc 	.word	0x080152bc
 8010868:	080152e4 	.word	0x080152e4
 801086c:	20004bf6 	.word	0x20004bf6
 8010870:	08015714 	.word	0x08015714

08010874 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010888:	d002      	beq.n	8010890 <ip4_addr_isbroadcast_u32+0x1c>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d101      	bne.n	8010894 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010890:	2301      	movs	r3, #1
 8010892:	e02a      	b.n	80108ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801089a:	f003 0302 	and.w	r3, r3, #2
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80108a2:	2300      	movs	r3, #0
 80108a4:	e021      	b.n	80108ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	3304      	adds	r3, #4
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d101      	bne.n	80108b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80108b2:	2300      	movs	r3, #0
 80108b4:	e019      	b.n	80108ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80108b6:	68fa      	ldr	r2, [r7, #12]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	3304      	adds	r3, #4
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	405a      	eors	r2, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	3308      	adds	r3, #8
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4013      	ands	r3, r2
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d10d      	bne.n	80108e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	3308      	adds	r3, #8
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	43da      	mvns	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	3308      	adds	r3, #8
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d101      	bne.n	80108e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80108e4:	2301      	movs	r3, #1
 80108e6:	e000      	b.n	80108ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80108e8:	2300      	movs	r3, #0
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
	...

080108f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010902:	4b12      	ldr	r3, [pc, #72]	; (801094c <ip_reass_tmr+0x54>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010908:	e018      	b.n	801093c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	7fdb      	ldrb	r3, [r3, #31]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00b      	beq.n	801092a <ip_reass_tmr+0x32>
      r->timer--;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	7fdb      	ldrb	r3, [r3, #31]
 8010916:	3b01      	subs	r3, #1
 8010918:	b2da      	uxtb	r2, r3
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	60fb      	str	r3, [r7, #12]
 8010928:	e008      	b.n	801093c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010934:	68b9      	ldr	r1, [r7, #8]
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 f80a 	bl	8010950 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1e3      	bne.n	801090a <ip_reass_tmr+0x12>
    }
  }
}
 8010942:	bf00      	nop
 8010944:	bf00      	nop
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20004bf8 	.word	0x20004bf8

08010950 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801095e:	683a      	ldr	r2, [r7, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d105      	bne.n	8010972 <ip_reass_free_complete_datagram+0x22>
 8010966:	4b45      	ldr	r3, [pc, #276]	; (8010a7c <ip_reass_free_complete_datagram+0x12c>)
 8010968:	22ab      	movs	r2, #171	; 0xab
 801096a:	4945      	ldr	r1, [pc, #276]	; (8010a80 <ip_reass_free_complete_datagram+0x130>)
 801096c:	4845      	ldr	r0, [pc, #276]	; (8010a84 <ip_reass_free_complete_datagram+0x134>)
 801096e:	f001 f95f 	bl	8011c30 <iprintf>
  if (prev != NULL) {
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00a      	beq.n	801098e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d005      	beq.n	801098e <ip_reass_free_complete_datagram+0x3e>
 8010982:	4b3e      	ldr	r3, [pc, #248]	; (8010a7c <ip_reass_free_complete_datagram+0x12c>)
 8010984:	22ad      	movs	r2, #173	; 0xad
 8010986:	4940      	ldr	r1, [pc, #256]	; (8010a88 <ip_reass_free_complete_datagram+0x138>)
 8010988:	483e      	ldr	r0, [pc, #248]	; (8010a84 <ip_reass_free_complete_datagram+0x134>)
 801098a:	f001 f951 	bl	8011c30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	889b      	ldrh	r3, [r3, #4]
 801099a:	b29b      	uxth	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d12a      	bne.n	80109f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	6858      	ldr	r0, [r3, #4]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3308      	adds	r3, #8
 80109b6:	2214      	movs	r2, #20
 80109b8:	4619      	mov	r1, r3
 80109ba:	f001 f8c8 	bl	8011b4e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80109be:	2101      	movs	r1, #1
 80109c0:	69b8      	ldr	r0, [r7, #24]
 80109c2:	f7ff fc47 	bl	8010254 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80109c6:	69b8      	ldr	r0, [r7, #24]
 80109c8:	f7f8 fd4c 	bl	8009464 <pbuf_clen>
 80109cc:	4603      	mov	r3, r0
 80109ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80109d0:	8bfa      	ldrh	r2, [r7, #30]
 80109d2:	8a7b      	ldrh	r3, [r7, #18]
 80109d4:	4413      	add	r3, r2
 80109d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109da:	db05      	blt.n	80109e8 <ip_reass_free_complete_datagram+0x98>
 80109dc:	4b27      	ldr	r3, [pc, #156]	; (8010a7c <ip_reass_free_complete_datagram+0x12c>)
 80109de:	22bc      	movs	r2, #188	; 0xbc
 80109e0:	492a      	ldr	r1, [pc, #168]	; (8010a8c <ip_reass_free_complete_datagram+0x13c>)
 80109e2:	4828      	ldr	r0, [pc, #160]	; (8010a84 <ip_reass_free_complete_datagram+0x134>)
 80109e4:	f001 f924 	bl	8011c30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80109e8:	8bfa      	ldrh	r2, [r7, #30]
 80109ea:	8a7b      	ldrh	r3, [r7, #18]
 80109ec:	4413      	add	r3, r2
 80109ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80109f0:	69b8      	ldr	r0, [r7, #24]
 80109f2:	f7f8 fca9 	bl	8009348 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80109fc:	e01f      	b.n	8010a3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f7f8 fd28 	bl	8009464 <pbuf_clen>
 8010a14:	4603      	mov	r3, r0
 8010a16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010a18:	8bfa      	ldrh	r2, [r7, #30]
 8010a1a:	8a7b      	ldrh	r3, [r7, #18]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a22:	db05      	blt.n	8010a30 <ip_reass_free_complete_datagram+0xe0>
 8010a24:	4b15      	ldr	r3, [pc, #84]	; (8010a7c <ip_reass_free_complete_datagram+0x12c>)
 8010a26:	22cc      	movs	r2, #204	; 0xcc
 8010a28:	4918      	ldr	r1, [pc, #96]	; (8010a8c <ip_reass_free_complete_datagram+0x13c>)
 8010a2a:	4816      	ldr	r0, [pc, #88]	; (8010a84 <ip_reass_free_complete_datagram+0x134>)
 8010a2c:	f001 f900 	bl	8011c30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010a30:	8bfa      	ldrh	r2, [r7, #30]
 8010a32:	8a7b      	ldrh	r3, [r7, #18]
 8010a34:	4413      	add	r3, r2
 8010a36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7f8 fc85 	bl	8009348 <pbuf_free>
  while (p != NULL) {
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1dc      	bne.n	80109fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f8c2 	bl	8010bd0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010a4c:	4b10      	ldr	r3, [pc, #64]	; (8010a90 <ip_reass_free_complete_datagram+0x140>)
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	8bfa      	ldrh	r2, [r7, #30]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d905      	bls.n	8010a62 <ip_reass_free_complete_datagram+0x112>
 8010a56:	4b09      	ldr	r3, [pc, #36]	; (8010a7c <ip_reass_free_complete_datagram+0x12c>)
 8010a58:	22d2      	movs	r2, #210	; 0xd2
 8010a5a:	490e      	ldr	r1, [pc, #56]	; (8010a94 <ip_reass_free_complete_datagram+0x144>)
 8010a5c:	4809      	ldr	r0, [pc, #36]	; (8010a84 <ip_reass_free_complete_datagram+0x134>)
 8010a5e:	f001 f8e7 	bl	8011c30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010a62:	4b0b      	ldr	r3, [pc, #44]	; (8010a90 <ip_reass_free_complete_datagram+0x140>)
 8010a64:	881a      	ldrh	r2, [r3, #0]
 8010a66:	8bfb      	ldrh	r3, [r7, #30]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	4b08      	ldr	r3, [pc, #32]	; (8010a90 <ip_reass_free_complete_datagram+0x140>)
 8010a6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010a70:	8bfb      	ldrh	r3, [r7, #30]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3720      	adds	r7, #32
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08015314 	.word	0x08015314
 8010a80:	08015350 	.word	0x08015350
 8010a84:	0801535c 	.word	0x0801535c
 8010a88:	08015384 	.word	0x08015384
 8010a8c:	08015398 	.word	0x08015398
 8010a90:	20004bfc 	.word	0x20004bfc
 8010a94:	080153b8 	.word	0x080153b8

08010a98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	; 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010ab6:	4b28      	ldr	r3, [pc, #160]	; (8010b58 <ip_reass_remove_oldest_datagram+0xc0>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010abc:	e030      	b.n	8010b20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac0:	695a      	ldr	r2, [r3, #20]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d10c      	bne.n	8010ae4 <ip_reass_remove_oldest_datagram+0x4c>
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	699a      	ldr	r2, [r3, #24]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d106      	bne.n	8010ae4 <ip_reass_remove_oldest_datagram+0x4c>
 8010ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad8:	899a      	ldrh	r2, [r3, #12]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	889b      	ldrh	r3, [r3, #4]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d014      	beq.n	8010b0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d104      	bne.n	8010afa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	61bb      	str	r3, [r7, #24]
 8010af8:	e009      	b.n	8010b0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	7fda      	ldrb	r2, [r3, #31]
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	7fdb      	ldrb	r3, [r3, #31]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d803      	bhi.n	8010b0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1cb      	bne.n	8010abe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d008      	beq.n	8010b3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010b2c:	69b9      	ldr	r1, [r7, #24]
 8010b2e:	6a38      	ldr	r0, [r7, #32]
 8010b30:	f7ff ff0e 	bl	8010950 <ip_reass_free_complete_datagram>
 8010b34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010b36:	697a      	ldr	r2, [r7, #20]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010b3e:	697a      	ldr	r2, [r7, #20]
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	da02      	bge.n	8010b4c <ip_reass_remove_oldest_datagram+0xb4>
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	dcac      	bgt.n	8010aa6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010b4c:	697b      	ldr	r3, [r7, #20]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3728      	adds	r7, #40	; 0x28
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20004bf8 	.word	0x20004bf8

08010b5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010b66:	2004      	movs	r0, #4
 8010b68:	f7f7 fcf8 	bl	800855c <memp_malloc>
 8010b6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d110      	bne.n	8010b96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7ff ff8e 	bl	8010a98 <ip_reass_remove_oldest_datagram>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	4293      	cmp	r3, r2
 8010b82:	dc03      	bgt.n	8010b8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010b84:	2004      	movs	r0, #4
 8010b86:	f7f7 fce9 	bl	800855c <memp_malloc>
 8010b8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d101      	bne.n	8010b96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010b92:	2300      	movs	r3, #0
 8010b94:	e016      	b.n	8010bc4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010b96:	2220      	movs	r2, #32
 8010b98:	2100      	movs	r1, #0
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f000 ffe5 	bl	8011b6a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	220f      	movs	r2, #15
 8010ba4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010ba6:	4b09      	ldr	r3, [pc, #36]	; (8010bcc <ip_reass_enqueue_new_datagram+0x70>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010bae:	4a07      	ldr	r2, [pc, #28]	; (8010bcc <ip_reass_enqueue_new_datagram+0x70>)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	3308      	adds	r3, #8
 8010bb8:	2214      	movs	r2, #20
 8010bba:	6879      	ldr	r1, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 ffc6 	bl	8011b4e <memcpy>
  return ipr;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	20004bf8 	.word	0x20004bf8

08010bd0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010bda:	4b10      	ldr	r3, [pc, #64]	; (8010c1c <ip_reass_dequeue_datagram+0x4c>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d104      	bne.n	8010bee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a0c      	ldr	r2, [pc, #48]	; (8010c1c <ip_reass_dequeue_datagram+0x4c>)
 8010bea:	6013      	str	r3, [r2, #0]
 8010bec:	e00d      	b.n	8010c0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d106      	bne.n	8010c02 <ip_reass_dequeue_datagram+0x32>
 8010bf4:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <ip_reass_dequeue_datagram+0x50>)
 8010bf6:	f240 1245 	movw	r2, #325	; 0x145
 8010bfa:	490a      	ldr	r1, [pc, #40]	; (8010c24 <ip_reass_dequeue_datagram+0x54>)
 8010bfc:	480a      	ldr	r0, [pc, #40]	; (8010c28 <ip_reass_dequeue_datagram+0x58>)
 8010bfe:	f001 f817 	bl	8011c30 <iprintf>
    prev->next = ipr->next;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	2004      	movs	r0, #4
 8010c0e:	f7f7 fcf7 	bl	8008600 <memp_free>
}
 8010c12:	bf00      	nop
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	20004bf8 	.word	0x20004bf8
 8010c20:	08015314 	.word	0x08015314
 8010c24:	080153dc 	.word	0x080153dc
 8010c28:	0801535c 	.word	0x0801535c

08010c2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b08c      	sub	sp, #48	; 0x30
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	885b      	ldrh	r3, [r3, #2]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7f6 ffcf 	bl	8007bf0 <lwip_htons>
 8010c52:	4603      	mov	r3, r0
 8010c54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	f003 030f 	and.w	r3, r3, #15
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010c64:	7e7b      	ldrb	r3, [r7, #25]
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	8b7a      	ldrh	r2, [r7, #26]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d202      	bcs.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c72:	e135      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010c74:	7e7b      	ldrb	r3, [r7, #25]
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	8b7a      	ldrh	r2, [r7, #26]
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	88db      	ldrh	r3, [r3, #6]
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7f6 ffb3 	bl	8007bf0 <lwip_htons>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	701a      	strb	r2, [r3, #0]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	705a      	strb	r2, [r3, #1]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	709a      	strb	r2, [r3, #2]
 8010caa:	2200      	movs	r2, #0
 8010cac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb0:	8afa      	ldrh	r2, [r7, #22]
 8010cb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010cb4:	8afa      	ldrh	r2, [r7, #22]
 8010cb6:	8b7b      	ldrh	r3, [r7, #26]
 8010cb8:	4413      	add	r3, r2
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc2:	88db      	ldrh	r3, [r3, #6]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	8afa      	ldrh	r2, [r7, #22]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d902      	bls.n	8010cd2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd0:	e106      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd8:	e068      	b.n	8010dac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	889b      	ldrh	r3, [r3, #4]
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	889b      	ldrh	r3, [r3, #4]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d235      	bcs.n	8010d5c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d020      	beq.n	8010d3e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfe:	889b      	ldrh	r3, [r3, #4]
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	88db      	ldrh	r3, [r3, #6]
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d307      	bcc.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0e:	88db      	ldrh	r3, [r3, #6]
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	889b      	ldrh	r3, [r3, #4]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d902      	bls.n	8010d22 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d20:	e0de      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	88db      	ldrh	r3, [r3, #6]
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d30:	889b      	ldrh	r3, [r3, #4]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d03d      	beq.n	8010db4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010d3c:	e03a      	b.n	8010db4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	88db      	ldrh	r3, [r3, #6]
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	889b      	ldrh	r3, [r3, #4]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d902      	bls.n	8010d54 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d52:	e0c5      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	605a      	str	r2, [r3, #4]
      break;
 8010d5a:	e02b      	b.n	8010db4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	889b      	ldrh	r3, [r3, #4]
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	889b      	ldrh	r3, [r3, #4]
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d102      	bne.n	8010d72 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d70:	e0b6      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d74:	889b      	ldrh	r3, [r3, #4]
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	88db      	ldrh	r3, [r3, #6]
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d202      	bcs.n	8010d88 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d82:	f04f 33ff 	mov.w	r3, #4294967295
 8010d86:	e0ab      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d009      	beq.n	8010da2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d90:	88db      	ldrh	r3, [r3, #6]
 8010d92:	b29a      	uxth	r2, r3
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	889b      	ldrh	r3, [r3, #4]
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d001      	beq.n	8010da2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d193      	bne.n	8010cda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010db2:	e000      	b.n	8010db6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010db4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d12d      	bne.n	8010e18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d01c      	beq.n	8010dfc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc4:	88db      	ldrh	r3, [r3, #6]
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	889b      	ldrh	r3, [r3, #4]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d906      	bls.n	8010de0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010dd2:	4b45      	ldr	r3, [pc, #276]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010dd4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010dd8:	4944      	ldr	r1, [pc, #272]	; (8010eec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010dda:	4845      	ldr	r0, [pc, #276]	; (8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ddc:	f000 ff28 	bl	8011c30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de8:	88db      	ldrh	r3, [r3, #6]
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dee:	889b      	ldrh	r3, [r3, #4]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d010      	beq.n	8010e18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	623b      	str	r3, [r7, #32]
 8010dfa:	e00d      	b.n	8010e18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010e04:	4b38      	ldr	r3, [pc, #224]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e06:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010e0a:	493a      	ldr	r1, [pc, #232]	; (8010ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010e0c:	4838      	ldr	r0, [pc, #224]	; (8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e0e:	f000 ff0f 	bl	8011c30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d105      	bne.n	8010e2a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	7f9b      	ldrb	r3, [r3, #30]
 8010e22:	f003 0301 	and.w	r3, r3, #1
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d059      	beq.n	8010ede <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d04f      	beq.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d006      	beq.n	8010e46 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	889b      	ldrh	r3, [r3, #4]
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	623b      	str	r3, [r7, #32]
 8010e4a:	e041      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010e56:	e012      	b.n	8010e7e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	88db      	ldrh	r3, [r3, #6]
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	889b      	ldrh	r3, [r3, #4]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d002      	beq.n	8010e74 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	623b      	str	r3, [r7, #32]
            break;
 8010e72:	e007      	b.n	8010e84 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e76:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1e9      	bne.n	8010e58 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d022      	beq.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d106      	bne.n	8010ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010e92:	4b15      	ldr	r3, [pc, #84]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e94:	f240 12df 	movw	r2, #479	; 0x1df
 8010e98:	4917      	ldr	r1, [pc, #92]	; (8010ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010e9a:	4815      	ldr	r0, [pc, #84]	; (8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e9c:	f000 fec8 	bl	8011c30 <iprintf>
          LWIP_ASSERT("sanity check",
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d106      	bne.n	8010eba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010eac:	4b0e      	ldr	r3, [pc, #56]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010eae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010eb2:	4911      	ldr	r1, [pc, #68]	; (8010ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010eb4:	480e      	ldr	r0, [pc, #56]	; (8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010eb6:	f000 febb 	bl	8011c30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d006      	beq.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010ec2:	4b09      	ldr	r3, [pc, #36]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010ec4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010ec8:	490c      	ldr	r1, [pc, #48]	; (8010efc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010eca:	4809      	ldr	r0, [pc, #36]	; (8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ecc:	f000 feb0 	bl	8011c30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	bf14      	ite	ne
 8010ed6:	2301      	movne	r3, #1
 8010ed8:	2300      	moveq	r3, #0
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	e000      	b.n	8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3730      	adds	r7, #48	; 0x30
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	08015314 	.word	0x08015314
 8010eec:	080153f8 	.word	0x080153f8
 8010ef0:	0801535c 	.word	0x0801535c
 8010ef4:	08015418 	.word	0x08015418
 8010ef8:	08015450 	.word	0x08015450
 8010efc:	08015460 	.word	0x08015460

08010f00 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08e      	sub	sp, #56	; 0x38
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	f003 030f 	and.w	r3, r3, #15
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b14      	cmp	r3, #20
 8010f1e:	f040 8167 	bne.w	80111f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f24:	88db      	ldrh	r3, [r3, #6]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7f6 fe61 	bl	8007bf0 <lwip_htons>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	00db      	lsls	r3, r3, #3
 8010f38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	885b      	ldrh	r3, [r3, #2]
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7f6 fe55 	bl	8007bf0 <lwip_htons>
 8010f46:	4603      	mov	r3, r0
 8010f48:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	f003 030f 	and.w	r3, r3, #15
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f62:	429a      	cmp	r2, r3
 8010f64:	f0c0 8146 	bcc.w	80111f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7f8 fa75 	bl	8009464 <pbuf_clen>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010f7e:	4b9f      	ldr	r3, [pc, #636]	; (80111fc <ip4_reass+0x2fc>)
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	461a      	mov	r2, r3
 8010f84:	8c3b      	ldrh	r3, [r7, #32]
 8010f86:	4413      	add	r3, r2
 8010f88:	2b0a      	cmp	r3, #10
 8010f8a:	dd10      	ble.n	8010fae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010f8c:	8c3b      	ldrh	r3, [r7, #32]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f92:	f7ff fd81 	bl	8010a98 <ip_reass_remove_oldest_datagram>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 812d 	beq.w	80111f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010f9e:	4b97      	ldr	r3, [pc, #604]	; (80111fc <ip4_reass+0x2fc>)
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	8c3b      	ldrh	r3, [r7, #32]
 8010fa6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010fa8:	2b0a      	cmp	r3, #10
 8010faa:	f300 8125 	bgt.w	80111f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010fae:	4b94      	ldr	r3, [pc, #592]	; (8011200 <ip4_reass+0x300>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8010fb4:	e015      	b.n	8010fe2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb8:	695a      	ldr	r2, [r3, #20]
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d10c      	bne.n	8010fdc <ip4_reass+0xdc>
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc4:	699a      	ldr	r2, [r3, #24]
 8010fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d106      	bne.n	8010fdc <ip4_reass+0xdc>
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	899a      	ldrh	r2, [r3, #12]
 8010fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd4:	889b      	ldrh	r3, [r3, #4]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d006      	beq.n	8010fea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d1e6      	bne.n	8010fb6 <ip4_reass+0xb6>
 8010fe8:	e000      	b.n	8010fec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010fea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d109      	bne.n	8011006 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010ff2:	8c3b      	ldrh	r3, [r7, #32]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ff8:	f7ff fdb0 	bl	8010b5c <ip_reass_enqueue_new_datagram>
 8010ffc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011000:	2b00      	cmp	r3, #0
 8011002:	d11c      	bne.n	801103e <ip4_reass+0x13e>
      goto nullreturn;
 8011004:	e109      	b.n	801121a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	88db      	ldrh	r3, [r3, #6]
 801100a:	b29b      	uxth	r3, r3
 801100c:	4618      	mov	r0, r3
 801100e:	f7f6 fdef 	bl	8007bf0 <lwip_htons>
 8011012:	4603      	mov	r3, r0
 8011014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011018:	2b00      	cmp	r3, #0
 801101a:	d110      	bne.n	801103e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101e:	89db      	ldrh	r3, [r3, #14]
 8011020:	4618      	mov	r0, r3
 8011022:	f7f6 fde5 	bl	8007bf0 <lwip_htons>
 8011026:	4603      	mov	r3, r0
 8011028:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801102c:	2b00      	cmp	r3, #0
 801102e:	d006      	beq.n	801103e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	3308      	adds	r3, #8
 8011034:	2214      	movs	r2, #20
 8011036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011038:	4618      	mov	r0, r3
 801103a:	f000 fd88 	bl	8011b4e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011040:	88db      	ldrh	r3, [r3, #6]
 8011042:	b29b      	uxth	r3, r3
 8011044:	f003 0320 	and.w	r3, r3, #32
 8011048:	2b00      	cmp	r3, #0
 801104a:	bf0c      	ite	eq
 801104c:	2301      	moveq	r3, #1
 801104e:	2300      	movne	r3, #0
 8011050:	b2db      	uxtb	r3, r3
 8011052:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00e      	beq.n	8011078 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801105a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801105c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801105e:	4413      	add	r3, r2
 8011060:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011062:	8b7a      	ldrh	r2, [r7, #26]
 8011064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011066:	429a      	cmp	r2, r3
 8011068:	f0c0 80a0 	bcc.w	80111ac <ip4_reass+0x2ac>
 801106c:	8b7b      	ldrh	r3, [r7, #26]
 801106e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011072:	4293      	cmp	r3, r2
 8011074:	f200 809a 	bhi.w	80111ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011078:	69fa      	ldr	r2, [r7, #28]
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801107e:	f7ff fdd5 	bl	8010c2c <ip_reass_chain_frag_into_datagram_and_validate>
 8011082:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108a:	f000 8091 	beq.w	80111b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801108e:	4b5b      	ldr	r3, [pc, #364]	; (80111fc <ip4_reass+0x2fc>)
 8011090:	881a      	ldrh	r2, [r3, #0]
 8011092:	8c3b      	ldrh	r3, [r7, #32]
 8011094:	4413      	add	r3, r2
 8011096:	b29a      	uxth	r2, r3
 8011098:	4b58      	ldr	r3, [pc, #352]	; (80111fc <ip4_reass+0x2fc>)
 801109a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00d      	beq.n	80110be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80110a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80110a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110a6:	4413      	add	r3, r2
 80110a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	8a7a      	ldrh	r2, [r7, #18]
 80110ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80110b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b2:	7f9b      	ldrb	r3, [r3, #30]
 80110b4:	f043 0301 	orr.w	r3, r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d171      	bne.n	80111a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80110c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c6:	8b9b      	ldrh	r3, [r3, #28]
 80110c8:	3314      	adds	r3, #20
 80110ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80110cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80110d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80110de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e0:	3308      	adds	r3, #8
 80110e2:	2214      	movs	r2, #20
 80110e4:	4619      	mov	r1, r3
 80110e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110e8:	f000 fd31 	bl	8011b4e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80110ec:	8a3b      	ldrh	r3, [r7, #16]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f6 fd7e 	bl	8007bf0 <lwip_htons>
 80110f4:	4603      	mov	r3, r0
 80110f6:	461a      	mov	r2, r3
 80110f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80110fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fe:	2200      	movs	r2, #0
 8011100:	719a      	strb	r2, [r3, #6]
 8011102:	2200      	movs	r2, #0
 8011104:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011108:	2200      	movs	r2, #0
 801110a:	729a      	strb	r2, [r3, #10]
 801110c:	2200      	movs	r2, #0
 801110e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011116:	e00d      	b.n	8011134 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801111e:	2114      	movs	r1, #20
 8011120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011122:	f7f8 f88b 	bl	800923c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7f8 f9db 	bl	80094e4 <pbuf_cat>
      r = iprh->next_pbuf;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1ee      	bne.n	8011118 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801113a:	4b31      	ldr	r3, [pc, #196]	; (8011200 <ip4_reass+0x300>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011140:	429a      	cmp	r2, r3
 8011142:	d102      	bne.n	801114a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011144:	2300      	movs	r3, #0
 8011146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011148:	e010      	b.n	801116c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801114a:	4b2d      	ldr	r3, [pc, #180]	; (8011200 <ip4_reass+0x300>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011150:	e007      	b.n	8011162 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011158:	429a      	cmp	r2, r3
 801115a:	d006      	beq.n	801116a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1f4      	bne.n	8011152 <ip4_reass+0x252>
 8011168:	e000      	b.n	801116c <ip4_reass+0x26c>
          break;
 801116a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801116c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801116e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011170:	f7ff fd2e 	bl	8010bd0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7f8 f975 	bl	8009464 <pbuf_clen>
 801117a:	4603      	mov	r3, r0
 801117c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801117e:	4b1f      	ldr	r3, [pc, #124]	; (80111fc <ip4_reass+0x2fc>)
 8011180:	881b      	ldrh	r3, [r3, #0]
 8011182:	8c3a      	ldrh	r2, [r7, #32]
 8011184:	429a      	cmp	r2, r3
 8011186:	d906      	bls.n	8011196 <ip4_reass+0x296>
 8011188:	4b1e      	ldr	r3, [pc, #120]	; (8011204 <ip4_reass+0x304>)
 801118a:	f240 229b 	movw	r2, #667	; 0x29b
 801118e:	491e      	ldr	r1, [pc, #120]	; (8011208 <ip4_reass+0x308>)
 8011190:	481e      	ldr	r0, [pc, #120]	; (801120c <ip4_reass+0x30c>)
 8011192:	f000 fd4d 	bl	8011c30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011196:	4b19      	ldr	r3, [pc, #100]	; (80111fc <ip4_reass+0x2fc>)
 8011198:	881a      	ldrh	r2, [r3, #0]
 801119a:	8c3b      	ldrh	r3, [r7, #32]
 801119c:	1ad3      	subs	r3, r2, r3
 801119e:	b29a      	uxth	r2, r3
 80111a0:	4b16      	ldr	r3, [pc, #88]	; (80111fc <ip4_reass+0x2fc>)
 80111a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	e03c      	b.n	8011222 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80111a8:	2300      	movs	r3, #0
 80111aa:	e03a      	b.n	8011222 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80111ac:	bf00      	nop
 80111ae:	e000      	b.n	80111b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80111b0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d106      	bne.n	80111c6 <ip4_reass+0x2c6>
 80111b8:	4b12      	ldr	r3, [pc, #72]	; (8011204 <ip4_reass+0x304>)
 80111ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80111be:	4914      	ldr	r1, [pc, #80]	; (8011210 <ip4_reass+0x310>)
 80111c0:	4812      	ldr	r0, [pc, #72]	; (801120c <ip4_reass+0x30c>)
 80111c2:	f000 fd35 	bl	8011c30 <iprintf>
  if (ipr->p == NULL) {
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d124      	bne.n	8011218 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80111ce:	4b0c      	ldr	r3, [pc, #48]	; (8011200 <ip4_reass+0x300>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d006      	beq.n	80111e6 <ip4_reass+0x2e6>
 80111d8:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <ip4_reass+0x304>)
 80111da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111de:	490d      	ldr	r1, [pc, #52]	; (8011214 <ip4_reass+0x314>)
 80111e0:	480a      	ldr	r0, [pc, #40]	; (801120c <ip4_reass+0x30c>)
 80111e2:	f000 fd25 	bl	8011c30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80111e6:	2100      	movs	r1, #0
 80111e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ea:	f7ff fcf1 	bl	8010bd0 <ip_reass_dequeue_datagram>
 80111ee:	e014      	b.n	801121a <ip4_reass+0x31a>
    goto nullreturn;
 80111f0:	bf00      	nop
 80111f2:	e012      	b.n	801121a <ip4_reass+0x31a>
    goto nullreturn;
 80111f4:	bf00      	nop
 80111f6:	e010      	b.n	801121a <ip4_reass+0x31a>
      goto nullreturn;
 80111f8:	bf00      	nop
 80111fa:	e00e      	b.n	801121a <ip4_reass+0x31a>
 80111fc:	20004bfc 	.word	0x20004bfc
 8011200:	20004bf8 	.word	0x20004bf8
 8011204:	08015314 	.word	0x08015314
 8011208:	08015484 	.word	0x08015484
 801120c:	0801535c 	.word	0x0801535c
 8011210:	080154a0 	.word	0x080154a0
 8011214:	080154ac 	.word	0x080154ac
  }

nullreturn:
 8011218:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7f8 f894 	bl	8009348 <pbuf_free>
  return NULL;
 8011220:	2300      	movs	r3, #0
}
 8011222:	4618      	mov	r0, r3
 8011224:	3738      	adds	r7, #56	; 0x38
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop

0801122c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011230:	2005      	movs	r0, #5
 8011232:	f7f7 f993 	bl	800855c <memp_malloc>
 8011236:	4603      	mov	r3, r0
}
 8011238:	4618      	mov	r0, r3
 801123a:	bd80      	pop	{r7, pc}

0801123c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d106      	bne.n	8011258 <ip_frag_free_pbuf_custom_ref+0x1c>
 801124a:	4b07      	ldr	r3, [pc, #28]	; (8011268 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801124c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011250:	4906      	ldr	r1, [pc, #24]	; (801126c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011252:	4807      	ldr	r0, [pc, #28]	; (8011270 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011254:	f000 fcec 	bl	8011c30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011258:	6879      	ldr	r1, [r7, #4]
 801125a:	2005      	movs	r0, #5
 801125c:	f7f7 f9d0 	bl	8008600 <memp_free>
}
 8011260:	bf00      	nop
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	08015314 	.word	0x08015314
 801126c:	080154cc 	.word	0x080154cc
 8011270:	0801535c 	.word	0x0801535c

08011274 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b084      	sub	sp, #16
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <ipfrag_free_pbuf_custom+0x20>
 8011286:	4b11      	ldr	r3, [pc, #68]	; (80112cc <ipfrag_free_pbuf_custom+0x58>)
 8011288:	f240 22ce 	movw	r2, #718	; 0x2ce
 801128c:	4910      	ldr	r1, [pc, #64]	; (80112d0 <ipfrag_free_pbuf_custom+0x5c>)
 801128e:	4811      	ldr	r0, [pc, #68]	; (80112d4 <ipfrag_free_pbuf_custom+0x60>)
 8011290:	f000 fcce 	bl	8011c30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	429a      	cmp	r2, r3
 801129a:	d006      	beq.n	80112aa <ipfrag_free_pbuf_custom+0x36>
 801129c:	4b0b      	ldr	r3, [pc, #44]	; (80112cc <ipfrag_free_pbuf_custom+0x58>)
 801129e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80112a2:	490d      	ldr	r1, [pc, #52]	; (80112d8 <ipfrag_free_pbuf_custom+0x64>)
 80112a4:	480b      	ldr	r0, [pc, #44]	; (80112d4 <ipfrag_free_pbuf_custom+0x60>)
 80112a6:	f000 fcc3 	bl	8011c30 <iprintf>
  if (pcr->original != NULL) {
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	695b      	ldr	r3, [r3, #20]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d004      	beq.n	80112bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	695b      	ldr	r3, [r3, #20]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7f8 f846 	bl	8009348 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f7ff ffbd 	bl	801123c <ip_frag_free_pbuf_custom_ref>
}
 80112c2:	bf00      	nop
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	08015314 	.word	0x08015314
 80112d0:	080154d8 	.word	0x080154d8
 80112d4:	0801535c 	.word	0x0801535c
 80112d8:	080154e4 	.word	0x080154e4

080112dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b094      	sub	sp, #80	; 0x50
 80112e0:	af02      	add	r7, sp, #8
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80112f2:	3b14      	subs	r3, #20
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	da00      	bge.n	80112fa <ip4_frag+0x1e>
 80112f8:	3307      	adds	r3, #7
 80112fa:	10db      	asrs	r3, r3, #3
 80112fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80112fe:	2314      	movs	r3, #20
 8011300:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	f003 030f 	and.w	r3, r3, #15
 8011314:	b2db      	uxtb	r3, r3
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b14      	cmp	r3, #20
 801131c:	d002      	beq.n	8011324 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801131e:	f06f 0305 	mvn.w	r3, #5
 8011322:	e110      	b.n	8011546 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	895b      	ldrh	r3, [r3, #10]
 8011328:	2b13      	cmp	r3, #19
 801132a:	d809      	bhi.n	8011340 <ip4_frag+0x64>
 801132c:	4b88      	ldr	r3, [pc, #544]	; (8011550 <ip4_frag+0x274>)
 801132e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011332:	4988      	ldr	r1, [pc, #544]	; (8011554 <ip4_frag+0x278>)
 8011334:	4888      	ldr	r0, [pc, #544]	; (8011558 <ip4_frag+0x27c>)
 8011336:	f000 fc7b 	bl	8011c30 <iprintf>
 801133a:	f06f 0305 	mvn.w	r3, #5
 801133e:	e102      	b.n	8011546 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011342:	88db      	ldrh	r3, [r3, #6]
 8011344:	b29b      	uxth	r3, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7f6 fc52 	bl	8007bf0 <lwip_htons>
 801134c:	4603      	mov	r3, r0
 801134e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011352:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011356:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801135a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801135c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011360:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	891b      	ldrh	r3, [r3, #8]
 8011366:	3b14      	subs	r3, #20
 8011368:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801136c:	e0e1      	b.n	8011532 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801136e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011370:	00db      	lsls	r3, r3, #3
 8011372:	b29b      	uxth	r3, r3
 8011374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011378:	4293      	cmp	r3, r2
 801137a:	bf28      	it	cs
 801137c:	4613      	movcs	r3, r2
 801137e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011380:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011384:	2114      	movs	r1, #20
 8011386:	200e      	movs	r0, #14
 8011388:	f7f7 fcfa 	bl	8008d80 <pbuf_alloc>
 801138c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 80d5 	beq.w	8011540 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011398:	895b      	ldrh	r3, [r3, #10]
 801139a:	2b13      	cmp	r3, #19
 801139c:	d806      	bhi.n	80113ac <ip4_frag+0xd0>
 801139e:	4b6c      	ldr	r3, [pc, #432]	; (8011550 <ip4_frag+0x274>)
 80113a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80113a4:	496d      	ldr	r1, [pc, #436]	; (801155c <ip4_frag+0x280>)
 80113a6:	486c      	ldr	r0, [pc, #432]	; (8011558 <ip4_frag+0x27c>)
 80113a8:	f000 fc42 	bl	8011c30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	2214      	movs	r2, #20
 80113b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 fbca 	bl	8011b4e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80113ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80113c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80113c6:	e064      	b.n	8011492 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	895a      	ldrh	r2, [r3, #10]
 80113cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	895b      	ldrh	r3, [r3, #10]
 80113d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80113d8:	429a      	cmp	r2, r3
 80113da:	d906      	bls.n	80113ea <ip4_frag+0x10e>
 80113dc:	4b5c      	ldr	r3, [pc, #368]	; (8011550 <ip4_frag+0x274>)
 80113de:	f240 322d 	movw	r2, #813	; 0x32d
 80113e2:	495f      	ldr	r1, [pc, #380]	; (8011560 <ip4_frag+0x284>)
 80113e4:	485c      	ldr	r0, [pc, #368]	; (8011558 <ip4_frag+0x27c>)
 80113e6:	f000 fc23 	bl	8011c30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80113ea:	8bfa      	ldrh	r2, [r7, #30]
 80113ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80113f0:	4293      	cmp	r3, r2
 80113f2:	bf28      	it	cs
 80113f4:	4613      	movcs	r3, r2
 80113f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80113fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d105      	bne.n	801140e <ip4_frag+0x132>
        poff = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	60fb      	str	r3, [r7, #12]
        continue;
 801140c:	e041      	b.n	8011492 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801140e:	f7ff ff0d 	bl	801122c <ip_frag_alloc_pbuf_custom_ref>
 8011412:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d103      	bne.n	8011422 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801141a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801141c:	f7f7 ff94 	bl	8009348 <pbuf_free>
        goto memerr;
 8011420:	e08f      	b.n	8011542 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011422:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801142a:	4413      	add	r3, r2
 801142c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011430:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011434:	9201      	str	r2, [sp, #4]
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	4603      	mov	r3, r0
 801143a:	2241      	movs	r2, #65	; 0x41
 801143c:	2000      	movs	r0, #0
 801143e:	f7f7 fdc9 	bl	8008fd4 <pbuf_alloced_custom>
 8011442:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801144a:	69b8      	ldr	r0, [r7, #24]
 801144c:	f7ff fef6 	bl	801123c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011452:	f7f7 ff79 	bl	8009348 <pbuf_free>
        goto memerr;
 8011456:	e074      	b.n	8011542 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f7f8 f81b 	bl	8009494 <pbuf_ref>
      pcr->original = p;
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	4a3f      	ldr	r2, [pc, #252]	; (8011564 <ip4_frag+0x288>)
 8011468:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801146a:	6979      	ldr	r1, [r7, #20]
 801146c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801146e:	f7f8 f839 	bl	80094e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011472:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011484:	2b00      	cmp	r3, #0
 8011486:	d004      	beq.n	8011492 <ip4_frag+0x1b6>
        poff = 0;
 8011488:	2300      	movs	r3, #0
 801148a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011492:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011496:	2b00      	cmp	r3, #0
 8011498:	d196      	bne.n	80113c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801149a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801149c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80114a0:	4413      	add	r3, r2
 80114a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80114a8:	f1a3 0213 	sub.w	r2, r3, #19
 80114ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114b0:	429a      	cmp	r2, r3
 80114b2:	bfcc      	ite	gt
 80114b4:	2301      	movgt	r3, #1
 80114b6:	2300      	movle	r3, #0
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80114bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80114c6:	6a3b      	ldr	r3, [r7, #32]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <ip4_frag+0x1f6>
 80114cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d003      	beq.n	80114da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80114d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80114d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80114da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114dc:	4618      	mov	r0, r3
 80114de:	f7f6 fb87 	bl	8007bf0 <lwip_htons>
 80114e2:	4603      	mov	r3, r0
 80114e4:	461a      	mov	r2, r3
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80114ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114ec:	3314      	adds	r3, #20
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7f6 fb7d 	bl	8007bf0 <lwip_htons>
 80114f6:	4603      	mov	r3, r0
 80114f8:	461a      	mov	r2, r3
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80114fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011500:	2200      	movs	r2, #0
 8011502:	729a      	strb	r2, [r3, #10]
 8011504:	2200      	movs	r2, #0
 8011506:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	695b      	ldr	r3, [r3, #20]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011510:	68b8      	ldr	r0, [r7, #8]
 8011512:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011516:	f7f7 ff17 	bl	8009348 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801151a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801151e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801152a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801152c:	4413      	add	r3, r2
 801152e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011532:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011536:	2b00      	cmp	r3, #0
 8011538:	f47f af19 	bne.w	801136e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	e002      	b.n	8011546 <ip4_frag+0x26a>
      goto memerr;
 8011540:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011546:	4618      	mov	r0, r3
 8011548:	3748      	adds	r7, #72	; 0x48
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	08015314 	.word	0x08015314
 8011554:	080154f0 	.word	0x080154f0
 8011558:	0801535c 	.word	0x0801535c
 801155c:	0801550c 	.word	0x0801550c
 8011560:	0801552c 	.word	0x0801552c
 8011564:	08011275 	.word	0x08011275

08011568 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011572:	230e      	movs	r3, #14
 8011574:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	895b      	ldrh	r3, [r3, #10]
 801157a:	2b0e      	cmp	r3, #14
 801157c:	d96e      	bls.n	801165c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	7bdb      	ldrb	r3, [r3, #15]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d106      	bne.n	8011594 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801158c:	3301      	adds	r3, #1
 801158e:	b2da      	uxtb	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	7b1a      	ldrb	r2, [r3, #12]
 801159e:	7b5b      	ldrb	r3, [r3, #13]
 80115a0:	021b      	lsls	r3, r3, #8
 80115a2:	4313      	orrs	r3, r2
 80115a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d023      	beq.n	80115fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d10f      	bne.n	80115da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	785b      	ldrb	r3, [r3, #1]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d11b      	bne.n	80115fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80115c6:	2b5e      	cmp	r3, #94	; 0x5e
 80115c8:	d117      	bne.n	80115fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	7b5b      	ldrb	r3, [r3, #13]
 80115ce:	f043 0310 	orr.w	r3, r3, #16
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	735a      	strb	r2, [r3, #13]
 80115d8:	e00f      	b.n	80115fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	2206      	movs	r2, #6
 80115de:	4928      	ldr	r1, [pc, #160]	; (8011680 <ethernet_input+0x118>)
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 faa6 	bl	8011b32 <memcmp>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7b5b      	ldrb	r3, [r3, #13]
 80115f0:	f043 0308 	orr.w	r3, r3, #8
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80115fa:	89fb      	ldrh	r3, [r7, #14]
 80115fc:	2b08      	cmp	r3, #8
 80115fe:	d003      	beq.n	8011608 <ethernet_input+0xa0>
 8011600:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011604:	d014      	beq.n	8011630 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011606:	e032      	b.n	801166e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801160e:	f003 0308 	and.w	r3, r3, #8
 8011612:	2b00      	cmp	r3, #0
 8011614:	d024      	beq.n	8011660 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011616:	8afb      	ldrh	r3, [r7, #22]
 8011618:	4619      	mov	r1, r3
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7f7 fe0e 	bl	800923c <pbuf_remove_header>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d11e      	bne.n	8011664 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011626:	6839      	ldr	r1, [r7, #0]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7fe ff27 	bl	801047c <ip4_input>
      break;
 801162e:	e013      	b.n	8011658 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011636:	f003 0308 	and.w	r3, r3, #8
 801163a:	2b00      	cmp	r3, #0
 801163c:	d014      	beq.n	8011668 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801163e:	8afb      	ldrh	r3, [r7, #22]
 8011640:	4619      	mov	r1, r3
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7f7 fdfa 	bl	800923c <pbuf_remove_header>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10e      	bne.n	801166c <ethernet_input+0x104>
        etharp_input(p, netif);
 801164e:	6839      	ldr	r1, [r7, #0]
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f7fe f8c7 	bl	800f7e4 <etharp_input>
      break;
 8011656:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	e00c      	b.n	8011676 <ethernet_input+0x10e>
    goto free_and_return;
 801165c:	bf00      	nop
 801165e:	e006      	b.n	801166e <ethernet_input+0x106>
        goto free_and_return;
 8011660:	bf00      	nop
 8011662:	e004      	b.n	801166e <ethernet_input+0x106>
        goto free_and_return;
 8011664:	bf00      	nop
 8011666:	e002      	b.n	801166e <ethernet_input+0x106>
        goto free_and_return;
 8011668:	bf00      	nop
 801166a:	e000      	b.n	801166e <ethernet_input+0x106>
        goto free_and_return;
 801166c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f7f7 fe6a 	bl	8009348 <pbuf_free>
  return ERR_OK;
 8011674:	2300      	movs	r3, #0
}
 8011676:	4618      	mov	r0, r3
 8011678:	3718      	adds	r7, #24
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	08015718 	.word	0x08015718

08011684 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011692:	8c3b      	ldrh	r3, [r7, #32]
 8011694:	4618      	mov	r0, r3
 8011696:	f7f6 faab 	bl	8007bf0 <lwip_htons>
 801169a:	4603      	mov	r3, r0
 801169c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801169e:	210e      	movs	r1, #14
 80116a0:	68b8      	ldr	r0, [r7, #8]
 80116a2:	f7f7 fdbb 	bl	800921c <pbuf_add_header>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d125      	bne.n	80116f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	8afa      	ldrh	r2, [r7, #22]
 80116b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	2206      	movs	r2, #6
 80116bc:	6839      	ldr	r1, [r7, #0]
 80116be:	4618      	mov	r0, r3
 80116c0:	f000 fa45 	bl	8011b4e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	3306      	adds	r3, #6
 80116c8:	2206      	movs	r2, #6
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 fa3e 	bl	8011b4e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116d8:	2b06      	cmp	r3, #6
 80116da:	d006      	beq.n	80116ea <ethernet_output+0x66>
 80116dc:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <ethernet_output+0x84>)
 80116de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80116e2:	490a      	ldr	r1, [pc, #40]	; (801170c <ethernet_output+0x88>)
 80116e4:	480a      	ldr	r0, [pc, #40]	; (8011710 <ethernet_output+0x8c>)
 80116e6:	f000 faa3 	bl	8011c30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	699b      	ldr	r3, [r3, #24]
 80116ee:	68b9      	ldr	r1, [r7, #8]
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	4798      	blx	r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	e002      	b.n	80116fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80116f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80116fa:	f06f 0301 	mvn.w	r3, #1
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	0801553c 	.word	0x0801553c
 801170c:	08015574 	.word	0x08015574
 8011710:	080155a8 	.word	0x080155a8

08011714 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2200      	movs	r2, #0
 8011722:	2104      	movs	r1, #4
 8011724:	4618      	mov	r0, r3
 8011726:	f7f2 fd77 	bl	8004218 <osMessageQueueNew>
 801172a:	4602      	mov	r2, r0
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d102      	bne.n	801173e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011738:	f04f 33ff 	mov.w	r3, #4294967295
 801173c:	e000      	b.n	8011740 <sys_mbox_new+0x2c>

  return ERR_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	3708      	adds	r7, #8
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6818      	ldr	r0, [r3, #0]
 8011756:	4639      	mov	r1, r7
 8011758:	2300      	movs	r3, #0
 801175a:	2200      	movs	r2, #0
 801175c:	f7f2 fde2 	bl	8004324 <osMessageQueuePut>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d102      	bne.n	801176c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	73fb      	strb	r3, [r7, #15]
 801176a:	e001      	b.n	8011770 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801176c:	23ff      	movs	r3, #255	; 0xff
 801176e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3710      	adds	r7, #16
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011788:	f7f2 f9a8 	bl	8003adc <osKernelGetTickCount>
 801178c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d013      	beq.n	80117bc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	6818      	ldr	r0, [r3, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2200      	movs	r2, #0
 801179c:	68b9      	ldr	r1, [r7, #8]
 801179e:	f7f2 fe35 	bl	800440c <osMessageQueueGet>
 80117a2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d105      	bne.n	80117b6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80117aa:	f7f2 f997 	bl	8003adc <osKernelGetTickCount>
 80117ae:	4602      	mov	r2, r0
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	e00f      	b.n	80117d6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80117b6:	f04f 33ff 	mov.w	r3, #4294967295
 80117ba:	e00c      	b.n	80117d6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6818      	ldr	r0, [r3, #0]
 80117c0:	f04f 33ff 	mov.w	r3, #4294967295
 80117c4:	2200      	movs	r2, #0
 80117c6:	68b9      	ldr	r1, [r7, #8]
 80117c8:	f7f2 fe20 	bl	800440c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80117cc:	f7f2 f986 	bl	8003adc <osKernelGetTickCount>
 80117d0:	4602      	mov	r2, r0
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80117de:	b480      	push	{r7}
 80117e0:	b083      	sub	sp, #12
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <sys_mbox_valid+0x14>
    return 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	e000      	b.n	80117f4 <sys_mbox_valid+0x16>
  else
    return 1;
 80117f2:	2301      	movs	r3, #1
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8011804:	2000      	movs	r0, #0
 8011806:	f7f2 fa65 	bl	8003cd4 <osMutexNew>
 801180a:	4603      	mov	r3, r0
 801180c:	4a01      	ldr	r2, [pc, #4]	; (8011814 <sys_init+0x14>)
 801180e:	6013      	str	r3, [r2, #0]
#endif
}
 8011810:	bf00      	nop
 8011812:	bd80      	pop	{r7, pc}
 8011814:	2000b4e8 	.word	0x2000b4e8

08011818 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8011820:	2000      	movs	r0, #0
 8011822:	f7f2 fa57 	bl	8003cd4 <osMutexNew>
 8011826:	4602      	mov	r2, r0
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d102      	bne.n	801183a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011834:	f04f 33ff 	mov.w	r3, #4294967295
 8011838:	e000      	b.n	801183c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f04f 31ff 	mov.w	r1, #4294967295
 8011854:	4618      	mov	r0, r3
 8011856:	f7f2 fad7 	bl	8003e08 <osMutexAcquire>
#endif
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011862:	b580      	push	{r7, lr}
 8011864:	b082      	sub	sp, #8
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	f7f2 fb28 	bl	8003ec4 <osMutexRelease>
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b08e      	sub	sp, #56	; 0x38
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
 8011888:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801188a:	f107 0314 	add.w	r3, r7, #20
 801188e:	2224      	movs	r2, #36	; 0x24
 8011890:	2100      	movs	r1, #0
 8011892:	4618      	mov	r0, r3
 8011894:	f000 f969 	bl	8011b6a <memset>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	617b      	str	r3, [r7, #20]
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	62bb      	str	r3, [r7, #40]	; 0x28
 80118a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80118a4:	f107 0314 	add.w	r3, r7, #20
 80118a8:	461a      	mov	r2, r3
 80118aa:	6879      	ldr	r1, [r7, #4]
 80118ac:	68b8      	ldr	r0, [r7, #8]
 80118ae:	f7f2 f93d 	bl	8003b2c <osThreadNew>
 80118b2:	4603      	mov	r3, r0
#endif
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3738      	adds	r7, #56	; 0x38
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80118c0:	4b04      	ldr	r3, [pc, #16]	; (80118d4 <sys_arch_protect+0x18>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f04f 31ff 	mov.w	r1, #4294967295
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f2 fa9d 	bl	8003e08 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80118ce:	2301      	movs	r3, #1
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	2000b4e8 	.word	0x2000b4e8

080118d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80118e0:	4b04      	ldr	r3, [pc, #16]	; (80118f4 <sys_arch_unprotect+0x1c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7f2 faed 	bl	8003ec4 <osMutexRelease>
}
 80118ea:	bf00      	nop
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	2000b4e8 	.word	0x2000b4e8

080118f8 <std>:
 80118f8:	2300      	movs	r3, #0
 80118fa:	b510      	push	{r4, lr}
 80118fc:	4604      	mov	r4, r0
 80118fe:	e9c0 3300 	strd	r3, r3, [r0]
 8011902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011906:	6083      	str	r3, [r0, #8]
 8011908:	8181      	strh	r1, [r0, #12]
 801190a:	6643      	str	r3, [r0, #100]	; 0x64
 801190c:	81c2      	strh	r2, [r0, #14]
 801190e:	6183      	str	r3, [r0, #24]
 8011910:	4619      	mov	r1, r3
 8011912:	2208      	movs	r2, #8
 8011914:	305c      	adds	r0, #92	; 0x5c
 8011916:	f000 f928 	bl	8011b6a <memset>
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <std+0x38>)
 801191c:	6263      	str	r3, [r4, #36]	; 0x24
 801191e:	4b05      	ldr	r3, [pc, #20]	; (8011934 <std+0x3c>)
 8011920:	62a3      	str	r3, [r4, #40]	; 0x28
 8011922:	4b05      	ldr	r3, [pc, #20]	; (8011938 <std+0x40>)
 8011924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011926:	4b05      	ldr	r3, [pc, #20]	; (801193c <std+0x44>)
 8011928:	6224      	str	r4, [r4, #32]
 801192a:	6323      	str	r3, [r4, #48]	; 0x30
 801192c:	bd10      	pop	{r4, pc}
 801192e:	bf00      	nop
 8011930:	08011dd5 	.word	0x08011dd5
 8011934:	08011df7 	.word	0x08011df7
 8011938:	08011e2f 	.word	0x08011e2f
 801193c:	08011e53 	.word	0x08011e53

08011940 <_cleanup_r>:
 8011940:	4901      	ldr	r1, [pc, #4]	; (8011948 <_cleanup_r+0x8>)
 8011942:	f000 b8af 	b.w	8011aa4 <_fwalk_reent>
 8011946:	bf00      	nop
 8011948:	08011fe9 	.word	0x08011fe9

0801194c <__sfmoreglue>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	1e4a      	subs	r2, r1, #1
 8011950:	2568      	movs	r5, #104	; 0x68
 8011952:	4355      	muls	r5, r2
 8011954:	460e      	mov	r6, r1
 8011956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801195a:	f000 f90f 	bl	8011b7c <_malloc_r>
 801195e:	4604      	mov	r4, r0
 8011960:	b140      	cbz	r0, 8011974 <__sfmoreglue+0x28>
 8011962:	2100      	movs	r1, #0
 8011964:	e9c0 1600 	strd	r1, r6, [r0]
 8011968:	300c      	adds	r0, #12
 801196a:	60a0      	str	r0, [r4, #8]
 801196c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011970:	f000 f8fb 	bl	8011b6a <memset>
 8011974:	4620      	mov	r0, r4
 8011976:	bd70      	pop	{r4, r5, r6, pc}

08011978 <__sfp_lock_acquire>:
 8011978:	4801      	ldr	r0, [pc, #4]	; (8011980 <__sfp_lock_acquire+0x8>)
 801197a:	f000 b8d8 	b.w	8011b2e <__retarget_lock_acquire_recursive>
 801197e:	bf00      	nop
 8011980:	2000b4f4 	.word	0x2000b4f4

08011984 <__sfp_lock_release>:
 8011984:	4801      	ldr	r0, [pc, #4]	; (801198c <__sfp_lock_release+0x8>)
 8011986:	f000 b8d3 	b.w	8011b30 <__retarget_lock_release_recursive>
 801198a:	bf00      	nop
 801198c:	2000b4f4 	.word	0x2000b4f4

08011990 <__sinit_lock_acquire>:
 8011990:	4801      	ldr	r0, [pc, #4]	; (8011998 <__sinit_lock_acquire+0x8>)
 8011992:	f000 b8cc 	b.w	8011b2e <__retarget_lock_acquire_recursive>
 8011996:	bf00      	nop
 8011998:	2000b4ef 	.word	0x2000b4ef

0801199c <__sinit_lock_release>:
 801199c:	4801      	ldr	r0, [pc, #4]	; (80119a4 <__sinit_lock_release+0x8>)
 801199e:	f000 b8c7 	b.w	8011b30 <__retarget_lock_release_recursive>
 80119a2:	bf00      	nop
 80119a4:	2000b4ef 	.word	0x2000b4ef

080119a8 <__sinit>:
 80119a8:	b510      	push	{r4, lr}
 80119aa:	4604      	mov	r4, r0
 80119ac:	f7ff fff0 	bl	8011990 <__sinit_lock_acquire>
 80119b0:	69a3      	ldr	r3, [r4, #24]
 80119b2:	b11b      	cbz	r3, 80119bc <__sinit+0x14>
 80119b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119b8:	f7ff bff0 	b.w	801199c <__sinit_lock_release>
 80119bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119c0:	6523      	str	r3, [r4, #80]	; 0x50
 80119c2:	4b13      	ldr	r3, [pc, #76]	; (8011a10 <__sinit+0x68>)
 80119c4:	4a13      	ldr	r2, [pc, #76]	; (8011a14 <__sinit+0x6c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80119ca:	42a3      	cmp	r3, r4
 80119cc:	bf04      	itt	eq
 80119ce:	2301      	moveq	r3, #1
 80119d0:	61a3      	streq	r3, [r4, #24]
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 f820 	bl	8011a18 <__sfp>
 80119d8:	6060      	str	r0, [r4, #4]
 80119da:	4620      	mov	r0, r4
 80119dc:	f000 f81c 	bl	8011a18 <__sfp>
 80119e0:	60a0      	str	r0, [r4, #8]
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 f818 	bl	8011a18 <__sfp>
 80119e8:	2200      	movs	r2, #0
 80119ea:	60e0      	str	r0, [r4, #12]
 80119ec:	2104      	movs	r1, #4
 80119ee:	6860      	ldr	r0, [r4, #4]
 80119f0:	f7ff ff82 	bl	80118f8 <std>
 80119f4:	68a0      	ldr	r0, [r4, #8]
 80119f6:	2201      	movs	r2, #1
 80119f8:	2109      	movs	r1, #9
 80119fa:	f7ff ff7d 	bl	80118f8 <std>
 80119fe:	68e0      	ldr	r0, [r4, #12]
 8011a00:	2202      	movs	r2, #2
 8011a02:	2112      	movs	r1, #18
 8011a04:	f7ff ff78 	bl	80118f8 <std>
 8011a08:	2301      	movs	r3, #1
 8011a0a:	61a3      	str	r3, [r4, #24]
 8011a0c:	e7d2      	b.n	80119b4 <__sinit+0xc>
 8011a0e:	bf00      	nop
 8011a10:	08015788 	.word	0x08015788
 8011a14:	08011941 	.word	0x08011941

08011a18 <__sfp>:
 8011a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1a:	4607      	mov	r7, r0
 8011a1c:	f7ff ffac 	bl	8011978 <__sfp_lock_acquire>
 8011a20:	4b1e      	ldr	r3, [pc, #120]	; (8011a9c <__sfp+0x84>)
 8011a22:	681e      	ldr	r6, [r3, #0]
 8011a24:	69b3      	ldr	r3, [r6, #24]
 8011a26:	b913      	cbnz	r3, 8011a2e <__sfp+0x16>
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f7ff ffbd 	bl	80119a8 <__sinit>
 8011a2e:	3648      	adds	r6, #72	; 0x48
 8011a30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	d503      	bpl.n	8011a40 <__sfp+0x28>
 8011a38:	6833      	ldr	r3, [r6, #0]
 8011a3a:	b30b      	cbz	r3, 8011a80 <__sfp+0x68>
 8011a3c:	6836      	ldr	r6, [r6, #0]
 8011a3e:	e7f7      	b.n	8011a30 <__sfp+0x18>
 8011a40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a44:	b9d5      	cbnz	r5, 8011a7c <__sfp+0x64>
 8011a46:	4b16      	ldr	r3, [pc, #88]	; (8011aa0 <__sfp+0x88>)
 8011a48:	60e3      	str	r3, [r4, #12]
 8011a4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a4e:	6665      	str	r5, [r4, #100]	; 0x64
 8011a50:	f000 f86c 	bl	8011b2c <__retarget_lock_init_recursive>
 8011a54:	f7ff ff96 	bl	8011984 <__sfp_lock_release>
 8011a58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a60:	6025      	str	r5, [r4, #0]
 8011a62:	61a5      	str	r5, [r4, #24]
 8011a64:	2208      	movs	r2, #8
 8011a66:	4629      	mov	r1, r5
 8011a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a6c:	f000 f87d 	bl	8011b6a <memset>
 8011a70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a78:	4620      	mov	r0, r4
 8011a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7c:	3468      	adds	r4, #104	; 0x68
 8011a7e:	e7d9      	b.n	8011a34 <__sfp+0x1c>
 8011a80:	2104      	movs	r1, #4
 8011a82:	4638      	mov	r0, r7
 8011a84:	f7ff ff62 	bl	801194c <__sfmoreglue>
 8011a88:	4604      	mov	r4, r0
 8011a8a:	6030      	str	r0, [r6, #0]
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d1d5      	bne.n	8011a3c <__sfp+0x24>
 8011a90:	f7ff ff78 	bl	8011984 <__sfp_lock_release>
 8011a94:	230c      	movs	r3, #12
 8011a96:	603b      	str	r3, [r7, #0]
 8011a98:	e7ee      	b.n	8011a78 <__sfp+0x60>
 8011a9a:	bf00      	nop
 8011a9c:	08015788 	.word	0x08015788
 8011aa0:	ffff0001 	.word	0xffff0001

08011aa4 <_fwalk_reent>:
 8011aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa8:	4606      	mov	r6, r0
 8011aaa:	4688      	mov	r8, r1
 8011aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ab0:	2700      	movs	r7, #0
 8011ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8011aba:	d505      	bpl.n	8011ac8 <_fwalk_reent+0x24>
 8011abc:	6824      	ldr	r4, [r4, #0]
 8011abe:	2c00      	cmp	r4, #0
 8011ac0:	d1f7      	bne.n	8011ab2 <_fwalk_reent+0xe>
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac8:	89ab      	ldrh	r3, [r5, #12]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d907      	bls.n	8011ade <_fwalk_reent+0x3a>
 8011ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	d003      	beq.n	8011ade <_fwalk_reent+0x3a>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4630      	mov	r0, r6
 8011ada:	47c0      	blx	r8
 8011adc:	4307      	orrs	r7, r0
 8011ade:	3568      	adds	r5, #104	; 0x68
 8011ae0:	e7e9      	b.n	8011ab6 <_fwalk_reent+0x12>
	...

08011ae4 <__libc_init_array>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4d0d      	ldr	r5, [pc, #52]	; (8011b1c <__libc_init_array+0x38>)
 8011ae8:	4c0d      	ldr	r4, [pc, #52]	; (8011b20 <__libc_init_array+0x3c>)
 8011aea:	1b64      	subs	r4, r4, r5
 8011aec:	10a4      	asrs	r4, r4, #2
 8011aee:	2600      	movs	r6, #0
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	d109      	bne.n	8011b08 <__libc_init_array+0x24>
 8011af4:	4d0b      	ldr	r5, [pc, #44]	; (8011b24 <__libc_init_array+0x40>)
 8011af6:	4c0c      	ldr	r4, [pc, #48]	; (8011b28 <__libc_init_array+0x44>)
 8011af8:	f000 ffcc 	bl	8012a94 <_init>
 8011afc:	1b64      	subs	r4, r4, r5
 8011afe:	10a4      	asrs	r4, r4, #2
 8011b00:	2600      	movs	r6, #0
 8011b02:	42a6      	cmp	r6, r4
 8011b04:	d105      	bne.n	8011b12 <__libc_init_array+0x2e>
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0c:	4798      	blx	r3
 8011b0e:	3601      	adds	r6, #1
 8011b10:	e7ee      	b.n	8011af0 <__libc_init_array+0xc>
 8011b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b16:	4798      	blx	r3
 8011b18:	3601      	adds	r6, #1
 8011b1a:	e7f2      	b.n	8011b02 <__libc_init_array+0x1e>
 8011b1c:	0801587c 	.word	0x0801587c
 8011b20:	0801587c 	.word	0x0801587c
 8011b24:	0801587c 	.word	0x0801587c
 8011b28:	08015880 	.word	0x08015880

08011b2c <__retarget_lock_init_recursive>:
 8011b2c:	4770      	bx	lr

08011b2e <__retarget_lock_acquire_recursive>:
 8011b2e:	4770      	bx	lr

08011b30 <__retarget_lock_release_recursive>:
 8011b30:	4770      	bx	lr

08011b32 <memcmp>:
 8011b32:	b530      	push	{r4, r5, lr}
 8011b34:	3901      	subs	r1, #1
 8011b36:	2400      	movs	r4, #0
 8011b38:	42a2      	cmp	r2, r4
 8011b3a:	d101      	bne.n	8011b40 <memcmp+0xe>
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	e005      	b.n	8011b4c <memcmp+0x1a>
 8011b40:	5d03      	ldrb	r3, [r0, r4]
 8011b42:	3401      	adds	r4, #1
 8011b44:	5d0d      	ldrb	r5, [r1, r4]
 8011b46:	42ab      	cmp	r3, r5
 8011b48:	d0f6      	beq.n	8011b38 <memcmp+0x6>
 8011b4a:	1b58      	subs	r0, r3, r5
 8011b4c:	bd30      	pop	{r4, r5, pc}

08011b4e <memcpy>:
 8011b4e:	440a      	add	r2, r1
 8011b50:	4291      	cmp	r1, r2
 8011b52:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b56:	d100      	bne.n	8011b5a <memcpy+0xc>
 8011b58:	4770      	bx	lr
 8011b5a:	b510      	push	{r4, lr}
 8011b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b64:	4291      	cmp	r1, r2
 8011b66:	d1f9      	bne.n	8011b5c <memcpy+0xe>
 8011b68:	bd10      	pop	{r4, pc}

08011b6a <memset>:
 8011b6a:	4402      	add	r2, r0
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d100      	bne.n	8011b74 <memset+0xa>
 8011b72:	4770      	bx	lr
 8011b74:	f803 1b01 	strb.w	r1, [r3], #1
 8011b78:	e7f9      	b.n	8011b6e <memset+0x4>
	...

08011b7c <_malloc_r>:
 8011b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7e:	1ccd      	adds	r5, r1, #3
 8011b80:	f025 0503 	bic.w	r5, r5, #3
 8011b84:	3508      	adds	r5, #8
 8011b86:	2d0c      	cmp	r5, #12
 8011b88:	bf38      	it	cc
 8011b8a:	250c      	movcc	r5, #12
 8011b8c:	2d00      	cmp	r5, #0
 8011b8e:	4606      	mov	r6, r0
 8011b90:	db01      	blt.n	8011b96 <_malloc_r+0x1a>
 8011b92:	42a9      	cmp	r1, r5
 8011b94:	d903      	bls.n	8011b9e <_malloc_r+0x22>
 8011b96:	230c      	movs	r3, #12
 8011b98:	6033      	str	r3, [r6, #0]
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b9e:	f000 fa8b 	bl	80120b8 <__malloc_lock>
 8011ba2:	4921      	ldr	r1, [pc, #132]	; (8011c28 <_malloc_r+0xac>)
 8011ba4:	680a      	ldr	r2, [r1, #0]
 8011ba6:	4614      	mov	r4, r2
 8011ba8:	b99c      	cbnz	r4, 8011bd2 <_malloc_r+0x56>
 8011baa:	4f20      	ldr	r7, [pc, #128]	; (8011c2c <_malloc_r+0xb0>)
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	b923      	cbnz	r3, 8011bba <_malloc_r+0x3e>
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	4630      	mov	r0, r6
 8011bb4:	f000 f8fe 	bl	8011db4 <_sbrk_r>
 8011bb8:	6038      	str	r0, [r7, #0]
 8011bba:	4629      	mov	r1, r5
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f000 f8f9 	bl	8011db4 <_sbrk_r>
 8011bc2:	1c43      	adds	r3, r0, #1
 8011bc4:	d123      	bne.n	8011c0e <_malloc_r+0x92>
 8011bc6:	230c      	movs	r3, #12
 8011bc8:	6033      	str	r3, [r6, #0]
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f000 fa7a 	bl	80120c4 <__malloc_unlock>
 8011bd0:	e7e3      	b.n	8011b9a <_malloc_r+0x1e>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	1b5b      	subs	r3, r3, r5
 8011bd6:	d417      	bmi.n	8011c08 <_malloc_r+0x8c>
 8011bd8:	2b0b      	cmp	r3, #11
 8011bda:	d903      	bls.n	8011be4 <_malloc_r+0x68>
 8011bdc:	6023      	str	r3, [r4, #0]
 8011bde:	441c      	add	r4, r3
 8011be0:	6025      	str	r5, [r4, #0]
 8011be2:	e004      	b.n	8011bee <_malloc_r+0x72>
 8011be4:	6863      	ldr	r3, [r4, #4]
 8011be6:	42a2      	cmp	r2, r4
 8011be8:	bf0c      	ite	eq
 8011bea:	600b      	streq	r3, [r1, #0]
 8011bec:	6053      	strne	r3, [r2, #4]
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f000 fa68 	bl	80120c4 <__malloc_unlock>
 8011bf4:	f104 000b 	add.w	r0, r4, #11
 8011bf8:	1d23      	adds	r3, r4, #4
 8011bfa:	f020 0007 	bic.w	r0, r0, #7
 8011bfe:	1ac2      	subs	r2, r0, r3
 8011c00:	d0cc      	beq.n	8011b9c <_malloc_r+0x20>
 8011c02:	1a1b      	subs	r3, r3, r0
 8011c04:	50a3      	str	r3, [r4, r2]
 8011c06:	e7c9      	b.n	8011b9c <_malloc_r+0x20>
 8011c08:	4622      	mov	r2, r4
 8011c0a:	6864      	ldr	r4, [r4, #4]
 8011c0c:	e7cc      	b.n	8011ba8 <_malloc_r+0x2c>
 8011c0e:	1cc4      	adds	r4, r0, #3
 8011c10:	f024 0403 	bic.w	r4, r4, #3
 8011c14:	42a0      	cmp	r0, r4
 8011c16:	d0e3      	beq.n	8011be0 <_malloc_r+0x64>
 8011c18:	1a21      	subs	r1, r4, r0
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f000 f8ca 	bl	8011db4 <_sbrk_r>
 8011c20:	3001      	adds	r0, #1
 8011c22:	d1dd      	bne.n	8011be0 <_malloc_r+0x64>
 8011c24:	e7cf      	b.n	8011bc6 <_malloc_r+0x4a>
 8011c26:	bf00      	nop
 8011c28:	20004c00 	.word	0x20004c00
 8011c2c:	20004c04 	.word	0x20004c04

08011c30 <iprintf>:
 8011c30:	b40f      	push	{r0, r1, r2, r3}
 8011c32:	4b0a      	ldr	r3, [pc, #40]	; (8011c5c <iprintf+0x2c>)
 8011c34:	b513      	push	{r0, r1, r4, lr}
 8011c36:	681c      	ldr	r4, [r3, #0]
 8011c38:	b124      	cbz	r4, 8011c44 <iprintf+0x14>
 8011c3a:	69a3      	ldr	r3, [r4, #24]
 8011c3c:	b913      	cbnz	r3, 8011c44 <iprintf+0x14>
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f7ff feb2 	bl	80119a8 <__sinit>
 8011c44:	ab05      	add	r3, sp, #20
 8011c46:	9a04      	ldr	r2, [sp, #16]
 8011c48:	68a1      	ldr	r1, [r4, #8]
 8011c4a:	9301      	str	r3, [sp, #4]
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f000 fab9 	bl	80121c4 <_vfiprintf_r>
 8011c52:	b002      	add	sp, #8
 8011c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c58:	b004      	add	sp, #16
 8011c5a:	4770      	bx	lr
 8011c5c:	2000001c 	.word	0x2000001c

08011c60 <rand>:
 8011c60:	4b17      	ldr	r3, [pc, #92]	; (8011cc0 <rand+0x60>)
 8011c62:	b510      	push	{r4, lr}
 8011c64:	681c      	ldr	r4, [r3, #0]
 8011c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c68:	b9b3      	cbnz	r3, 8011c98 <rand+0x38>
 8011c6a:	2018      	movs	r0, #24
 8011c6c:	f000 fa1c 	bl	80120a8 <malloc>
 8011c70:	63a0      	str	r0, [r4, #56]	; 0x38
 8011c72:	b928      	cbnz	r0, 8011c80 <rand+0x20>
 8011c74:	4602      	mov	r2, r0
 8011c76:	4b13      	ldr	r3, [pc, #76]	; (8011cc4 <rand+0x64>)
 8011c78:	4813      	ldr	r0, [pc, #76]	; (8011cc8 <rand+0x68>)
 8011c7a:	214e      	movs	r1, #78	; 0x4e
 8011c7c:	f000 f900 	bl	8011e80 <__assert_func>
 8011c80:	4a12      	ldr	r2, [pc, #72]	; (8011ccc <rand+0x6c>)
 8011c82:	4b13      	ldr	r3, [pc, #76]	; (8011cd0 <rand+0x70>)
 8011c84:	e9c0 2300 	strd	r2, r3, [r0]
 8011c88:	4b12      	ldr	r3, [pc, #72]	; (8011cd4 <rand+0x74>)
 8011c8a:	6083      	str	r3, [r0, #8]
 8011c8c:	230b      	movs	r3, #11
 8011c8e:	8183      	strh	r3, [r0, #12]
 8011c90:	2201      	movs	r2, #1
 8011c92:	2300      	movs	r3, #0
 8011c94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011c98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c9a:	480f      	ldr	r0, [pc, #60]	; (8011cd8 <rand+0x78>)
 8011c9c:	690a      	ldr	r2, [r1, #16]
 8011c9e:	694b      	ldr	r3, [r1, #20]
 8011ca0:	4c0e      	ldr	r4, [pc, #56]	; (8011cdc <rand+0x7c>)
 8011ca2:	4350      	muls	r0, r2
 8011ca4:	fb04 0003 	mla	r0, r4, r3, r0
 8011ca8:	fba2 3404 	umull	r3, r4, r2, r4
 8011cac:	1c5a      	adds	r2, r3, #1
 8011cae:	4404      	add	r4, r0
 8011cb0:	f144 0000 	adc.w	r0, r4, #0
 8011cb4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8011cb8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011cbc:	bd10      	pop	{r4, pc}
 8011cbe:	bf00      	nop
 8011cc0:	2000001c 	.word	0x2000001c
 8011cc4:	0801578c 	.word	0x0801578c
 8011cc8:	080157a3 	.word	0x080157a3
 8011ccc:	abcd330e 	.word	0xabcd330e
 8011cd0:	e66d1234 	.word	0xe66d1234
 8011cd4:	0005deec 	.word	0x0005deec
 8011cd8:	5851f42d 	.word	0x5851f42d
 8011cdc:	4c957f2d 	.word	0x4c957f2d

08011ce0 <cleanup_glue>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	460c      	mov	r4, r1
 8011ce4:	6809      	ldr	r1, [r1, #0]
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	b109      	cbz	r1, 8011cee <cleanup_glue+0xe>
 8011cea:	f7ff fff9 	bl	8011ce0 <cleanup_glue>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cf6:	f000 b9eb 	b.w	80120d0 <_free_r>
	...

08011cfc <_reclaim_reent>:
 8011cfc:	4b2c      	ldr	r3, [pc, #176]	; (8011db0 <_reclaim_reent+0xb4>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4283      	cmp	r3, r0
 8011d02:	b570      	push	{r4, r5, r6, lr}
 8011d04:	4604      	mov	r4, r0
 8011d06:	d051      	beq.n	8011dac <_reclaim_reent+0xb0>
 8011d08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011d0a:	b143      	cbz	r3, 8011d1e <_reclaim_reent+0x22>
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d14a      	bne.n	8011da8 <_reclaim_reent+0xac>
 8011d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d14:	6819      	ldr	r1, [r3, #0]
 8011d16:	b111      	cbz	r1, 8011d1e <_reclaim_reent+0x22>
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f000 f9d9 	bl	80120d0 <_free_r>
 8011d1e:	6961      	ldr	r1, [r4, #20]
 8011d20:	b111      	cbz	r1, 8011d28 <_reclaim_reent+0x2c>
 8011d22:	4620      	mov	r0, r4
 8011d24:	f000 f9d4 	bl	80120d0 <_free_r>
 8011d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011d2a:	b111      	cbz	r1, 8011d32 <_reclaim_reent+0x36>
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f000 f9cf 	bl	80120d0 <_free_r>
 8011d32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d34:	b111      	cbz	r1, 8011d3c <_reclaim_reent+0x40>
 8011d36:	4620      	mov	r0, r4
 8011d38:	f000 f9ca 	bl	80120d0 <_free_r>
 8011d3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011d3e:	b111      	cbz	r1, 8011d46 <_reclaim_reent+0x4a>
 8011d40:	4620      	mov	r0, r4
 8011d42:	f000 f9c5 	bl	80120d0 <_free_r>
 8011d46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011d48:	b111      	cbz	r1, 8011d50 <_reclaim_reent+0x54>
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 f9c0 	bl	80120d0 <_free_r>
 8011d50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011d52:	b111      	cbz	r1, 8011d5a <_reclaim_reent+0x5e>
 8011d54:	4620      	mov	r0, r4
 8011d56:	f000 f9bb 	bl	80120d0 <_free_r>
 8011d5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011d5c:	b111      	cbz	r1, 8011d64 <_reclaim_reent+0x68>
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 f9b6 	bl	80120d0 <_free_r>
 8011d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d66:	b111      	cbz	r1, 8011d6e <_reclaim_reent+0x72>
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f000 f9b1 	bl	80120d0 <_free_r>
 8011d6e:	69a3      	ldr	r3, [r4, #24]
 8011d70:	b1e3      	cbz	r3, 8011dac <_reclaim_reent+0xb0>
 8011d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d74:	4620      	mov	r0, r4
 8011d76:	4798      	blx	r3
 8011d78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d7a:	b1b9      	cbz	r1, 8011dac <_reclaim_reent+0xb0>
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d82:	f7ff bfad 	b.w	8011ce0 <cleanup_glue>
 8011d86:	5949      	ldr	r1, [r1, r5]
 8011d88:	b941      	cbnz	r1, 8011d9c <_reclaim_reent+0xa0>
 8011d8a:	3504      	adds	r5, #4
 8011d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d8e:	2d80      	cmp	r5, #128	; 0x80
 8011d90:	68d9      	ldr	r1, [r3, #12]
 8011d92:	d1f8      	bne.n	8011d86 <_reclaim_reent+0x8a>
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 f99b 	bl	80120d0 <_free_r>
 8011d9a:	e7ba      	b.n	8011d12 <_reclaim_reent+0x16>
 8011d9c:	680e      	ldr	r6, [r1, #0]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 f996 	bl	80120d0 <_free_r>
 8011da4:	4631      	mov	r1, r6
 8011da6:	e7ef      	b.n	8011d88 <_reclaim_reent+0x8c>
 8011da8:	2500      	movs	r5, #0
 8011daa:	e7ef      	b.n	8011d8c <_reclaim_reent+0x90>
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	bf00      	nop
 8011db0:	2000001c 	.word	0x2000001c

08011db4 <_sbrk_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4d06      	ldr	r5, [pc, #24]	; (8011dd0 <_sbrk_r+0x1c>)
 8011db8:	2300      	movs	r3, #0
 8011dba:	4604      	mov	r4, r0
 8011dbc:	4608      	mov	r0, r1
 8011dbe:	602b      	str	r3, [r5, #0]
 8011dc0:	f7ee fe72 	bl	8000aa8 <_sbrk>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	d102      	bne.n	8011dce <_sbrk_r+0x1a>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	b103      	cbz	r3, 8011dce <_sbrk_r+0x1a>
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	2000b4e4 	.word	0x2000b4e4

08011dd4 <__sread>:
 8011dd4:	b510      	push	{r4, lr}
 8011dd6:	460c      	mov	r4, r1
 8011dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ddc:	f000 fcb6 	bl	801274c <_read_r>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	bfab      	itete	ge
 8011de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011de6:	89a3      	ldrhlt	r3, [r4, #12]
 8011de8:	181b      	addge	r3, r3, r0
 8011dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011dee:	bfac      	ite	ge
 8011df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011df2:	81a3      	strhlt	r3, [r4, #12]
 8011df4:	bd10      	pop	{r4, pc}

08011df6 <__swrite>:
 8011df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfa:	461f      	mov	r7, r3
 8011dfc:	898b      	ldrh	r3, [r1, #12]
 8011dfe:	05db      	lsls	r3, r3, #23
 8011e00:	4605      	mov	r5, r0
 8011e02:	460c      	mov	r4, r1
 8011e04:	4616      	mov	r6, r2
 8011e06:	d505      	bpl.n	8011e14 <__swrite+0x1e>
 8011e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e0c:	2302      	movs	r3, #2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f000 f938 	bl	8012084 <_lseek_r>
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e1e:	81a3      	strh	r3, [r4, #12]
 8011e20:	4632      	mov	r2, r6
 8011e22:	463b      	mov	r3, r7
 8011e24:	4628      	mov	r0, r5
 8011e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2a:	f000 b817 	b.w	8011e5c <_write_r>

08011e2e <__sseek>:
 8011e2e:	b510      	push	{r4, lr}
 8011e30:	460c      	mov	r4, r1
 8011e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e36:	f000 f925 	bl	8012084 <_lseek_r>
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	bf15      	itete	ne
 8011e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e4a:	81a3      	strheq	r3, [r4, #12]
 8011e4c:	bf18      	it	ne
 8011e4e:	81a3      	strhne	r3, [r4, #12]
 8011e50:	bd10      	pop	{r4, pc}

08011e52 <__sclose>:
 8011e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e56:	f000 b831 	b.w	8011ebc <_close_r>
	...

08011e5c <_write_r>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	4d07      	ldr	r5, [pc, #28]	; (8011e7c <_write_r+0x20>)
 8011e60:	4604      	mov	r4, r0
 8011e62:	4608      	mov	r0, r1
 8011e64:	4611      	mov	r1, r2
 8011e66:	2200      	movs	r2, #0
 8011e68:	602a      	str	r2, [r5, #0]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f7ee fc2d 	bl	80006ca <_write>
 8011e70:	1c43      	adds	r3, r0, #1
 8011e72:	d102      	bne.n	8011e7a <_write_r+0x1e>
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	b103      	cbz	r3, 8011e7a <_write_r+0x1e>
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	2000b4e4 	.word	0x2000b4e4

08011e80 <__assert_func>:
 8011e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e82:	4614      	mov	r4, r2
 8011e84:	461a      	mov	r2, r3
 8011e86:	4b09      	ldr	r3, [pc, #36]	; (8011eac <__assert_func+0x2c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	68d8      	ldr	r0, [r3, #12]
 8011e8e:	b14c      	cbz	r4, 8011ea4 <__assert_func+0x24>
 8011e90:	4b07      	ldr	r3, [pc, #28]	; (8011eb0 <__assert_func+0x30>)
 8011e92:	9100      	str	r1, [sp, #0]
 8011e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e98:	4906      	ldr	r1, [pc, #24]	; (8011eb4 <__assert_func+0x34>)
 8011e9a:	462b      	mov	r3, r5
 8011e9c:	f000 f8e0 	bl	8012060 <fiprintf>
 8011ea0:	f000 fd26 	bl	80128f0 <abort>
 8011ea4:	4b04      	ldr	r3, [pc, #16]	; (8011eb8 <__assert_func+0x38>)
 8011ea6:	461c      	mov	r4, r3
 8011ea8:	e7f3      	b.n	8011e92 <__assert_func+0x12>
 8011eaa:	bf00      	nop
 8011eac:	2000001c 	.word	0x2000001c
 8011eb0:	08015802 	.word	0x08015802
 8011eb4:	0801580f 	.word	0x0801580f
 8011eb8:	0801583d 	.word	0x0801583d

08011ebc <_close_r>:
 8011ebc:	b538      	push	{r3, r4, r5, lr}
 8011ebe:	4d06      	ldr	r5, [pc, #24]	; (8011ed8 <_close_r+0x1c>)
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	4608      	mov	r0, r1
 8011ec6:	602b      	str	r3, [r5, #0]
 8011ec8:	f7ee fdb9 	bl	8000a3e <_close>
 8011ecc:	1c43      	adds	r3, r0, #1
 8011ece:	d102      	bne.n	8011ed6 <_close_r+0x1a>
 8011ed0:	682b      	ldr	r3, [r5, #0]
 8011ed2:	b103      	cbz	r3, 8011ed6 <_close_r+0x1a>
 8011ed4:	6023      	str	r3, [r4, #0]
 8011ed6:	bd38      	pop	{r3, r4, r5, pc}
 8011ed8:	2000b4e4 	.word	0x2000b4e4

08011edc <__sflush_r>:
 8011edc:	898a      	ldrh	r2, [r1, #12]
 8011ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	0710      	lsls	r0, r2, #28
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	d458      	bmi.n	8011f9c <__sflush_r+0xc0>
 8011eea:	684b      	ldr	r3, [r1, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	dc05      	bgt.n	8011efc <__sflush_r+0x20>
 8011ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	dc02      	bgt.n	8011efc <__sflush_r+0x20>
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011efe:	2e00      	cmp	r6, #0
 8011f00:	d0f9      	beq.n	8011ef6 <__sflush_r+0x1a>
 8011f02:	2300      	movs	r3, #0
 8011f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f08:	682f      	ldr	r7, [r5, #0]
 8011f0a:	602b      	str	r3, [r5, #0]
 8011f0c:	d032      	beq.n	8011f74 <__sflush_r+0x98>
 8011f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f10:	89a3      	ldrh	r3, [r4, #12]
 8011f12:	075a      	lsls	r2, r3, #29
 8011f14:	d505      	bpl.n	8011f22 <__sflush_r+0x46>
 8011f16:	6863      	ldr	r3, [r4, #4]
 8011f18:	1ac0      	subs	r0, r0, r3
 8011f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f1c:	b10b      	cbz	r3, 8011f22 <__sflush_r+0x46>
 8011f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f20:	1ac0      	subs	r0, r0, r3
 8011f22:	2300      	movs	r3, #0
 8011f24:	4602      	mov	r2, r0
 8011f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f28:	6a21      	ldr	r1, [r4, #32]
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	47b0      	blx	r6
 8011f2e:	1c43      	adds	r3, r0, #1
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	d106      	bne.n	8011f42 <__sflush_r+0x66>
 8011f34:	6829      	ldr	r1, [r5, #0]
 8011f36:	291d      	cmp	r1, #29
 8011f38:	d82c      	bhi.n	8011f94 <__sflush_r+0xb8>
 8011f3a:	4a2a      	ldr	r2, [pc, #168]	; (8011fe4 <__sflush_r+0x108>)
 8011f3c:	40ca      	lsrs	r2, r1
 8011f3e:	07d6      	lsls	r6, r2, #31
 8011f40:	d528      	bpl.n	8011f94 <__sflush_r+0xb8>
 8011f42:	2200      	movs	r2, #0
 8011f44:	6062      	str	r2, [r4, #4]
 8011f46:	04d9      	lsls	r1, r3, #19
 8011f48:	6922      	ldr	r2, [r4, #16]
 8011f4a:	6022      	str	r2, [r4, #0]
 8011f4c:	d504      	bpl.n	8011f58 <__sflush_r+0x7c>
 8011f4e:	1c42      	adds	r2, r0, #1
 8011f50:	d101      	bne.n	8011f56 <__sflush_r+0x7a>
 8011f52:	682b      	ldr	r3, [r5, #0]
 8011f54:	b903      	cbnz	r3, 8011f58 <__sflush_r+0x7c>
 8011f56:	6560      	str	r0, [r4, #84]	; 0x54
 8011f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f5a:	602f      	str	r7, [r5, #0]
 8011f5c:	2900      	cmp	r1, #0
 8011f5e:	d0ca      	beq.n	8011ef6 <__sflush_r+0x1a>
 8011f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f64:	4299      	cmp	r1, r3
 8011f66:	d002      	beq.n	8011f6e <__sflush_r+0x92>
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f000 f8b1 	bl	80120d0 <_free_r>
 8011f6e:	2000      	movs	r0, #0
 8011f70:	6360      	str	r0, [r4, #52]	; 0x34
 8011f72:	e7c1      	b.n	8011ef8 <__sflush_r+0x1c>
 8011f74:	6a21      	ldr	r1, [r4, #32]
 8011f76:	2301      	movs	r3, #1
 8011f78:	4628      	mov	r0, r5
 8011f7a:	47b0      	blx	r6
 8011f7c:	1c41      	adds	r1, r0, #1
 8011f7e:	d1c7      	bne.n	8011f10 <__sflush_r+0x34>
 8011f80:	682b      	ldr	r3, [r5, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d0c4      	beq.n	8011f10 <__sflush_r+0x34>
 8011f86:	2b1d      	cmp	r3, #29
 8011f88:	d001      	beq.n	8011f8e <__sflush_r+0xb2>
 8011f8a:	2b16      	cmp	r3, #22
 8011f8c:	d101      	bne.n	8011f92 <__sflush_r+0xb6>
 8011f8e:	602f      	str	r7, [r5, #0]
 8011f90:	e7b1      	b.n	8011ef6 <__sflush_r+0x1a>
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f98:	81a3      	strh	r3, [r4, #12]
 8011f9a:	e7ad      	b.n	8011ef8 <__sflush_r+0x1c>
 8011f9c:	690f      	ldr	r7, [r1, #16]
 8011f9e:	2f00      	cmp	r7, #0
 8011fa0:	d0a9      	beq.n	8011ef6 <__sflush_r+0x1a>
 8011fa2:	0793      	lsls	r3, r2, #30
 8011fa4:	680e      	ldr	r6, [r1, #0]
 8011fa6:	bf08      	it	eq
 8011fa8:	694b      	ldreq	r3, [r1, #20]
 8011faa:	600f      	str	r7, [r1, #0]
 8011fac:	bf18      	it	ne
 8011fae:	2300      	movne	r3, #0
 8011fb0:	eba6 0807 	sub.w	r8, r6, r7
 8011fb4:	608b      	str	r3, [r1, #8]
 8011fb6:	f1b8 0f00 	cmp.w	r8, #0
 8011fba:	dd9c      	ble.n	8011ef6 <__sflush_r+0x1a>
 8011fbc:	6a21      	ldr	r1, [r4, #32]
 8011fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fc0:	4643      	mov	r3, r8
 8011fc2:	463a      	mov	r2, r7
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	47b0      	blx	r6
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	dc06      	bgt.n	8011fda <__sflush_r+0xfe>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fd2:	81a3      	strh	r3, [r4, #12]
 8011fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd8:	e78e      	b.n	8011ef8 <__sflush_r+0x1c>
 8011fda:	4407      	add	r7, r0
 8011fdc:	eba8 0800 	sub.w	r8, r8, r0
 8011fe0:	e7e9      	b.n	8011fb6 <__sflush_r+0xda>
 8011fe2:	bf00      	nop
 8011fe4:	20400001 	.word	0x20400001

08011fe8 <_fflush_r>:
 8011fe8:	b538      	push	{r3, r4, r5, lr}
 8011fea:	690b      	ldr	r3, [r1, #16]
 8011fec:	4605      	mov	r5, r0
 8011fee:	460c      	mov	r4, r1
 8011ff0:	b913      	cbnz	r3, 8011ff8 <_fflush_r+0x10>
 8011ff2:	2500      	movs	r5, #0
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	bd38      	pop	{r3, r4, r5, pc}
 8011ff8:	b118      	cbz	r0, 8012002 <_fflush_r+0x1a>
 8011ffa:	6983      	ldr	r3, [r0, #24]
 8011ffc:	b90b      	cbnz	r3, 8012002 <_fflush_r+0x1a>
 8011ffe:	f7ff fcd3 	bl	80119a8 <__sinit>
 8012002:	4b14      	ldr	r3, [pc, #80]	; (8012054 <_fflush_r+0x6c>)
 8012004:	429c      	cmp	r4, r3
 8012006:	d11b      	bne.n	8012040 <_fflush_r+0x58>
 8012008:	686c      	ldr	r4, [r5, #4]
 801200a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d0ef      	beq.n	8011ff2 <_fflush_r+0xa>
 8012012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012014:	07d0      	lsls	r0, r2, #31
 8012016:	d404      	bmi.n	8012022 <_fflush_r+0x3a>
 8012018:	0599      	lsls	r1, r3, #22
 801201a:	d402      	bmi.n	8012022 <_fflush_r+0x3a>
 801201c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801201e:	f7ff fd86 	bl	8011b2e <__retarget_lock_acquire_recursive>
 8012022:	4628      	mov	r0, r5
 8012024:	4621      	mov	r1, r4
 8012026:	f7ff ff59 	bl	8011edc <__sflush_r>
 801202a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801202c:	07da      	lsls	r2, r3, #31
 801202e:	4605      	mov	r5, r0
 8012030:	d4e0      	bmi.n	8011ff4 <_fflush_r+0xc>
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	059b      	lsls	r3, r3, #22
 8012036:	d4dd      	bmi.n	8011ff4 <_fflush_r+0xc>
 8012038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801203a:	f7ff fd79 	bl	8011b30 <__retarget_lock_release_recursive>
 801203e:	e7d9      	b.n	8011ff4 <_fflush_r+0xc>
 8012040:	4b05      	ldr	r3, [pc, #20]	; (8012058 <_fflush_r+0x70>)
 8012042:	429c      	cmp	r4, r3
 8012044:	d101      	bne.n	801204a <_fflush_r+0x62>
 8012046:	68ac      	ldr	r4, [r5, #8]
 8012048:	e7df      	b.n	801200a <_fflush_r+0x22>
 801204a:	4b04      	ldr	r3, [pc, #16]	; (801205c <_fflush_r+0x74>)
 801204c:	429c      	cmp	r4, r3
 801204e:	bf08      	it	eq
 8012050:	68ec      	ldreq	r4, [r5, #12]
 8012052:	e7da      	b.n	801200a <_fflush_r+0x22>
 8012054:	08015748 	.word	0x08015748
 8012058:	08015768 	.word	0x08015768
 801205c:	08015728 	.word	0x08015728

08012060 <fiprintf>:
 8012060:	b40e      	push	{r1, r2, r3}
 8012062:	b503      	push	{r0, r1, lr}
 8012064:	4601      	mov	r1, r0
 8012066:	ab03      	add	r3, sp, #12
 8012068:	4805      	ldr	r0, [pc, #20]	; (8012080 <fiprintf+0x20>)
 801206a:	f853 2b04 	ldr.w	r2, [r3], #4
 801206e:	6800      	ldr	r0, [r0, #0]
 8012070:	9301      	str	r3, [sp, #4]
 8012072:	f000 f8a7 	bl	80121c4 <_vfiprintf_r>
 8012076:	b002      	add	sp, #8
 8012078:	f85d eb04 	ldr.w	lr, [sp], #4
 801207c:	b003      	add	sp, #12
 801207e:	4770      	bx	lr
 8012080:	2000001c 	.word	0x2000001c

08012084 <_lseek_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4d07      	ldr	r5, [pc, #28]	; (80120a4 <_lseek_r+0x20>)
 8012088:	4604      	mov	r4, r0
 801208a:	4608      	mov	r0, r1
 801208c:	4611      	mov	r1, r2
 801208e:	2200      	movs	r2, #0
 8012090:	602a      	str	r2, [r5, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	f7ee fcfa 	bl	8000a8c <_lseek>
 8012098:	1c43      	adds	r3, r0, #1
 801209a:	d102      	bne.n	80120a2 <_lseek_r+0x1e>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	b103      	cbz	r3, 80120a2 <_lseek_r+0x1e>
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	bd38      	pop	{r3, r4, r5, pc}
 80120a4:	2000b4e4 	.word	0x2000b4e4

080120a8 <malloc>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <malloc+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f7ff bd65 	b.w	8011b7c <_malloc_r>
 80120b2:	bf00      	nop
 80120b4:	2000001c 	.word	0x2000001c

080120b8 <__malloc_lock>:
 80120b8:	4801      	ldr	r0, [pc, #4]	; (80120c0 <__malloc_lock+0x8>)
 80120ba:	f7ff bd38 	b.w	8011b2e <__retarget_lock_acquire_recursive>
 80120be:	bf00      	nop
 80120c0:	2000b4f0 	.word	0x2000b4f0

080120c4 <__malloc_unlock>:
 80120c4:	4801      	ldr	r0, [pc, #4]	; (80120cc <__malloc_unlock+0x8>)
 80120c6:	f7ff bd33 	b.w	8011b30 <__retarget_lock_release_recursive>
 80120ca:	bf00      	nop
 80120cc:	2000b4f0 	.word	0x2000b4f0

080120d0 <_free_r>:
 80120d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120d2:	2900      	cmp	r1, #0
 80120d4:	d048      	beq.n	8012168 <_free_r+0x98>
 80120d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120da:	9001      	str	r0, [sp, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f1a1 0404 	sub.w	r4, r1, #4
 80120e2:	bfb8      	it	lt
 80120e4:	18e4      	addlt	r4, r4, r3
 80120e6:	f7ff ffe7 	bl	80120b8 <__malloc_lock>
 80120ea:	4a20      	ldr	r2, [pc, #128]	; (801216c <_free_r+0x9c>)
 80120ec:	9801      	ldr	r0, [sp, #4]
 80120ee:	6813      	ldr	r3, [r2, #0]
 80120f0:	4615      	mov	r5, r2
 80120f2:	b933      	cbnz	r3, 8012102 <_free_r+0x32>
 80120f4:	6063      	str	r3, [r4, #4]
 80120f6:	6014      	str	r4, [r2, #0]
 80120f8:	b003      	add	sp, #12
 80120fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120fe:	f7ff bfe1 	b.w	80120c4 <__malloc_unlock>
 8012102:	42a3      	cmp	r3, r4
 8012104:	d90b      	bls.n	801211e <_free_r+0x4e>
 8012106:	6821      	ldr	r1, [r4, #0]
 8012108:	1862      	adds	r2, r4, r1
 801210a:	4293      	cmp	r3, r2
 801210c:	bf04      	itt	eq
 801210e:	681a      	ldreq	r2, [r3, #0]
 8012110:	685b      	ldreq	r3, [r3, #4]
 8012112:	6063      	str	r3, [r4, #4]
 8012114:	bf04      	itt	eq
 8012116:	1852      	addeq	r2, r2, r1
 8012118:	6022      	streq	r2, [r4, #0]
 801211a:	602c      	str	r4, [r5, #0]
 801211c:	e7ec      	b.n	80120f8 <_free_r+0x28>
 801211e:	461a      	mov	r2, r3
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	b10b      	cbz	r3, 8012128 <_free_r+0x58>
 8012124:	42a3      	cmp	r3, r4
 8012126:	d9fa      	bls.n	801211e <_free_r+0x4e>
 8012128:	6811      	ldr	r1, [r2, #0]
 801212a:	1855      	adds	r5, r2, r1
 801212c:	42a5      	cmp	r5, r4
 801212e:	d10b      	bne.n	8012148 <_free_r+0x78>
 8012130:	6824      	ldr	r4, [r4, #0]
 8012132:	4421      	add	r1, r4
 8012134:	1854      	adds	r4, r2, r1
 8012136:	42a3      	cmp	r3, r4
 8012138:	6011      	str	r1, [r2, #0]
 801213a:	d1dd      	bne.n	80120f8 <_free_r+0x28>
 801213c:	681c      	ldr	r4, [r3, #0]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	6053      	str	r3, [r2, #4]
 8012142:	4421      	add	r1, r4
 8012144:	6011      	str	r1, [r2, #0]
 8012146:	e7d7      	b.n	80120f8 <_free_r+0x28>
 8012148:	d902      	bls.n	8012150 <_free_r+0x80>
 801214a:	230c      	movs	r3, #12
 801214c:	6003      	str	r3, [r0, #0]
 801214e:	e7d3      	b.n	80120f8 <_free_r+0x28>
 8012150:	6825      	ldr	r5, [r4, #0]
 8012152:	1961      	adds	r1, r4, r5
 8012154:	428b      	cmp	r3, r1
 8012156:	bf04      	itt	eq
 8012158:	6819      	ldreq	r1, [r3, #0]
 801215a:	685b      	ldreq	r3, [r3, #4]
 801215c:	6063      	str	r3, [r4, #4]
 801215e:	bf04      	itt	eq
 8012160:	1949      	addeq	r1, r1, r5
 8012162:	6021      	streq	r1, [r4, #0]
 8012164:	6054      	str	r4, [r2, #4]
 8012166:	e7c7      	b.n	80120f8 <_free_r+0x28>
 8012168:	b003      	add	sp, #12
 801216a:	bd30      	pop	{r4, r5, pc}
 801216c:	20004c00 	.word	0x20004c00

08012170 <__sfputc_r>:
 8012170:	6893      	ldr	r3, [r2, #8]
 8012172:	3b01      	subs	r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	b410      	push	{r4}
 8012178:	6093      	str	r3, [r2, #8]
 801217a:	da08      	bge.n	801218e <__sfputc_r+0x1e>
 801217c:	6994      	ldr	r4, [r2, #24]
 801217e:	42a3      	cmp	r3, r4
 8012180:	db01      	blt.n	8012186 <__sfputc_r+0x16>
 8012182:	290a      	cmp	r1, #10
 8012184:	d103      	bne.n	801218e <__sfputc_r+0x1e>
 8012186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801218a:	f000 baf1 	b.w	8012770 <__swbuf_r>
 801218e:	6813      	ldr	r3, [r2, #0]
 8012190:	1c58      	adds	r0, r3, #1
 8012192:	6010      	str	r0, [r2, #0]
 8012194:	7019      	strb	r1, [r3, #0]
 8012196:	4608      	mov	r0, r1
 8012198:	f85d 4b04 	ldr.w	r4, [sp], #4
 801219c:	4770      	bx	lr

0801219e <__sfputs_r>:
 801219e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a0:	4606      	mov	r6, r0
 80121a2:	460f      	mov	r7, r1
 80121a4:	4614      	mov	r4, r2
 80121a6:	18d5      	adds	r5, r2, r3
 80121a8:	42ac      	cmp	r4, r5
 80121aa:	d101      	bne.n	80121b0 <__sfputs_r+0x12>
 80121ac:	2000      	movs	r0, #0
 80121ae:	e007      	b.n	80121c0 <__sfputs_r+0x22>
 80121b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b4:	463a      	mov	r2, r7
 80121b6:	4630      	mov	r0, r6
 80121b8:	f7ff ffda 	bl	8012170 <__sfputc_r>
 80121bc:	1c43      	adds	r3, r0, #1
 80121be:	d1f3      	bne.n	80121a8 <__sfputs_r+0xa>
 80121c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121c4 <_vfiprintf_r>:
 80121c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c8:	460d      	mov	r5, r1
 80121ca:	b09d      	sub	sp, #116	; 0x74
 80121cc:	4614      	mov	r4, r2
 80121ce:	4698      	mov	r8, r3
 80121d0:	4606      	mov	r6, r0
 80121d2:	b118      	cbz	r0, 80121dc <_vfiprintf_r+0x18>
 80121d4:	6983      	ldr	r3, [r0, #24]
 80121d6:	b90b      	cbnz	r3, 80121dc <_vfiprintf_r+0x18>
 80121d8:	f7ff fbe6 	bl	80119a8 <__sinit>
 80121dc:	4b89      	ldr	r3, [pc, #548]	; (8012404 <_vfiprintf_r+0x240>)
 80121de:	429d      	cmp	r5, r3
 80121e0:	d11b      	bne.n	801221a <_vfiprintf_r+0x56>
 80121e2:	6875      	ldr	r5, [r6, #4]
 80121e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121e6:	07d9      	lsls	r1, r3, #31
 80121e8:	d405      	bmi.n	80121f6 <_vfiprintf_r+0x32>
 80121ea:	89ab      	ldrh	r3, [r5, #12]
 80121ec:	059a      	lsls	r2, r3, #22
 80121ee:	d402      	bmi.n	80121f6 <_vfiprintf_r+0x32>
 80121f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121f2:	f7ff fc9c 	bl	8011b2e <__retarget_lock_acquire_recursive>
 80121f6:	89ab      	ldrh	r3, [r5, #12]
 80121f8:	071b      	lsls	r3, r3, #28
 80121fa:	d501      	bpl.n	8012200 <_vfiprintf_r+0x3c>
 80121fc:	692b      	ldr	r3, [r5, #16]
 80121fe:	b9eb      	cbnz	r3, 801223c <_vfiprintf_r+0x78>
 8012200:	4629      	mov	r1, r5
 8012202:	4630      	mov	r0, r6
 8012204:	f000 fb06 	bl	8012814 <__swsetup_r>
 8012208:	b1c0      	cbz	r0, 801223c <_vfiprintf_r+0x78>
 801220a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801220c:	07dc      	lsls	r4, r3, #31
 801220e:	d50e      	bpl.n	801222e <_vfiprintf_r+0x6a>
 8012210:	f04f 30ff 	mov.w	r0, #4294967295
 8012214:	b01d      	add	sp, #116	; 0x74
 8012216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221a:	4b7b      	ldr	r3, [pc, #492]	; (8012408 <_vfiprintf_r+0x244>)
 801221c:	429d      	cmp	r5, r3
 801221e:	d101      	bne.n	8012224 <_vfiprintf_r+0x60>
 8012220:	68b5      	ldr	r5, [r6, #8]
 8012222:	e7df      	b.n	80121e4 <_vfiprintf_r+0x20>
 8012224:	4b79      	ldr	r3, [pc, #484]	; (801240c <_vfiprintf_r+0x248>)
 8012226:	429d      	cmp	r5, r3
 8012228:	bf08      	it	eq
 801222a:	68f5      	ldreq	r5, [r6, #12]
 801222c:	e7da      	b.n	80121e4 <_vfiprintf_r+0x20>
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	0598      	lsls	r0, r3, #22
 8012232:	d4ed      	bmi.n	8012210 <_vfiprintf_r+0x4c>
 8012234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012236:	f7ff fc7b 	bl	8011b30 <__retarget_lock_release_recursive>
 801223a:	e7e9      	b.n	8012210 <_vfiprintf_r+0x4c>
 801223c:	2300      	movs	r3, #0
 801223e:	9309      	str	r3, [sp, #36]	; 0x24
 8012240:	2320      	movs	r3, #32
 8012242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012246:	f8cd 800c 	str.w	r8, [sp, #12]
 801224a:	2330      	movs	r3, #48	; 0x30
 801224c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012410 <_vfiprintf_r+0x24c>
 8012250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012254:	f04f 0901 	mov.w	r9, #1
 8012258:	4623      	mov	r3, r4
 801225a:	469a      	mov	sl, r3
 801225c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012260:	b10a      	cbz	r2, 8012266 <_vfiprintf_r+0xa2>
 8012262:	2a25      	cmp	r2, #37	; 0x25
 8012264:	d1f9      	bne.n	801225a <_vfiprintf_r+0x96>
 8012266:	ebba 0b04 	subs.w	fp, sl, r4
 801226a:	d00b      	beq.n	8012284 <_vfiprintf_r+0xc0>
 801226c:	465b      	mov	r3, fp
 801226e:	4622      	mov	r2, r4
 8012270:	4629      	mov	r1, r5
 8012272:	4630      	mov	r0, r6
 8012274:	f7ff ff93 	bl	801219e <__sfputs_r>
 8012278:	3001      	adds	r0, #1
 801227a:	f000 80aa 	beq.w	80123d2 <_vfiprintf_r+0x20e>
 801227e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012280:	445a      	add	r2, fp
 8012282:	9209      	str	r2, [sp, #36]	; 0x24
 8012284:	f89a 3000 	ldrb.w	r3, [sl]
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 80a2 	beq.w	80123d2 <_vfiprintf_r+0x20e>
 801228e:	2300      	movs	r3, #0
 8012290:	f04f 32ff 	mov.w	r2, #4294967295
 8012294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012298:	f10a 0a01 	add.w	sl, sl, #1
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122a4:	931a      	str	r3, [sp, #104]	; 0x68
 80122a6:	4654      	mov	r4, sl
 80122a8:	2205      	movs	r2, #5
 80122aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ae:	4858      	ldr	r0, [pc, #352]	; (8012410 <_vfiprintf_r+0x24c>)
 80122b0:	f7ed ffae 	bl	8000210 <memchr>
 80122b4:	9a04      	ldr	r2, [sp, #16]
 80122b6:	b9d8      	cbnz	r0, 80122f0 <_vfiprintf_r+0x12c>
 80122b8:	06d1      	lsls	r1, r2, #27
 80122ba:	bf44      	itt	mi
 80122bc:	2320      	movmi	r3, #32
 80122be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122c2:	0713      	lsls	r3, r2, #28
 80122c4:	bf44      	itt	mi
 80122c6:	232b      	movmi	r3, #43	; 0x2b
 80122c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122cc:	f89a 3000 	ldrb.w	r3, [sl]
 80122d0:	2b2a      	cmp	r3, #42	; 0x2a
 80122d2:	d015      	beq.n	8012300 <_vfiprintf_r+0x13c>
 80122d4:	9a07      	ldr	r2, [sp, #28]
 80122d6:	4654      	mov	r4, sl
 80122d8:	2000      	movs	r0, #0
 80122da:	f04f 0c0a 	mov.w	ip, #10
 80122de:	4621      	mov	r1, r4
 80122e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e4:	3b30      	subs	r3, #48	; 0x30
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d94e      	bls.n	8012388 <_vfiprintf_r+0x1c4>
 80122ea:	b1b0      	cbz	r0, 801231a <_vfiprintf_r+0x156>
 80122ec:	9207      	str	r2, [sp, #28]
 80122ee:	e014      	b.n	801231a <_vfiprintf_r+0x156>
 80122f0:	eba0 0308 	sub.w	r3, r0, r8
 80122f4:	fa09 f303 	lsl.w	r3, r9, r3
 80122f8:	4313      	orrs	r3, r2
 80122fa:	9304      	str	r3, [sp, #16]
 80122fc:	46a2      	mov	sl, r4
 80122fe:	e7d2      	b.n	80122a6 <_vfiprintf_r+0xe2>
 8012300:	9b03      	ldr	r3, [sp, #12]
 8012302:	1d19      	adds	r1, r3, #4
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	9103      	str	r1, [sp, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	bfbb      	ittet	lt
 801230c:	425b      	neglt	r3, r3
 801230e:	f042 0202 	orrlt.w	r2, r2, #2
 8012312:	9307      	strge	r3, [sp, #28]
 8012314:	9307      	strlt	r3, [sp, #28]
 8012316:	bfb8      	it	lt
 8012318:	9204      	strlt	r2, [sp, #16]
 801231a:	7823      	ldrb	r3, [r4, #0]
 801231c:	2b2e      	cmp	r3, #46	; 0x2e
 801231e:	d10c      	bne.n	801233a <_vfiprintf_r+0x176>
 8012320:	7863      	ldrb	r3, [r4, #1]
 8012322:	2b2a      	cmp	r3, #42	; 0x2a
 8012324:	d135      	bne.n	8012392 <_vfiprintf_r+0x1ce>
 8012326:	9b03      	ldr	r3, [sp, #12]
 8012328:	1d1a      	adds	r2, r3, #4
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	9203      	str	r2, [sp, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	bfb8      	it	lt
 8012332:	f04f 33ff 	movlt.w	r3, #4294967295
 8012336:	3402      	adds	r4, #2
 8012338:	9305      	str	r3, [sp, #20]
 801233a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012420 <_vfiprintf_r+0x25c>
 801233e:	7821      	ldrb	r1, [r4, #0]
 8012340:	2203      	movs	r2, #3
 8012342:	4650      	mov	r0, sl
 8012344:	f7ed ff64 	bl	8000210 <memchr>
 8012348:	b140      	cbz	r0, 801235c <_vfiprintf_r+0x198>
 801234a:	2340      	movs	r3, #64	; 0x40
 801234c:	eba0 000a 	sub.w	r0, r0, sl
 8012350:	fa03 f000 	lsl.w	r0, r3, r0
 8012354:	9b04      	ldr	r3, [sp, #16]
 8012356:	4303      	orrs	r3, r0
 8012358:	3401      	adds	r4, #1
 801235a:	9304      	str	r3, [sp, #16]
 801235c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012360:	482c      	ldr	r0, [pc, #176]	; (8012414 <_vfiprintf_r+0x250>)
 8012362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012366:	2206      	movs	r2, #6
 8012368:	f7ed ff52 	bl	8000210 <memchr>
 801236c:	2800      	cmp	r0, #0
 801236e:	d03f      	beq.n	80123f0 <_vfiprintf_r+0x22c>
 8012370:	4b29      	ldr	r3, [pc, #164]	; (8012418 <_vfiprintf_r+0x254>)
 8012372:	bb1b      	cbnz	r3, 80123bc <_vfiprintf_r+0x1f8>
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	3307      	adds	r3, #7
 8012378:	f023 0307 	bic.w	r3, r3, #7
 801237c:	3308      	adds	r3, #8
 801237e:	9303      	str	r3, [sp, #12]
 8012380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012382:	443b      	add	r3, r7
 8012384:	9309      	str	r3, [sp, #36]	; 0x24
 8012386:	e767      	b.n	8012258 <_vfiprintf_r+0x94>
 8012388:	fb0c 3202 	mla	r2, ip, r2, r3
 801238c:	460c      	mov	r4, r1
 801238e:	2001      	movs	r0, #1
 8012390:	e7a5      	b.n	80122de <_vfiprintf_r+0x11a>
 8012392:	2300      	movs	r3, #0
 8012394:	3401      	adds	r4, #1
 8012396:	9305      	str	r3, [sp, #20]
 8012398:	4619      	mov	r1, r3
 801239a:	f04f 0c0a 	mov.w	ip, #10
 801239e:	4620      	mov	r0, r4
 80123a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123a4:	3a30      	subs	r2, #48	; 0x30
 80123a6:	2a09      	cmp	r2, #9
 80123a8:	d903      	bls.n	80123b2 <_vfiprintf_r+0x1ee>
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d0c5      	beq.n	801233a <_vfiprintf_r+0x176>
 80123ae:	9105      	str	r1, [sp, #20]
 80123b0:	e7c3      	b.n	801233a <_vfiprintf_r+0x176>
 80123b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80123b6:	4604      	mov	r4, r0
 80123b8:	2301      	movs	r3, #1
 80123ba:	e7f0      	b.n	801239e <_vfiprintf_r+0x1da>
 80123bc:	ab03      	add	r3, sp, #12
 80123be:	9300      	str	r3, [sp, #0]
 80123c0:	462a      	mov	r2, r5
 80123c2:	4b16      	ldr	r3, [pc, #88]	; (801241c <_vfiprintf_r+0x258>)
 80123c4:	a904      	add	r1, sp, #16
 80123c6:	4630      	mov	r0, r6
 80123c8:	f3af 8000 	nop.w
 80123cc:	4607      	mov	r7, r0
 80123ce:	1c78      	adds	r0, r7, #1
 80123d0:	d1d6      	bne.n	8012380 <_vfiprintf_r+0x1bc>
 80123d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123d4:	07d9      	lsls	r1, r3, #31
 80123d6:	d405      	bmi.n	80123e4 <_vfiprintf_r+0x220>
 80123d8:	89ab      	ldrh	r3, [r5, #12]
 80123da:	059a      	lsls	r2, r3, #22
 80123dc:	d402      	bmi.n	80123e4 <_vfiprintf_r+0x220>
 80123de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123e0:	f7ff fba6 	bl	8011b30 <__retarget_lock_release_recursive>
 80123e4:	89ab      	ldrh	r3, [r5, #12]
 80123e6:	065b      	lsls	r3, r3, #25
 80123e8:	f53f af12 	bmi.w	8012210 <_vfiprintf_r+0x4c>
 80123ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123ee:	e711      	b.n	8012214 <_vfiprintf_r+0x50>
 80123f0:	ab03      	add	r3, sp, #12
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	462a      	mov	r2, r5
 80123f6:	4b09      	ldr	r3, [pc, #36]	; (801241c <_vfiprintf_r+0x258>)
 80123f8:	a904      	add	r1, sp, #16
 80123fa:	4630      	mov	r0, r6
 80123fc:	f000 f880 	bl	8012500 <_printf_i>
 8012400:	e7e4      	b.n	80123cc <_vfiprintf_r+0x208>
 8012402:	bf00      	nop
 8012404:	08015748 	.word	0x08015748
 8012408:	08015768 	.word	0x08015768
 801240c:	08015728 	.word	0x08015728
 8012410:	0801583e 	.word	0x0801583e
 8012414:	08015848 	.word	0x08015848
 8012418:	00000000 	.word	0x00000000
 801241c:	0801219f 	.word	0x0801219f
 8012420:	08015844 	.word	0x08015844

08012424 <_printf_common>:
 8012424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012428:	4616      	mov	r6, r2
 801242a:	4699      	mov	r9, r3
 801242c:	688a      	ldr	r2, [r1, #8]
 801242e:	690b      	ldr	r3, [r1, #16]
 8012430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012434:	4293      	cmp	r3, r2
 8012436:	bfb8      	it	lt
 8012438:	4613      	movlt	r3, r2
 801243a:	6033      	str	r3, [r6, #0]
 801243c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012440:	4607      	mov	r7, r0
 8012442:	460c      	mov	r4, r1
 8012444:	b10a      	cbz	r2, 801244a <_printf_common+0x26>
 8012446:	3301      	adds	r3, #1
 8012448:	6033      	str	r3, [r6, #0]
 801244a:	6823      	ldr	r3, [r4, #0]
 801244c:	0699      	lsls	r1, r3, #26
 801244e:	bf42      	ittt	mi
 8012450:	6833      	ldrmi	r3, [r6, #0]
 8012452:	3302      	addmi	r3, #2
 8012454:	6033      	strmi	r3, [r6, #0]
 8012456:	6825      	ldr	r5, [r4, #0]
 8012458:	f015 0506 	ands.w	r5, r5, #6
 801245c:	d106      	bne.n	801246c <_printf_common+0x48>
 801245e:	f104 0a19 	add.w	sl, r4, #25
 8012462:	68e3      	ldr	r3, [r4, #12]
 8012464:	6832      	ldr	r2, [r6, #0]
 8012466:	1a9b      	subs	r3, r3, r2
 8012468:	42ab      	cmp	r3, r5
 801246a:	dc26      	bgt.n	80124ba <_printf_common+0x96>
 801246c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012470:	1e13      	subs	r3, r2, #0
 8012472:	6822      	ldr	r2, [r4, #0]
 8012474:	bf18      	it	ne
 8012476:	2301      	movne	r3, #1
 8012478:	0692      	lsls	r2, r2, #26
 801247a:	d42b      	bmi.n	80124d4 <_printf_common+0xb0>
 801247c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012480:	4649      	mov	r1, r9
 8012482:	4638      	mov	r0, r7
 8012484:	47c0      	blx	r8
 8012486:	3001      	adds	r0, #1
 8012488:	d01e      	beq.n	80124c8 <_printf_common+0xa4>
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	68e5      	ldr	r5, [r4, #12]
 801248e:	6832      	ldr	r2, [r6, #0]
 8012490:	f003 0306 	and.w	r3, r3, #6
 8012494:	2b04      	cmp	r3, #4
 8012496:	bf08      	it	eq
 8012498:	1aad      	subeq	r5, r5, r2
 801249a:	68a3      	ldr	r3, [r4, #8]
 801249c:	6922      	ldr	r2, [r4, #16]
 801249e:	bf0c      	ite	eq
 80124a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124a4:	2500      	movne	r5, #0
 80124a6:	4293      	cmp	r3, r2
 80124a8:	bfc4      	itt	gt
 80124aa:	1a9b      	subgt	r3, r3, r2
 80124ac:	18ed      	addgt	r5, r5, r3
 80124ae:	2600      	movs	r6, #0
 80124b0:	341a      	adds	r4, #26
 80124b2:	42b5      	cmp	r5, r6
 80124b4:	d11a      	bne.n	80124ec <_printf_common+0xc8>
 80124b6:	2000      	movs	r0, #0
 80124b8:	e008      	b.n	80124cc <_printf_common+0xa8>
 80124ba:	2301      	movs	r3, #1
 80124bc:	4652      	mov	r2, sl
 80124be:	4649      	mov	r1, r9
 80124c0:	4638      	mov	r0, r7
 80124c2:	47c0      	blx	r8
 80124c4:	3001      	adds	r0, #1
 80124c6:	d103      	bne.n	80124d0 <_printf_common+0xac>
 80124c8:	f04f 30ff 	mov.w	r0, #4294967295
 80124cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124d0:	3501      	adds	r5, #1
 80124d2:	e7c6      	b.n	8012462 <_printf_common+0x3e>
 80124d4:	18e1      	adds	r1, r4, r3
 80124d6:	1c5a      	adds	r2, r3, #1
 80124d8:	2030      	movs	r0, #48	; 0x30
 80124da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124de:	4422      	add	r2, r4
 80124e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80124e8:	3302      	adds	r3, #2
 80124ea:	e7c7      	b.n	801247c <_printf_common+0x58>
 80124ec:	2301      	movs	r3, #1
 80124ee:	4622      	mov	r2, r4
 80124f0:	4649      	mov	r1, r9
 80124f2:	4638      	mov	r0, r7
 80124f4:	47c0      	blx	r8
 80124f6:	3001      	adds	r0, #1
 80124f8:	d0e6      	beq.n	80124c8 <_printf_common+0xa4>
 80124fa:	3601      	adds	r6, #1
 80124fc:	e7d9      	b.n	80124b2 <_printf_common+0x8e>
	...

08012500 <_printf_i>:
 8012500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012504:	460c      	mov	r4, r1
 8012506:	4691      	mov	r9, r2
 8012508:	7e27      	ldrb	r7, [r4, #24]
 801250a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801250c:	2f78      	cmp	r7, #120	; 0x78
 801250e:	4680      	mov	r8, r0
 8012510:	469a      	mov	sl, r3
 8012512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012516:	d807      	bhi.n	8012528 <_printf_i+0x28>
 8012518:	2f62      	cmp	r7, #98	; 0x62
 801251a:	d80a      	bhi.n	8012532 <_printf_i+0x32>
 801251c:	2f00      	cmp	r7, #0
 801251e:	f000 80d8 	beq.w	80126d2 <_printf_i+0x1d2>
 8012522:	2f58      	cmp	r7, #88	; 0x58
 8012524:	f000 80a3 	beq.w	801266e <_printf_i+0x16e>
 8012528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801252c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012530:	e03a      	b.n	80125a8 <_printf_i+0xa8>
 8012532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012536:	2b15      	cmp	r3, #21
 8012538:	d8f6      	bhi.n	8012528 <_printf_i+0x28>
 801253a:	a001      	add	r0, pc, #4	; (adr r0, 8012540 <_printf_i+0x40>)
 801253c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012540:	08012599 	.word	0x08012599
 8012544:	080125ad 	.word	0x080125ad
 8012548:	08012529 	.word	0x08012529
 801254c:	08012529 	.word	0x08012529
 8012550:	08012529 	.word	0x08012529
 8012554:	08012529 	.word	0x08012529
 8012558:	080125ad 	.word	0x080125ad
 801255c:	08012529 	.word	0x08012529
 8012560:	08012529 	.word	0x08012529
 8012564:	08012529 	.word	0x08012529
 8012568:	08012529 	.word	0x08012529
 801256c:	080126b9 	.word	0x080126b9
 8012570:	080125dd 	.word	0x080125dd
 8012574:	0801269b 	.word	0x0801269b
 8012578:	08012529 	.word	0x08012529
 801257c:	08012529 	.word	0x08012529
 8012580:	080126db 	.word	0x080126db
 8012584:	08012529 	.word	0x08012529
 8012588:	080125dd 	.word	0x080125dd
 801258c:	08012529 	.word	0x08012529
 8012590:	08012529 	.word	0x08012529
 8012594:	080126a3 	.word	0x080126a3
 8012598:	680b      	ldr	r3, [r1, #0]
 801259a:	1d1a      	adds	r2, r3, #4
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	600a      	str	r2, [r1, #0]
 80125a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80125a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125a8:	2301      	movs	r3, #1
 80125aa:	e0a3      	b.n	80126f4 <_printf_i+0x1f4>
 80125ac:	6825      	ldr	r5, [r4, #0]
 80125ae:	6808      	ldr	r0, [r1, #0]
 80125b0:	062e      	lsls	r6, r5, #24
 80125b2:	f100 0304 	add.w	r3, r0, #4
 80125b6:	d50a      	bpl.n	80125ce <_printf_i+0xce>
 80125b8:	6805      	ldr	r5, [r0, #0]
 80125ba:	600b      	str	r3, [r1, #0]
 80125bc:	2d00      	cmp	r5, #0
 80125be:	da03      	bge.n	80125c8 <_printf_i+0xc8>
 80125c0:	232d      	movs	r3, #45	; 0x2d
 80125c2:	426d      	negs	r5, r5
 80125c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125c8:	485e      	ldr	r0, [pc, #376]	; (8012744 <_printf_i+0x244>)
 80125ca:	230a      	movs	r3, #10
 80125cc:	e019      	b.n	8012602 <_printf_i+0x102>
 80125ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80125d2:	6805      	ldr	r5, [r0, #0]
 80125d4:	600b      	str	r3, [r1, #0]
 80125d6:	bf18      	it	ne
 80125d8:	b22d      	sxthne	r5, r5
 80125da:	e7ef      	b.n	80125bc <_printf_i+0xbc>
 80125dc:	680b      	ldr	r3, [r1, #0]
 80125de:	6825      	ldr	r5, [r4, #0]
 80125e0:	1d18      	adds	r0, r3, #4
 80125e2:	6008      	str	r0, [r1, #0]
 80125e4:	0628      	lsls	r0, r5, #24
 80125e6:	d501      	bpl.n	80125ec <_printf_i+0xec>
 80125e8:	681d      	ldr	r5, [r3, #0]
 80125ea:	e002      	b.n	80125f2 <_printf_i+0xf2>
 80125ec:	0669      	lsls	r1, r5, #25
 80125ee:	d5fb      	bpl.n	80125e8 <_printf_i+0xe8>
 80125f0:	881d      	ldrh	r5, [r3, #0]
 80125f2:	4854      	ldr	r0, [pc, #336]	; (8012744 <_printf_i+0x244>)
 80125f4:	2f6f      	cmp	r7, #111	; 0x6f
 80125f6:	bf0c      	ite	eq
 80125f8:	2308      	moveq	r3, #8
 80125fa:	230a      	movne	r3, #10
 80125fc:	2100      	movs	r1, #0
 80125fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012602:	6866      	ldr	r6, [r4, #4]
 8012604:	60a6      	str	r6, [r4, #8]
 8012606:	2e00      	cmp	r6, #0
 8012608:	bfa2      	ittt	ge
 801260a:	6821      	ldrge	r1, [r4, #0]
 801260c:	f021 0104 	bicge.w	r1, r1, #4
 8012610:	6021      	strge	r1, [r4, #0]
 8012612:	b90d      	cbnz	r5, 8012618 <_printf_i+0x118>
 8012614:	2e00      	cmp	r6, #0
 8012616:	d04d      	beq.n	80126b4 <_printf_i+0x1b4>
 8012618:	4616      	mov	r6, r2
 801261a:	fbb5 f1f3 	udiv	r1, r5, r3
 801261e:	fb03 5711 	mls	r7, r3, r1, r5
 8012622:	5dc7      	ldrb	r7, [r0, r7]
 8012624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012628:	462f      	mov	r7, r5
 801262a:	42bb      	cmp	r3, r7
 801262c:	460d      	mov	r5, r1
 801262e:	d9f4      	bls.n	801261a <_printf_i+0x11a>
 8012630:	2b08      	cmp	r3, #8
 8012632:	d10b      	bne.n	801264c <_printf_i+0x14c>
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	07df      	lsls	r7, r3, #31
 8012638:	d508      	bpl.n	801264c <_printf_i+0x14c>
 801263a:	6923      	ldr	r3, [r4, #16]
 801263c:	6861      	ldr	r1, [r4, #4]
 801263e:	4299      	cmp	r1, r3
 8012640:	bfde      	ittt	le
 8012642:	2330      	movle	r3, #48	; 0x30
 8012644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012648:	f106 36ff 	addle.w	r6, r6, #4294967295
 801264c:	1b92      	subs	r2, r2, r6
 801264e:	6122      	str	r2, [r4, #16]
 8012650:	f8cd a000 	str.w	sl, [sp]
 8012654:	464b      	mov	r3, r9
 8012656:	aa03      	add	r2, sp, #12
 8012658:	4621      	mov	r1, r4
 801265a:	4640      	mov	r0, r8
 801265c:	f7ff fee2 	bl	8012424 <_printf_common>
 8012660:	3001      	adds	r0, #1
 8012662:	d14c      	bne.n	80126fe <_printf_i+0x1fe>
 8012664:	f04f 30ff 	mov.w	r0, #4294967295
 8012668:	b004      	add	sp, #16
 801266a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801266e:	4835      	ldr	r0, [pc, #212]	; (8012744 <_printf_i+0x244>)
 8012670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	680e      	ldr	r6, [r1, #0]
 8012678:	061f      	lsls	r7, r3, #24
 801267a:	f856 5b04 	ldr.w	r5, [r6], #4
 801267e:	600e      	str	r6, [r1, #0]
 8012680:	d514      	bpl.n	80126ac <_printf_i+0x1ac>
 8012682:	07d9      	lsls	r1, r3, #31
 8012684:	bf44      	itt	mi
 8012686:	f043 0320 	orrmi.w	r3, r3, #32
 801268a:	6023      	strmi	r3, [r4, #0]
 801268c:	b91d      	cbnz	r5, 8012696 <_printf_i+0x196>
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	f023 0320 	bic.w	r3, r3, #32
 8012694:	6023      	str	r3, [r4, #0]
 8012696:	2310      	movs	r3, #16
 8012698:	e7b0      	b.n	80125fc <_printf_i+0xfc>
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	f043 0320 	orr.w	r3, r3, #32
 80126a0:	6023      	str	r3, [r4, #0]
 80126a2:	2378      	movs	r3, #120	; 0x78
 80126a4:	4828      	ldr	r0, [pc, #160]	; (8012748 <_printf_i+0x248>)
 80126a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80126aa:	e7e3      	b.n	8012674 <_printf_i+0x174>
 80126ac:	065e      	lsls	r6, r3, #25
 80126ae:	bf48      	it	mi
 80126b0:	b2ad      	uxthmi	r5, r5
 80126b2:	e7e6      	b.n	8012682 <_printf_i+0x182>
 80126b4:	4616      	mov	r6, r2
 80126b6:	e7bb      	b.n	8012630 <_printf_i+0x130>
 80126b8:	680b      	ldr	r3, [r1, #0]
 80126ba:	6826      	ldr	r6, [r4, #0]
 80126bc:	6960      	ldr	r0, [r4, #20]
 80126be:	1d1d      	adds	r5, r3, #4
 80126c0:	600d      	str	r5, [r1, #0]
 80126c2:	0635      	lsls	r5, r6, #24
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	d501      	bpl.n	80126cc <_printf_i+0x1cc>
 80126c8:	6018      	str	r0, [r3, #0]
 80126ca:	e002      	b.n	80126d2 <_printf_i+0x1d2>
 80126cc:	0671      	lsls	r1, r6, #25
 80126ce:	d5fb      	bpl.n	80126c8 <_printf_i+0x1c8>
 80126d0:	8018      	strh	r0, [r3, #0]
 80126d2:	2300      	movs	r3, #0
 80126d4:	6123      	str	r3, [r4, #16]
 80126d6:	4616      	mov	r6, r2
 80126d8:	e7ba      	b.n	8012650 <_printf_i+0x150>
 80126da:	680b      	ldr	r3, [r1, #0]
 80126dc:	1d1a      	adds	r2, r3, #4
 80126de:	600a      	str	r2, [r1, #0]
 80126e0:	681e      	ldr	r6, [r3, #0]
 80126e2:	6862      	ldr	r2, [r4, #4]
 80126e4:	2100      	movs	r1, #0
 80126e6:	4630      	mov	r0, r6
 80126e8:	f7ed fd92 	bl	8000210 <memchr>
 80126ec:	b108      	cbz	r0, 80126f2 <_printf_i+0x1f2>
 80126ee:	1b80      	subs	r0, r0, r6
 80126f0:	6060      	str	r0, [r4, #4]
 80126f2:	6863      	ldr	r3, [r4, #4]
 80126f4:	6123      	str	r3, [r4, #16]
 80126f6:	2300      	movs	r3, #0
 80126f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126fc:	e7a8      	b.n	8012650 <_printf_i+0x150>
 80126fe:	6923      	ldr	r3, [r4, #16]
 8012700:	4632      	mov	r2, r6
 8012702:	4649      	mov	r1, r9
 8012704:	4640      	mov	r0, r8
 8012706:	47d0      	blx	sl
 8012708:	3001      	adds	r0, #1
 801270a:	d0ab      	beq.n	8012664 <_printf_i+0x164>
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	079b      	lsls	r3, r3, #30
 8012710:	d413      	bmi.n	801273a <_printf_i+0x23a>
 8012712:	68e0      	ldr	r0, [r4, #12]
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	4298      	cmp	r0, r3
 8012718:	bfb8      	it	lt
 801271a:	4618      	movlt	r0, r3
 801271c:	e7a4      	b.n	8012668 <_printf_i+0x168>
 801271e:	2301      	movs	r3, #1
 8012720:	4632      	mov	r2, r6
 8012722:	4649      	mov	r1, r9
 8012724:	4640      	mov	r0, r8
 8012726:	47d0      	blx	sl
 8012728:	3001      	adds	r0, #1
 801272a:	d09b      	beq.n	8012664 <_printf_i+0x164>
 801272c:	3501      	adds	r5, #1
 801272e:	68e3      	ldr	r3, [r4, #12]
 8012730:	9903      	ldr	r1, [sp, #12]
 8012732:	1a5b      	subs	r3, r3, r1
 8012734:	42ab      	cmp	r3, r5
 8012736:	dcf2      	bgt.n	801271e <_printf_i+0x21e>
 8012738:	e7eb      	b.n	8012712 <_printf_i+0x212>
 801273a:	2500      	movs	r5, #0
 801273c:	f104 0619 	add.w	r6, r4, #25
 8012740:	e7f5      	b.n	801272e <_printf_i+0x22e>
 8012742:	bf00      	nop
 8012744:	0801584f 	.word	0x0801584f
 8012748:	08015860 	.word	0x08015860

0801274c <_read_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4d07      	ldr	r5, [pc, #28]	; (801276c <_read_r+0x20>)
 8012750:	4604      	mov	r4, r0
 8012752:	4608      	mov	r0, r1
 8012754:	4611      	mov	r1, r2
 8012756:	2200      	movs	r2, #0
 8012758:	602a      	str	r2, [r5, #0]
 801275a:	461a      	mov	r2, r3
 801275c:	f7ee f952 	bl	8000a04 <_read>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d102      	bne.n	801276a <_read_r+0x1e>
 8012764:	682b      	ldr	r3, [r5, #0]
 8012766:	b103      	cbz	r3, 801276a <_read_r+0x1e>
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	bd38      	pop	{r3, r4, r5, pc}
 801276c:	2000b4e4 	.word	0x2000b4e4

08012770 <__swbuf_r>:
 8012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012772:	460e      	mov	r6, r1
 8012774:	4614      	mov	r4, r2
 8012776:	4605      	mov	r5, r0
 8012778:	b118      	cbz	r0, 8012782 <__swbuf_r+0x12>
 801277a:	6983      	ldr	r3, [r0, #24]
 801277c:	b90b      	cbnz	r3, 8012782 <__swbuf_r+0x12>
 801277e:	f7ff f913 	bl	80119a8 <__sinit>
 8012782:	4b21      	ldr	r3, [pc, #132]	; (8012808 <__swbuf_r+0x98>)
 8012784:	429c      	cmp	r4, r3
 8012786:	d12b      	bne.n	80127e0 <__swbuf_r+0x70>
 8012788:	686c      	ldr	r4, [r5, #4]
 801278a:	69a3      	ldr	r3, [r4, #24]
 801278c:	60a3      	str	r3, [r4, #8]
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	071a      	lsls	r2, r3, #28
 8012792:	d52f      	bpl.n	80127f4 <__swbuf_r+0x84>
 8012794:	6923      	ldr	r3, [r4, #16]
 8012796:	b36b      	cbz	r3, 80127f4 <__swbuf_r+0x84>
 8012798:	6923      	ldr	r3, [r4, #16]
 801279a:	6820      	ldr	r0, [r4, #0]
 801279c:	1ac0      	subs	r0, r0, r3
 801279e:	6963      	ldr	r3, [r4, #20]
 80127a0:	b2f6      	uxtb	r6, r6
 80127a2:	4283      	cmp	r3, r0
 80127a4:	4637      	mov	r7, r6
 80127a6:	dc04      	bgt.n	80127b2 <__swbuf_r+0x42>
 80127a8:	4621      	mov	r1, r4
 80127aa:	4628      	mov	r0, r5
 80127ac:	f7ff fc1c 	bl	8011fe8 <_fflush_r>
 80127b0:	bb30      	cbnz	r0, 8012800 <__swbuf_r+0x90>
 80127b2:	68a3      	ldr	r3, [r4, #8]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	60a3      	str	r3, [r4, #8]
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	1c5a      	adds	r2, r3, #1
 80127bc:	6022      	str	r2, [r4, #0]
 80127be:	701e      	strb	r6, [r3, #0]
 80127c0:	6963      	ldr	r3, [r4, #20]
 80127c2:	3001      	adds	r0, #1
 80127c4:	4283      	cmp	r3, r0
 80127c6:	d004      	beq.n	80127d2 <__swbuf_r+0x62>
 80127c8:	89a3      	ldrh	r3, [r4, #12]
 80127ca:	07db      	lsls	r3, r3, #31
 80127cc:	d506      	bpl.n	80127dc <__swbuf_r+0x6c>
 80127ce:	2e0a      	cmp	r6, #10
 80127d0:	d104      	bne.n	80127dc <__swbuf_r+0x6c>
 80127d2:	4621      	mov	r1, r4
 80127d4:	4628      	mov	r0, r5
 80127d6:	f7ff fc07 	bl	8011fe8 <_fflush_r>
 80127da:	b988      	cbnz	r0, 8012800 <__swbuf_r+0x90>
 80127dc:	4638      	mov	r0, r7
 80127de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127e0:	4b0a      	ldr	r3, [pc, #40]	; (801280c <__swbuf_r+0x9c>)
 80127e2:	429c      	cmp	r4, r3
 80127e4:	d101      	bne.n	80127ea <__swbuf_r+0x7a>
 80127e6:	68ac      	ldr	r4, [r5, #8]
 80127e8:	e7cf      	b.n	801278a <__swbuf_r+0x1a>
 80127ea:	4b09      	ldr	r3, [pc, #36]	; (8012810 <__swbuf_r+0xa0>)
 80127ec:	429c      	cmp	r4, r3
 80127ee:	bf08      	it	eq
 80127f0:	68ec      	ldreq	r4, [r5, #12]
 80127f2:	e7ca      	b.n	801278a <__swbuf_r+0x1a>
 80127f4:	4621      	mov	r1, r4
 80127f6:	4628      	mov	r0, r5
 80127f8:	f000 f80c 	bl	8012814 <__swsetup_r>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	d0cb      	beq.n	8012798 <__swbuf_r+0x28>
 8012800:	f04f 37ff 	mov.w	r7, #4294967295
 8012804:	e7ea      	b.n	80127dc <__swbuf_r+0x6c>
 8012806:	bf00      	nop
 8012808:	08015748 	.word	0x08015748
 801280c:	08015768 	.word	0x08015768
 8012810:	08015728 	.word	0x08015728

08012814 <__swsetup_r>:
 8012814:	4b32      	ldr	r3, [pc, #200]	; (80128e0 <__swsetup_r+0xcc>)
 8012816:	b570      	push	{r4, r5, r6, lr}
 8012818:	681d      	ldr	r5, [r3, #0]
 801281a:	4606      	mov	r6, r0
 801281c:	460c      	mov	r4, r1
 801281e:	b125      	cbz	r5, 801282a <__swsetup_r+0x16>
 8012820:	69ab      	ldr	r3, [r5, #24]
 8012822:	b913      	cbnz	r3, 801282a <__swsetup_r+0x16>
 8012824:	4628      	mov	r0, r5
 8012826:	f7ff f8bf 	bl	80119a8 <__sinit>
 801282a:	4b2e      	ldr	r3, [pc, #184]	; (80128e4 <__swsetup_r+0xd0>)
 801282c:	429c      	cmp	r4, r3
 801282e:	d10f      	bne.n	8012850 <__swsetup_r+0x3c>
 8012830:	686c      	ldr	r4, [r5, #4]
 8012832:	89a3      	ldrh	r3, [r4, #12]
 8012834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012838:	0719      	lsls	r1, r3, #28
 801283a:	d42c      	bmi.n	8012896 <__swsetup_r+0x82>
 801283c:	06dd      	lsls	r5, r3, #27
 801283e:	d411      	bmi.n	8012864 <__swsetup_r+0x50>
 8012840:	2309      	movs	r3, #9
 8012842:	6033      	str	r3, [r6, #0]
 8012844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012848:	81a3      	strh	r3, [r4, #12]
 801284a:	f04f 30ff 	mov.w	r0, #4294967295
 801284e:	e03e      	b.n	80128ce <__swsetup_r+0xba>
 8012850:	4b25      	ldr	r3, [pc, #148]	; (80128e8 <__swsetup_r+0xd4>)
 8012852:	429c      	cmp	r4, r3
 8012854:	d101      	bne.n	801285a <__swsetup_r+0x46>
 8012856:	68ac      	ldr	r4, [r5, #8]
 8012858:	e7eb      	b.n	8012832 <__swsetup_r+0x1e>
 801285a:	4b24      	ldr	r3, [pc, #144]	; (80128ec <__swsetup_r+0xd8>)
 801285c:	429c      	cmp	r4, r3
 801285e:	bf08      	it	eq
 8012860:	68ec      	ldreq	r4, [r5, #12]
 8012862:	e7e6      	b.n	8012832 <__swsetup_r+0x1e>
 8012864:	0758      	lsls	r0, r3, #29
 8012866:	d512      	bpl.n	801288e <__swsetup_r+0x7a>
 8012868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801286a:	b141      	cbz	r1, 801287e <__swsetup_r+0x6a>
 801286c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012870:	4299      	cmp	r1, r3
 8012872:	d002      	beq.n	801287a <__swsetup_r+0x66>
 8012874:	4630      	mov	r0, r6
 8012876:	f7ff fc2b 	bl	80120d0 <_free_r>
 801287a:	2300      	movs	r3, #0
 801287c:	6363      	str	r3, [r4, #52]	; 0x34
 801287e:	89a3      	ldrh	r3, [r4, #12]
 8012880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012884:	81a3      	strh	r3, [r4, #12]
 8012886:	2300      	movs	r3, #0
 8012888:	6063      	str	r3, [r4, #4]
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	89a3      	ldrh	r3, [r4, #12]
 8012890:	f043 0308 	orr.w	r3, r3, #8
 8012894:	81a3      	strh	r3, [r4, #12]
 8012896:	6923      	ldr	r3, [r4, #16]
 8012898:	b94b      	cbnz	r3, 80128ae <__swsetup_r+0x9a>
 801289a:	89a3      	ldrh	r3, [r4, #12]
 801289c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128a4:	d003      	beq.n	80128ae <__swsetup_r+0x9a>
 80128a6:	4621      	mov	r1, r4
 80128a8:	4630      	mov	r0, r6
 80128aa:	f000 f84d 	bl	8012948 <__smakebuf_r>
 80128ae:	89a0      	ldrh	r0, [r4, #12]
 80128b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128b4:	f010 0301 	ands.w	r3, r0, #1
 80128b8:	d00a      	beq.n	80128d0 <__swsetup_r+0xbc>
 80128ba:	2300      	movs	r3, #0
 80128bc:	60a3      	str	r3, [r4, #8]
 80128be:	6963      	ldr	r3, [r4, #20]
 80128c0:	425b      	negs	r3, r3
 80128c2:	61a3      	str	r3, [r4, #24]
 80128c4:	6923      	ldr	r3, [r4, #16]
 80128c6:	b943      	cbnz	r3, 80128da <__swsetup_r+0xc6>
 80128c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128cc:	d1ba      	bne.n	8012844 <__swsetup_r+0x30>
 80128ce:	bd70      	pop	{r4, r5, r6, pc}
 80128d0:	0781      	lsls	r1, r0, #30
 80128d2:	bf58      	it	pl
 80128d4:	6963      	ldrpl	r3, [r4, #20]
 80128d6:	60a3      	str	r3, [r4, #8]
 80128d8:	e7f4      	b.n	80128c4 <__swsetup_r+0xb0>
 80128da:	2000      	movs	r0, #0
 80128dc:	e7f7      	b.n	80128ce <__swsetup_r+0xba>
 80128de:	bf00      	nop
 80128e0:	2000001c 	.word	0x2000001c
 80128e4:	08015748 	.word	0x08015748
 80128e8:	08015768 	.word	0x08015768
 80128ec:	08015728 	.word	0x08015728

080128f0 <abort>:
 80128f0:	b508      	push	{r3, lr}
 80128f2:	2006      	movs	r0, #6
 80128f4:	f000 f890 	bl	8012a18 <raise>
 80128f8:	2001      	movs	r0, #1
 80128fa:	f7ee f879 	bl	80009f0 <_exit>

080128fe <__swhatbuf_r>:
 80128fe:	b570      	push	{r4, r5, r6, lr}
 8012900:	460e      	mov	r6, r1
 8012902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012906:	2900      	cmp	r1, #0
 8012908:	b096      	sub	sp, #88	; 0x58
 801290a:	4614      	mov	r4, r2
 801290c:	461d      	mov	r5, r3
 801290e:	da07      	bge.n	8012920 <__swhatbuf_r+0x22>
 8012910:	2300      	movs	r3, #0
 8012912:	602b      	str	r3, [r5, #0]
 8012914:	89b3      	ldrh	r3, [r6, #12]
 8012916:	061a      	lsls	r2, r3, #24
 8012918:	d410      	bmi.n	801293c <__swhatbuf_r+0x3e>
 801291a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801291e:	e00e      	b.n	801293e <__swhatbuf_r+0x40>
 8012920:	466a      	mov	r2, sp
 8012922:	f000 f895 	bl	8012a50 <_fstat_r>
 8012926:	2800      	cmp	r0, #0
 8012928:	dbf2      	blt.n	8012910 <__swhatbuf_r+0x12>
 801292a:	9a01      	ldr	r2, [sp, #4]
 801292c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012934:	425a      	negs	r2, r3
 8012936:	415a      	adcs	r2, r3
 8012938:	602a      	str	r2, [r5, #0]
 801293a:	e7ee      	b.n	801291a <__swhatbuf_r+0x1c>
 801293c:	2340      	movs	r3, #64	; 0x40
 801293e:	2000      	movs	r0, #0
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	b016      	add	sp, #88	; 0x58
 8012944:	bd70      	pop	{r4, r5, r6, pc}
	...

08012948 <__smakebuf_r>:
 8012948:	898b      	ldrh	r3, [r1, #12]
 801294a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801294c:	079d      	lsls	r5, r3, #30
 801294e:	4606      	mov	r6, r0
 8012950:	460c      	mov	r4, r1
 8012952:	d507      	bpl.n	8012964 <__smakebuf_r+0x1c>
 8012954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012958:	6023      	str	r3, [r4, #0]
 801295a:	6123      	str	r3, [r4, #16]
 801295c:	2301      	movs	r3, #1
 801295e:	6163      	str	r3, [r4, #20]
 8012960:	b002      	add	sp, #8
 8012962:	bd70      	pop	{r4, r5, r6, pc}
 8012964:	ab01      	add	r3, sp, #4
 8012966:	466a      	mov	r2, sp
 8012968:	f7ff ffc9 	bl	80128fe <__swhatbuf_r>
 801296c:	9900      	ldr	r1, [sp, #0]
 801296e:	4605      	mov	r5, r0
 8012970:	4630      	mov	r0, r6
 8012972:	f7ff f903 	bl	8011b7c <_malloc_r>
 8012976:	b948      	cbnz	r0, 801298c <__smakebuf_r+0x44>
 8012978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801297c:	059a      	lsls	r2, r3, #22
 801297e:	d4ef      	bmi.n	8012960 <__smakebuf_r+0x18>
 8012980:	f023 0303 	bic.w	r3, r3, #3
 8012984:	f043 0302 	orr.w	r3, r3, #2
 8012988:	81a3      	strh	r3, [r4, #12]
 801298a:	e7e3      	b.n	8012954 <__smakebuf_r+0xc>
 801298c:	4b0d      	ldr	r3, [pc, #52]	; (80129c4 <__smakebuf_r+0x7c>)
 801298e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	6020      	str	r0, [r4, #0]
 8012994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012998:	81a3      	strh	r3, [r4, #12]
 801299a:	9b00      	ldr	r3, [sp, #0]
 801299c:	6163      	str	r3, [r4, #20]
 801299e:	9b01      	ldr	r3, [sp, #4]
 80129a0:	6120      	str	r0, [r4, #16]
 80129a2:	b15b      	cbz	r3, 80129bc <__smakebuf_r+0x74>
 80129a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129a8:	4630      	mov	r0, r6
 80129aa:	f000 f863 	bl	8012a74 <_isatty_r>
 80129ae:	b128      	cbz	r0, 80129bc <__smakebuf_r+0x74>
 80129b0:	89a3      	ldrh	r3, [r4, #12]
 80129b2:	f023 0303 	bic.w	r3, r3, #3
 80129b6:	f043 0301 	orr.w	r3, r3, #1
 80129ba:	81a3      	strh	r3, [r4, #12]
 80129bc:	89a0      	ldrh	r0, [r4, #12]
 80129be:	4305      	orrs	r5, r0
 80129c0:	81a5      	strh	r5, [r4, #12]
 80129c2:	e7cd      	b.n	8012960 <__smakebuf_r+0x18>
 80129c4:	08011941 	.word	0x08011941

080129c8 <_raise_r>:
 80129c8:	291f      	cmp	r1, #31
 80129ca:	b538      	push	{r3, r4, r5, lr}
 80129cc:	4604      	mov	r4, r0
 80129ce:	460d      	mov	r5, r1
 80129d0:	d904      	bls.n	80129dc <_raise_r+0x14>
 80129d2:	2316      	movs	r3, #22
 80129d4:	6003      	str	r3, [r0, #0]
 80129d6:	f04f 30ff 	mov.w	r0, #4294967295
 80129da:	bd38      	pop	{r3, r4, r5, pc}
 80129dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80129de:	b112      	cbz	r2, 80129e6 <_raise_r+0x1e>
 80129e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129e4:	b94b      	cbnz	r3, 80129fa <_raise_r+0x32>
 80129e6:	4620      	mov	r0, r4
 80129e8:	f000 f830 	bl	8012a4c <_getpid_r>
 80129ec:	462a      	mov	r2, r5
 80129ee:	4601      	mov	r1, r0
 80129f0:	4620      	mov	r0, r4
 80129f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f6:	f000 b817 	b.w	8012a28 <_kill_r>
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d00a      	beq.n	8012a14 <_raise_r+0x4c>
 80129fe:	1c59      	adds	r1, r3, #1
 8012a00:	d103      	bne.n	8012a0a <_raise_r+0x42>
 8012a02:	2316      	movs	r3, #22
 8012a04:	6003      	str	r3, [r0, #0]
 8012a06:	2001      	movs	r0, #1
 8012a08:	e7e7      	b.n	80129da <_raise_r+0x12>
 8012a0a:	2400      	movs	r4, #0
 8012a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a10:	4628      	mov	r0, r5
 8012a12:	4798      	blx	r3
 8012a14:	2000      	movs	r0, #0
 8012a16:	e7e0      	b.n	80129da <_raise_r+0x12>

08012a18 <raise>:
 8012a18:	4b02      	ldr	r3, [pc, #8]	; (8012a24 <raise+0xc>)
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	f7ff bfd3 	b.w	80129c8 <_raise_r>
 8012a22:	bf00      	nop
 8012a24:	2000001c 	.word	0x2000001c

08012a28 <_kill_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4d07      	ldr	r5, [pc, #28]	; (8012a48 <_kill_r+0x20>)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4608      	mov	r0, r1
 8012a32:	4611      	mov	r1, r2
 8012a34:	602b      	str	r3, [r5, #0]
 8012a36:	f7ed ffc9 	bl	80009cc <_kill>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	d102      	bne.n	8012a44 <_kill_r+0x1c>
 8012a3e:	682b      	ldr	r3, [r5, #0]
 8012a40:	b103      	cbz	r3, 8012a44 <_kill_r+0x1c>
 8012a42:	6023      	str	r3, [r4, #0]
 8012a44:	bd38      	pop	{r3, r4, r5, pc}
 8012a46:	bf00      	nop
 8012a48:	2000b4e4 	.word	0x2000b4e4

08012a4c <_getpid_r>:
 8012a4c:	f7ed bfb6 	b.w	80009bc <_getpid>

08012a50 <_fstat_r>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	4d07      	ldr	r5, [pc, #28]	; (8012a70 <_fstat_r+0x20>)
 8012a54:	2300      	movs	r3, #0
 8012a56:	4604      	mov	r4, r0
 8012a58:	4608      	mov	r0, r1
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	602b      	str	r3, [r5, #0]
 8012a5e:	f7ed fffa 	bl	8000a56 <_fstat>
 8012a62:	1c43      	adds	r3, r0, #1
 8012a64:	d102      	bne.n	8012a6c <_fstat_r+0x1c>
 8012a66:	682b      	ldr	r3, [r5, #0]
 8012a68:	b103      	cbz	r3, 8012a6c <_fstat_r+0x1c>
 8012a6a:	6023      	str	r3, [r4, #0]
 8012a6c:	bd38      	pop	{r3, r4, r5, pc}
 8012a6e:	bf00      	nop
 8012a70:	2000b4e4 	.word	0x2000b4e4

08012a74 <_isatty_r>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4d06      	ldr	r5, [pc, #24]	; (8012a90 <_isatty_r+0x1c>)
 8012a78:	2300      	movs	r3, #0
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	4608      	mov	r0, r1
 8012a7e:	602b      	str	r3, [r5, #0]
 8012a80:	f7ed fff9 	bl	8000a76 <_isatty>
 8012a84:	1c43      	adds	r3, r0, #1
 8012a86:	d102      	bne.n	8012a8e <_isatty_r+0x1a>
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	b103      	cbz	r3, 8012a8e <_isatty_r+0x1a>
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	bd38      	pop	{r3, r4, r5, pc}
 8012a90:	2000b4e4 	.word	0x2000b4e4

08012a94 <_init>:
 8012a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a96:	bf00      	nop
 8012a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a9a:	bc08      	pop	{r3}
 8012a9c:	469e      	mov	lr, r3
 8012a9e:	4770      	bx	lr

08012aa0 <_fini>:
 8012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa2:	bf00      	nop
 8012aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aa6:	bc08      	pop	{r3}
 8012aa8:	469e      	mov	lr, r3
 8012aaa:	4770      	bx	lr
